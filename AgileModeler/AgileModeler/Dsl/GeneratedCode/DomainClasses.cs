//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NamedElement.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.NamedElement.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("852e53ee-a50b-43af-8a50-f4cbdfac45f2")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x852e53ee, 0xa50b, 0x43af, 0x8a, 0x50, 0xf4, 0xcb, 0xdf, 0xac, 0x45, 0xf2);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa3163d4c, 0x5cf7, 0x40da, 0x83, 0x5b, 0xcd, 0x89, 0xb9, 0x2e, 0x4a, 0x4f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NamedElement/Name.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.NamedElement/Name.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a3163d4c-5cf7-40da-835b-cd89b92e4a4f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelRoot.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelRoot.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ae832652-32a1-4e2b-98a3-bdbbe7ef93c9")]
	public partial class ModelRoot : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xae832652, 0x32a1, 0x4e2b, 0x98, 0xa3, 0xbd, 0xbb, 0xe7, 0xef, 0x93, 0xc9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xf70a8c52, 0x27f9, 0x4db1, 0xa1, 0x7e, 0x42, 0xf4, 0x7d, 0xdc, 0x30, 0x99);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Description for AgileFx.AgileModeler.ModelRoot.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelRoot/Namespace.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelRoot/Namespace.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f70a8c52-27f9-4db1-a17e-42f47ddc3099")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConnectionString domain property code
		
		/// <summary>
		/// ConnectionString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConnectionStringDomainPropertyId = new global::System.Guid(0xd803f3f3, 0x2dd2, 0x4b33, 0xb6, 0x46, 0x98, 0x12, 0xcc, 0xcb, 0xdd, 0x04);
		
		/// <summary>
		/// Storage for ConnectionString
		/// </summary>
		private global::System.String connectionStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ConnectionString domain property.
		/// Description for AgileFx.AgileModeler.ModelRoot.Connection String
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelRoot/ConnectionString.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelRoot/ConnectionString.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d803f3f3-2dd2-4b33-b646-9812cccbdd04")]
		public global::System.String ConnectionString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return connectionStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConnectionStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ConnectionString domain property.
		/// </summary>
		internal sealed partial class ConnectionStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private ConnectionStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ConnectionString domain property value handler.
			/// </summary>
			public static readonly ConnectionStringPropertyHandler Instance = new ConnectionStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ConnectionString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConnectionStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.connectionStringPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.connectionStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataContextName domain property code
		
		/// <summary>
		/// DataContextName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataContextNameDomainPropertyId = new global::System.Guid(0x48ba7fda, 0xe15a, 0x4bc5, 0x99, 0xa3, 0x0f, 0x2a, 0x1e, 0x0f, 0xc1, 0x6e);
		
		/// <summary>
		/// Storage for DataContextName
		/// </summary>
		private global::System.String dataContextNamePropertyStorage = "Entities";
		
		/// <summary>
		/// Gets or sets the value of DataContextName domain property.
		/// Description for AgileFx.AgileModeler.ModelRoot.Data Context Name
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelRoot/DataContextName.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelRoot/DataContextName.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Entities")]
		[DslModeling::DomainObjectId("48ba7fda-e15a-4bc5-99a3-0f2a1e0fc16e")]
		public global::System.String DataContextName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataContextNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataContextNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DataContextName domain property.
		/// </summary>
		internal sealed partial class DataContextNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private DataContextNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DataContextName domain property value handler.
			/// </summary>
			public static readonly DataContextNamePropertyHandler Instance = new DataContextNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DataContextName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataContextNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataContextNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataContextNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Types opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(global::AgileFx.AgileModeler.ModelRootHasTypes.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AgileFx.AgileModeler.ModelType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::AgileFx.AgileModeler.ModelType sourceModelType1 = sourceElement as global::AgileFx.AgileModeler.ModelType;
			if (sourceModelType1 != null)
			{
				// Create link for path ModelRootHasTypes.Types
				this.Types.Add(sourceModelType1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::AgileFx.AgileModeler.ModelType sourceModelType1 = sourceElement as global::AgileFx.AgileModeler.ModelType;
			if (sourceModelType1 != null)
			{
				// Delete link for path ModelRootHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::AgileFx.AgileModeler.ModelRootHasTypes.GetLinks((global::AgileFx.AgileModeler.ModelRoot)this, sourceModelType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AgileFx.AgileModeler.ModelRootHasTypes.ModelRootDomainRoleId, global::AgileFx.AgileModeler.ModelRootHasTypes.TypeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelClass.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelClass.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("48711efd-ce6b-4b47-ae89-2c4e99cd0d2b")]
	public partial class ModelClass : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48711efd, 0xce6b, 0x4b47, 0xae, 0x89, 0x2c, 0x4e, 0x99, 0xcd, 0x0d, 0x2b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TableName domain property code
		
		/// <summary>
		/// TableName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableNameDomainPropertyId = new global::System.Guid(0x0431eb98, 0xe31d, 0x4755, 0xa9, 0x11, 0x4d, 0x4d, 0xea, 0xb9, 0x4e, 0x26);
		
		/// <summary>
		/// Storage for TableName
		/// </summary>
		private global::System.String tableNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TableName domain property.
		/// Description for AgileFx.AgileModeler.ModelClass.Table Name
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelClass/TableName.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelClass/TableName.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0431eb98-e31d-4755-a911-4d4deab94e26")]
		public global::System.String TableName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tableNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TableNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.TableName domain property.
		/// </summary>
		internal sealed partial class TableNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private TableNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.TableName domain property value handler.
			/// </summary>
			public static readonly TableNamePropertyHandler Instance = new TableNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.TableName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tableNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tableNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivesOrImplements domain property code
		
		/// <summary>
		/// DerivesOrImplements domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivesOrImplementsDomainPropertyId = new global::System.Guid(0x7792b646, 0xc1ae, 0x48fd, 0x87, 0xd0, 0x94, 0x04, 0xb8, 0x5d, 0xe9, 0x90);
		
		/// <summary>
		/// Storage for DerivesOrImplements
		/// </summary>
		private global::System.String derivesOrImplementsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DerivesOrImplements domain property.
		/// Comma separated list of base class and implemented interfaces.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelClass/DerivesOrImplements.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelClass/DerivesOrImplements.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7792b646-c1ae-48fd-87d0-9404b85de990")]
		public global::System.String DerivesOrImplements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivesOrImplementsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivesOrImplementsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.DerivesOrImplements domain property.
		/// </summary>
		internal sealed partial class DerivesOrImplementsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private DerivesOrImplementsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.DerivesOrImplements domain property value handler.
			/// </summary>
			public static readonly DerivesOrImplementsPropertyHandler Instance = new DerivesOrImplementsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.DerivesOrImplements domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivesOrImplementsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivesOrImplementsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivesOrImplementsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::AgileFx.AgileModeler.Association.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::AgileFx.AgileModeler.Association.TargetDomainRoleId);
			}
		}
		#endregion
		#region Subclasses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::AgileFx.AgileModeler.Inheritance.SuperclassDomainRoleId);
			}
		}
		#endregion
		#region Baseclass opposite domain role accessor
		/// <summary>
		/// Gets or sets Baseclass.
		/// </summary>
		public virtual ModelClass Baseclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::AgileFx.AgileModeler.Inheritance.SubclassDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::AgileFx.AgileModeler.Inheritance.SubclassDomainRoleId, value);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// Description for AgileFx.AgileModeler.ClassHasFields.ModelClass
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelField> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelField>, ModelField>(global::AgileFx.AgileModeler.ClassHasFields.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region NavigationProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NavigationProperties.
		/// Description for AgileFx.AgileModeler.ClassHasNavigationProperties.ModelClass
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NavigationProperty> NavigationProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(global::AgileFx.AgileModeler.ClassHasNavigationProperties.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AgileFx.AgileModeler.NavigationProperty.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::AgileFx.AgileModeler.ModelField.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::AgileFx.AgileModeler.NavigationProperty sourceNavigationProperty1 = sourceElement as global::AgileFx.AgileModeler.NavigationProperty;
			if (sourceNavigationProperty1 != null)
			{
				// Create link for path ClassHasNavigationProperties.NavigationProperties
				this.NavigationProperties.Add(sourceNavigationProperty1);

				return;
			}
				
			global::AgileFx.AgileModeler.ModelField sourceModelField2 = sourceElement as global::AgileFx.AgileModeler.ModelField;
			if (sourceModelField2 != null)
			{
				// Create link for path ClassHasFields.Fields
				this.Fields.Add(sourceModelField2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::AgileFx.AgileModeler.NavigationProperty sourceNavigationProperty1 = sourceElement as global::AgileFx.AgileModeler.NavigationProperty;
			if (sourceNavigationProperty1 != null)
			{
				// Delete link for path ClassHasNavigationProperties.NavigationProperties
				
				foreach (DslModeling::ElementLink link in global::AgileFx.AgileModeler.ClassHasNavigationProperties.GetLinks((global::AgileFx.AgileModeler.ModelClass)this, sourceNavigationProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AgileFx.AgileModeler.ClassHasNavigationProperties.ModelClassDomainRoleId, global::AgileFx.AgileModeler.ClassHasNavigationProperties.NavigationPropertyDomainRoleId);
				}

				return;
			}
				
			global::AgileFx.AgileModeler.ModelField sourceModelField2 = sourceElement as global::AgileFx.AgileModeler.ModelField;
			if (sourceModelField2 != null)
			{
				// Delete link for path ClassHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::AgileFx.AgileModeler.ClassHasFields.GetLinks((global::AgileFx.AgileModeler.ModelClass)this, sourceModelField2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::AgileFx.AgileModeler.ClassHasFields.ModelClassDomainRoleId, global::AgileFx.AgileModeler.ClassHasFields.ModelFieldDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass ModelFieldBase
	/// A field of a class.
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelFieldBase.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelFieldBase.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2f788ecd-ffbe-481c-8821-7e15721b2434")]
	public partial class ModelFieldBase : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelFieldBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2f788ecd, 0xffbe, 0x481c, 0x88, 0x21, 0x7e, 0x15, 0x72, 0x1b, 0x24, 0x34);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelFieldBase(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelFieldBase(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Getter domain property code
		
		/// <summary>
		/// Getter domain property Id.
		/// </summary>
		public static readonly global::System.Guid GetterDomainPropertyId = new global::System.Guid(0xec4dfa5f, 0x587a, 0x4d30, 0xab, 0x82, 0x46, 0x25, 0xc2, 0x98, 0x8e, 0xab);
		
		/// <summary>
		/// Storage for Getter
		/// </summary>
		private AccessModifier getterPropertyStorage = AccessModifier.Public;
		
		/// <summary>
		/// Gets or sets the value of Getter domain property.
		/// Description for AgileFx.AgileModeler.ModelFieldBase.Getter
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelFieldBase/Getter.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelFieldBase/Getter.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(AccessModifier.Public)]
		[DslModeling::DomainObjectId("ec4dfa5f-587a-4d30-ab82-4625c2988eab")]
		public AccessModifier Getter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return getterPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GetterPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelFieldBase.Getter domain property.
		/// </summary>
		internal sealed partial class GetterPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelFieldBase, AccessModifier>
		{
			private GetterPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelFieldBase.Getter domain property value handler.
			/// </summary>
			public static readonly GetterPropertyHandler Instance = new GetterPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelFieldBase.Getter domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GetterDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AccessModifier GetValue(ModelFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.getterPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelFieldBase element, AccessModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AccessModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.getterPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Setter domain property code
		
		/// <summary>
		/// Setter domain property Id.
		/// </summary>
		public static readonly global::System.Guid SetterDomainPropertyId = new global::System.Guid(0x615b2d24, 0x2843, 0x433d, 0x8f, 0x2b, 0x62, 0xf8, 0x77, 0xba, 0x98, 0x05);
		
		/// <summary>
		/// Storage for Setter
		/// </summary>
		private AccessModifier setterPropertyStorage = AccessModifier.Public;
		
		/// <summary>
		/// Gets or sets the value of Setter domain property.
		/// Description for AgileFx.AgileModeler.ModelFieldBase.Setter
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelFieldBase/Setter.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelFieldBase/Setter.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(AccessModifier.Public)]
		[DslModeling::DomainObjectId("615b2d24-2843-433d-8f2b-62f877ba9805")]
		public AccessModifier Setter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return setterPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SetterPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelFieldBase.Setter domain property.
		/// </summary>
		internal sealed partial class SetterPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelFieldBase, AccessModifier>
		{
			private SetterPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelFieldBase.Setter domain property value handler.
			/// </summary>
			public static readonly SetterPropertyHandler Instance = new SetterPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelFieldBase.Setter domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SetterDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AccessModifier GetValue(ModelFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.setterPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelFieldBase element, AccessModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AccessModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.setterPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsEdited domain property code
		
		/// <summary>
		/// IsEdited domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEditedDomainPropertyId = new global::System.Guid(0x521dfae9, 0x0f47, 0x4c24, 0x9e, 0x2f, 0x79, 0x02, 0x01, 0x9e, 0x6a, 0x12);
		
		/// <summary>
		/// Storage for IsEdited
		/// </summary>
		private global::System.Boolean isEditedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsEdited domain property.
		/// Description for AgileFx.AgileModeler.ModelFieldBase.Is Edited
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelFieldBase/IsEdited.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelFieldBase/IsEdited.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("521dfae9-0f47-4c24-9e2f-7902019e6a12")]
		public global::System.Boolean IsEdited
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEditedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEditedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelFieldBase.IsEdited domain property.
		/// </summary>
		internal sealed partial class IsEditedPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelFieldBase, global::System.Boolean>
		{
			private IsEditedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelFieldBase.IsEdited domain property value handler.
			/// </summary>
			public static readonly IsEditedPropertyHandler Instance = new IsEditedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelFieldBase.IsEdited domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEditedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isEditedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEditedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelType.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelType.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4468e5d5-db30-4ac0-9e9c-2d3b342c809f")]
	public abstract partial class ModelType : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4468e5d5, 0xdb30, 0x4ac0, 0x9e, 0x9c, 0x2d, 0x3b, 0x34, 0x2c, 0x80, 0x9f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::AgileFx.AgileModeler.ModelRootHasTypes.TypeDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::AgileFx.AgileModeler.ModelRootHasTypes.TypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass ClassModelElement
	/// Element with a Description
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassModelElement.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassModelElement.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("162c3685-b1dd-4e93-b20f-22ab0264c84c")]
	public abstract partial class ClassModelElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x162c3685, 0xb1dd, 0x4e93, 0xb2, 0x0f, 0x22, 0xab, 0x02, 0x64, 0xc8, 0x4c);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ClassModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x8133f562, 0x0dfe, 0x4965, 0x92, 0x16, 0xf2, 0xbf, 0xd0, 0x26, 0x6b, 0x64);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// This is a Description.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassModelElement/Description.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassModelElement/Description.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("8133f562-0dfe-4965-9216-f2bfd0266b64")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassModelElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassModelElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassModelElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassModelElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassModelElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassModelElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass NavigationProperty
	/// Description for AgileFx.AgileModeler.NavigationProperty
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NavigationProperty.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.NavigationProperty.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("af2f396d-c36d-4b8e-adf8-595b12ac9f9c")]
	public partial class NavigationProperty : ModelFieldBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NavigationProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaf2f396d, 0xc36d, 0x4b8e, 0xad, 0xf8, 0x59, 0x5b, 0x12, 0xac, 0x9f, 0x9c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NavigationProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public NavigationProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0x519b2b72, 0x00d6, 0x41db, 0xa5, 0xe3, 0xd9, 0x4e, 0xd8, 0xf3, 0xf2, 0x99);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private Multiplicity multiplicityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// Description for AgileFx.AgileModeler.NavigationProperty.Multiplicity
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NavigationProperty/Multiplicity.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.NavigationProperty/Multiplicity.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("519b2b72-00d6-41db-a5e3-d94ed8f3f299")]
		public Multiplicity Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<NavigationProperty, Multiplicity>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NavigationProperty element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Association domain property code
		
		/// <summary>
		/// Association domain property Id.
		/// </summary>
		public static readonly global::System.Guid AssociationDomainPropertyId = new global::System.Guid(0xb4a8f4f3, 0x3e3d, 0x4f4d, 0x9b, 0x3b, 0xf6, 0xf3, 0x86, 0xc8, 0x4e, 0x5f);
		
		/// <summary>
		/// Storage for Association
		/// </summary>
		private global::System.String associationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Association domain property.
		/// Description for AgileFx.AgileModeler.NavigationProperty.Association
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NavigationProperty/Association.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.NavigationProperty/Association.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b4a8f4f3-3e3d-4f4d-9b3b-f6f386c84e5f")]
		public global::System.String Association
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return associationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AssociationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.Association domain property.
		/// </summary>
		internal sealed partial class AssociationPropertyHandler : DslModeling::DomainPropertyValueHandler<NavigationProperty, global::System.String>
		{
			private AssociationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.Association domain property value handler.
			/// </summary>
			public static readonly AssociationPropertyHandler Instance = new AssociationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.Association domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AssociationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.associationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NavigationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.associationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x0ba32189, 0xc16f, 0x43f1, 0x91, 0xe1, 0xe5, 0xd3, 0x03, 0x83, 0x64, 0xe4);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for AgileFx.AgileModeler.NavigationProperty.Type
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NavigationProperty/Type.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.NavigationProperty/Type.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("0ba32189-c16f-43f1-91e1-e5d3038364e4")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<NavigationProperty, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NavigationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsForeignkey domain property code
		
		/// <summary>
		/// IsForeignkey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsForeignkeyDomainPropertyId = new global::System.Guid(0x87e94410, 0x8464, 0x479e, 0xbd, 0xa8, 0xad, 0x32, 0xac, 0xd6, 0x26, 0xf9);
		
		/// <summary>
		/// Storage for IsForeignkey
		/// </summary>
		private global::System.Boolean isForeignkeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsForeignkey domain property.
		/// Description for AgileFx.AgileModeler.NavigationProperty.Is Foreignkey
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NavigationProperty/IsForeignkey.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.NavigationProperty/IsForeignkey.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("87e94410-8464-479e-bda8-ad32acd626f9")]
		public global::System.Boolean IsForeignkey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isForeignkeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsForeignkeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.IsForeignkey domain property.
		/// </summary>
		internal sealed partial class IsForeignkeyPropertyHandler : DslModeling::DomainPropertyValueHandler<NavigationProperty, global::System.Boolean>
		{
			private IsForeignkeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.IsForeignkey domain property value handler.
			/// </summary>
			public static readonly IsForeignkeyPropertyHandler Instance = new IsForeignkeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.IsForeignkey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsForeignkeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isForeignkeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NavigationProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isForeignkeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ForeignkeyColumn domain property code
		
		/// <summary>
		/// ForeignkeyColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid ForeignkeyColumnDomainPropertyId = new global::System.Guid(0xd3ad967f, 0x7022, 0x43ee, 0xb4, 0x54, 0xc1, 0x60, 0xf3, 0x85, 0xaa, 0x3f);
		
		/// <summary>
		/// Storage for ForeignkeyColumn
		/// </summary>
		private global::System.String foreignkeyColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ForeignkeyColumn domain property.
		/// Description for AgileFx.AgileModeler.NavigationProperty.Foreignkey Column
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.NavigationProperty/ForeignkeyColumn.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.NavigationProperty/ForeignkeyColumn.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d3ad967f-7022-43ee-b454-c160f385aa3f")]
		public global::System.String ForeignkeyColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return foreignkeyColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ForeignkeyColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.ForeignkeyColumn domain property.
		/// </summary>
		internal sealed partial class ForeignkeyColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<NavigationProperty, global::System.String>
		{
			private ForeignkeyColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.ForeignkeyColumn domain property value handler.
			/// </summary>
			public static readonly ForeignkeyColumnPropertyHandler Instance = new ForeignkeyColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.ForeignkeyColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ForeignkeyColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.foreignkeyColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NavigationProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.foreignkeyColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// Description for
		/// AgileFx.AgileModeler.ClassHasNavigationProperties.NavigationProperty
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::AgileFx.AgileModeler.ClassHasNavigationProperties.NavigationPropertyDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::AgileFx.AgileModeler.ClassHasNavigationProperties.NavigationPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainClass ModelField
	/// Description for AgileFx.AgileModeler.ModelField
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e7b1b890-e658-4364-9bfc-30a5259550e3")]
	public partial class ModelField : ModelFieldBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7b1b890, 0xe658, 0x4364, 0x9b, 0xfc, 0x30, 0xa5, 0x25, 0x95, 0x50, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsPrimaryKey domain property code
		
		/// <summary>
		/// IsPrimaryKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryKeyDomainPropertyId = new global::System.Guid(0x03fa7acc, 0x038b, 0x49a1, 0xa7, 0x95, 0x4f, 0x0d, 0x04, 0x06, 0xf5, 0x76);
		
		/// <summary>
		/// Storage for IsPrimaryKey
		/// </summary>
		private global::System.Boolean isPrimaryKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryKey domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Is Primary Key
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/IsPrimaryKey.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/IsPrimaryKey.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("03fa7acc-038b-49a1-a795-4f0d0406f576")]
		public global::System.Boolean IsPrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.IsPrimaryKey domain property.
		/// </summary>
		internal sealed partial class IsPrimaryKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Boolean>
		{
			private IsPrimaryKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.IsPrimaryKey domain property value handler.
			/// </summary>
			public static readonly IsPrimaryKeyPropertyHandler Instance = new IsPrimaryKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.IsPrimaryKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPrimaryKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseColumnName domain property code
		
		/// <summary>
		/// DatabaseColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseColumnNameDomainPropertyId = new global::System.Guid(0x5375c3ea, 0xdb9c, 0x4864, 0xa5, 0x73, 0x93, 0xf3, 0xe0, 0xcb, 0xb3, 0x48);
		
		/// <summary>
		/// Storage for DatabaseColumnName
		/// </summary>
		private global::System.String databaseColumnNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DatabaseColumnName domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Database Column Name
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/DatabaseColumnName.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/DatabaseColumnName.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5375c3ea-db9c-4864-a573-93f3e0cbb348")]
		public global::System.String DatabaseColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.DatabaseColumnName domain property.
		/// </summary>
		internal sealed partial class DatabaseColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.String>
		{
			private DatabaseColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.DatabaseColumnName domain property value handler.
			/// </summary>
			public static readonly DatabaseColumnNamePropertyHandler Instance = new DatabaseColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.DatabaseColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseColumnNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultValue domain property code
		
		/// <summary>
		/// DefaultValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultValueDomainPropertyId = new global::System.Guid(0x21898c20, 0x33a4, 0x4f4d, 0x92, 0x5e, 0x00, 0x6b, 0x80, 0xc1, 0x06, 0x0b);
		
		/// <summary>
		/// Storage for DefaultValue
		/// </summary>
		private global::System.String defaultValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DefaultValue domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Default Value
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/DefaultValue.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/DefaultValue.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("21898c20-33a4-4f4d-925e-006b80c1060b")]
		public global::System.String DefaultValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.DefaultValue domain property.
		/// </summary>
		internal sealed partial class DefaultValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.String>
		{
			private DefaultValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.DefaultValue domain property value handler.
			/// </summary>
			public static readonly DefaultValuePropertyHandler Instance = new DefaultValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.DefaultValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0xd31f628c, 0xb7c1, 0x42a5, 0x88, 0x39, 0x17, 0xfc, 0x67, 0xf7, 0xeb, 0x01);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Nullable
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/Nullable.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/Nullable.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d31f628c-b7c1-42a5-8839-17fc67f7eb01")]
		public global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nullablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xcf92162f, 0x78a7, 0x41ec, 0xbb, 0x40, 0x92, 0xb8, 0xf9, 0xbf, 0x14, 0xd2);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private BuiltInTypes typePropertyStorage = BuiltInTypes.String;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Type
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/Type.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/Type.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(BuiltInTypes.String)]
		[DslModeling::DomainObjectId("cf92162f-78a7-41ec-bb40-92b8f9bf14d2")]
		public BuiltInTypes Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, BuiltInTypes>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed BuiltInTypes GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, BuiltInTypes newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				BuiltInTypes oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDbGenerated domain property code
		
		/// <summary>
		/// IsDbGenerated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDbGeneratedDomainPropertyId = new global::System.Guid(0x0d14dcc1, 0xa68a, 0x4069, 0xa0, 0xc2, 0xac, 0xc0, 0x8f, 0x45, 0xf0, 0x42);
		
		/// <summary>
		/// Storage for IsDbGenerated
		/// </summary>
		private global::System.Boolean isDbGeneratedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsDbGenerated domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Is Db Generated
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/IsDbGenerated.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/IsDbGenerated.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0d14dcc1-a68a-4069-a0c2-acc08f45f042")]
		public global::System.Boolean IsDbGenerated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDbGeneratedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDbGeneratedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.IsDbGenerated domain property.
		/// </summary>
		internal sealed partial class IsDbGeneratedPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Boolean>
		{
			private IsDbGeneratedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.IsDbGenerated domain property value handler.
			/// </summary>
			public static readonly IsDbGeneratedPropertyHandler Instance = new IsDbGeneratedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.IsDbGenerated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDbGeneratedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDbGeneratedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDbGeneratedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsFixedLength domain property code
		
		/// <summary>
		/// IsFixedLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsFixedLengthDomainPropertyId = new global::System.Guid(0x18e6e2e8, 0x2125, 0x4d63, 0x99, 0x0b, 0xc3, 0x35, 0xac, 0xde, 0x48, 0x0d);
		
		/// <summary>
		/// Storage for IsFixedLength
		/// </summary>
		private global::System.Boolean isFixedLengthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsFixedLength domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Is Fixed Length
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/IsFixedLength.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/IsFixedLength.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("18e6e2e8-2125-4d63-990b-c335acde480d")]
		public global::System.Boolean IsFixedLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isFixedLengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsFixedLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.IsFixedLength domain property.
		/// </summary>
		internal sealed partial class IsFixedLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Boolean>
		{
			private IsFixedLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.IsFixedLength domain property value handler.
			/// </summary>
			public static readonly IsFixedLengthPropertyHandler Instance = new IsFixedLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.IsFixedLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsFixedLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isFixedLengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isFixedLengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsUnicode domain property code
		
		/// <summary>
		/// IsUnicode domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUnicodeDomainPropertyId = new global::System.Guid(0xe3220c43, 0x1d6b, 0x44e9, 0xb0, 0x78, 0x9c, 0x0b, 0x9a, 0x6a, 0xfb, 0xcd);
		
		/// <summary>
		/// Storage for IsUnicode
		/// </summary>
		private global::System.Boolean isUnicodePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsUnicode domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Is Unicode
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/IsUnicode.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/IsUnicode.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("e3220c43-1d6b-44e9-b078-9c0b9a6afbcd")]
		public global::System.Boolean IsUnicode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUnicodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUnicodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.IsUnicode domain property.
		/// </summary>
		internal sealed partial class IsUnicodePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Boolean>
		{
			private IsUnicodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.IsUnicode domain property value handler.
			/// </summary>
			public static readonly IsUnicodePropertyHandler Instance = new IsUnicodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.IsUnicode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUnicodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isUnicodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUnicodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MaxLength domain property code
		
		/// <summary>
		/// MaxLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxLengthDomainPropertyId = new global::System.Guid(0x77ee6a48, 0xf01f, 0x4af0, 0x82, 0x75, 0x1e, 0x0f, 0x0c, 0xde, 0x37, 0x36);
		
		/// <summary>
		/// Storage for MaxLength
		/// </summary>
		private global::System.Int32 maxLengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of MaxLength domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Max Length
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/MaxLength.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/MaxLength.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("77ee6a48-f01f-4af0-8275-1e0f0cde3736")]
		public global::System.Int32 MaxLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxLengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.MaxLength domain property.
		/// </summary>
		internal sealed partial class MaxLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Int32>
		{
			private MaxLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.MaxLength domain property value handler.
			/// </summary>
			public static readonly MaxLengthPropertyHandler Instance = new MaxLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.MaxLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxLengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxLengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIdentity domain property code
		
		/// <summary>
		/// IsIdentity domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIdentityDomainPropertyId = new global::System.Guid(0x5a4af3c0, 0x7987, 0x456e, 0xaf, 0x87, 0xbd, 0xe4, 0x6d, 0xc7, 0x2c, 0x1a);
		
		/// <summary>
		/// Storage for IsIdentity
		/// </summary>
		private global::System.Boolean isIdentityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIdentity domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Is Identity
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/IsIdentity.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/IsIdentity.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5a4af3c0-7987-456e-af87-bde46dc72c1a")]
		public global::System.Boolean IsIdentity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIdentityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIdentityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.IsIdentity domain property.
		/// </summary>
		internal sealed partial class IsIdentityPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Boolean>
		{
			private IsIdentityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.IsIdentity domain property value handler.
			/// </summary>
			public static readonly IsIdentityPropertyHandler Instance = new IsIdentityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.IsIdentity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIdentityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIdentityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIdentityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsUnique domain property code
		
		/// <summary>
		/// IsUnique domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUniqueDomainPropertyId = new global::System.Guid(0xd445c7e0, 0x1764, 0x4e64, 0xad, 0xd4, 0xaa, 0x3b, 0xaa, 0x2c, 0xc5, 0x39);
		
		/// <summary>
		/// Storage for IsUnique
		/// </summary>
		private global::System.Boolean isUniquePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsUnique domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Is Unique
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/IsUnique.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/IsUnique.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d445c7e0-1764-4e64-add4-aa3baa2cc539")]
		public global::System.Boolean IsUnique
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUniquePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUniquePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.IsUnique domain property.
		/// </summary>
		internal sealed partial class IsUniquePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, global::System.Boolean>
		{
			private IsUniquePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.IsUnique domain property value handler.
			/// </summary>
			public static readonly IsUniquePropertyHandler Instance = new IsUniquePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.IsUnique domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUniqueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isUniquePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUniquePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UpdateCheck domain property code
		
		/// <summary>
		/// UpdateCheck domain property Id.
		/// </summary>
		public static readonly global::System.Guid UpdateCheckDomainPropertyId = new global::System.Guid(0x5bea24c6, 0x34bc, 0x4ef1, 0x97, 0x9e, 0x88, 0x8b, 0x74, 0xb1, 0x4b, 0x23);
		
		/// <summary>
		/// Storage for UpdateCheck
		/// </summary>
		private ConcurrencyCheckFrequency updateCheckPropertyStorage = ConcurrencyCheckFrequency.Always;
		
		/// <summary>
		/// Gets or sets the value of UpdateCheck domain property.
		/// Description for AgileFx.AgileModeler.ModelField.Update Check
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelField/UpdateCheck.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelField/UpdateCheck.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ConcurrencyCheckFrequency.Always)]
		[DslModeling::DomainObjectId("5bea24c6-34bc-4ef1-979e-888b74b14b23")]
		public ConcurrencyCheckFrequency UpdateCheck
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return updateCheckPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UpdateCheckPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelField.UpdateCheck domain property.
		/// </summary>
		internal sealed partial class UpdateCheckPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelField, ConcurrencyCheckFrequency>
		{
			private UpdateCheckPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelField.UpdateCheck domain property value handler.
			/// </summary>
			public static readonly UpdateCheckPropertyHandler Instance = new UpdateCheckPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelField.UpdateCheck domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UpdateCheckDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConcurrencyCheckFrequency GetValue(ModelField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.updateCheckPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelField element, ConcurrencyCheckFrequency newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConcurrencyCheckFrequency oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.updateCheckPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// Description for AgileFx.AgileModeler.ClassHasFields.ModelField
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::AgileFx.AgileModeler.ClassHasFields.ModelFieldDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::AgileFx.AgileModeler.ClassHasFields.ModelFieldDomainRoleId, value);
			}
		}
		#endregion
	}
}
