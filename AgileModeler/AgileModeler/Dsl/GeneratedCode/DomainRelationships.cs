//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainRelationship Association
	/// Associations between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("617ad4d6-9c6d-4b78-a982-0f514754891c")]
	public partial class Association : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Association domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x617ad4d6, 0x9c6d, 0x4b78, 0xa9, 0x82, 0x0f, 0x51, 0x47, 0x54, 0x89, 0x1c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Association link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Association(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Association.SourceDomainRoleId, source), new DslModeling::RoleAssignment(Association.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Association(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Association(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Association(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Association(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xa6488cc7, 0x8eae, 0x4373, 0x98, 0x97, 0x99, 0x28, 0x8f, 0x9e, 0x50, 0x6c);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/Source.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/Source.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="AgileFx.AgileModeler.Association/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a6488cc7-8eae-4373-9897-99288f9e506c")]
		public virtual ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a ModelClass
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetSources(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x9e237f24, 0x7f7f, 0x4b76, 0xb4, 0x9c, 0x41, 0x61, 0xa7, 0x5f, 0x1a, 0x64);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/Target.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/Target.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="AgileFx.AgileModeler.Association/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9e237f24-7f7f-4b76-b49c-4161a75f1a64")]
		public virtual ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a ModelClass
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetTargets(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, SourceDomainRoleId);
		}
		#endregion
		#region End1Multiplicity domain property code
		
		/// <summary>
		/// End1Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1MultiplicityDomainPropertyId = new global::System.Guid(0x6ce1cc03, 0x5152, 0x4077, 0x81, 0x74, 0x07, 0xc2, 0x0a, 0xfd, 0xb8, 0xd6);
		
		/// <summary>
		/// Storage for End1Multiplicity
		/// </summary>
		private Multiplicity end1MultiplicityPropertyStorage = Multiplicity.One;
		
		/// <summary>
		/// Gets or sets the value of End1Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End1Multiplicity.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End1Multiplicity.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End1Multiplicity.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.One)]
		[DslModeling::DomainObjectId("6ce1cc03-5152-4077-8174-07c20afdb8d6")]
		public Multiplicity End1Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end1MultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End1MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End1Multiplicity domain property.
		/// </summary>
		internal sealed partial class End1MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private End1MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End1Multiplicity domain property value handler.
			/// </summary>
			public static readonly End1MultiplicityPropertyHandler Instance = new End1MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End1Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end1MultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end1MultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End1RoleName domain property code
		
		/// <summary>
		/// End1RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1RoleNameDomainPropertyId = new global::System.Guid(0x583c0091, 0x7733, 0x4c22, 0xaa, 0x95, 0xe4, 0xa7, 0xac, 0xea, 0x91, 0x4a);
		
		/// <summary>
		/// Storage for End1RoleName
		/// </summary>
		private global::System.String end1RoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End1RoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End1RoleName.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End1RoleName.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End1RoleName.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("583c0091-7733-4c22-aa95-e4a7acea914a")]
		public global::System.String End1RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end1RoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End1RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End1RoleName domain property.
		/// </summary>
		internal sealed partial class End1RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End1RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End1RoleName domain property value handler.
			/// </summary>
			public static readonly End1RoleNamePropertyHandler Instance = new End1RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End1RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end1RoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end1RoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End2Multiplicity domain property code
		
		/// <summary>
		/// End2Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2MultiplicityDomainPropertyId = new global::System.Guid(0xef7f0bb1, 0x58bf, 0x4fdc, 0x90, 0x97, 0xf7, 0xf4, 0xb9, 0xb8, 0x71, 0xd3);
		
		/// <summary>
		/// Storage for End2Multiplicity
		/// </summary>
		private Multiplicity end2MultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of End2Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End2Multiplicity.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End2Multiplicity.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End2Multiplicity.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ef7f0bb1-58bf-4fdc-9097-f7f4b9b871d3")]
		public Multiplicity End2Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end2MultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End2MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End2Multiplicity domain property.
		/// </summary>
		internal sealed partial class End2MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private End2MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End2Multiplicity domain property value handler.
			/// </summary>
			public static readonly End2MultiplicityPropertyHandler Instance = new End2MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End2Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end2MultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end2MultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End2RoleName domain property code
		
		/// <summary>
		/// End2RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2RoleNameDomainPropertyId = new global::System.Guid(0x4f4aad05, 0x856b, 0x4fa6, 0xa1, 0xb8, 0x1c, 0x86, 0xa9, 0xfb, 0xe3, 0x06);
		
		/// <summary>
		/// Storage for End2RoleName
		/// </summary>
		private global::System.String end2RoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End2RoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End2RoleName.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End2RoleName.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End2RoleName.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("4f4aad05-856b-4fa6-a1b8-1c86a9fbe306")]
		public global::System.String End2RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end2RoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End2RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End2RoleName domain property.
		/// </summary>
		internal sealed partial class End2RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End2RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End2RoleName domain property value handler.
			/// </summary>
			public static readonly End2RoleNamePropertyHandler Instance = new End2RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End2RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end2RoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end2RoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End1NavigationProperty domain property code
		
		/// <summary>
		/// End1NavigationProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1NavigationPropertyDomainPropertyId = new global::System.Guid(0x99bee160, 0x951d, 0x4f80, 0x9d, 0x86, 0xc9, 0x2a, 0xb8, 0x23, 0x63, 0x43);
		
		/// <summary>
		/// Storage for End1NavigationProperty
		/// </summary>
		private global::System.String end1NavigationPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End1NavigationProperty domain property.
		/// Description for AgileFx.AgileModeler.Association.End1 Navigation Property
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End1NavigationProperty.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End1NavigationProperty.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End1NavigationProperty.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("99bee160-951d-4f80-9d86-c92ab8236343")]
		public global::System.String End1NavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end1NavigationPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End1NavigationPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End1NavigationProperty domain property.
		/// </summary>
		internal sealed partial class End1NavigationPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End1NavigationPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End1NavigationProperty domain property value handler.
			/// </summary>
			public static readonly End1NavigationPropertyPropertyHandler Instance = new End1NavigationPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End1NavigationProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1NavigationPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end1NavigationPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end1NavigationPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End2NavigationProperty domain property code
		
		/// <summary>
		/// End2NavigationProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2NavigationPropertyDomainPropertyId = new global::System.Guid(0x18567a08, 0xd1aa, 0x4f01, 0x9c, 0xe6, 0xbb, 0xd2, 0x47, 0xb7, 0x3d, 0xd1);
		
		/// <summary>
		/// Storage for End2NavigationProperty
		/// </summary>
		private global::System.String end2NavigationPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End2NavigationProperty domain property.
		/// Description for AgileFx.AgileModeler.Association.End2 Navigation Property
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End2NavigationProperty.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End2NavigationProperty.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End2NavigationProperty.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("18567a08-d1aa-4f01-9ce6-bbd247b73dd1")]
		public global::System.String End2NavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end2NavigationPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End2NavigationPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End2NavigationProperty domain property.
		/// </summary>
		internal sealed partial class End2NavigationPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End2NavigationPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End2NavigationProperty domain property value handler.
			/// </summary>
			public static readonly End2NavigationPropertyPropertyHandler Instance = new End2NavigationPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End2NavigationProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2NavigationPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end2NavigationPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end2NavigationPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x81ffb129, 0xb8d3, 0x4f28, 0x8c, 0xc8, 0x6d, 0x65, 0x7d, 0x63, 0xc1, 0xdf);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for AgileFx.AgileModeler.Association.Name
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/Name.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/Name.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("81ffb129-b8d3-4f28-8cc8-6d657d63c1df")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ManyToManyMappingTable domain property code
		
		/// <summary>
		/// ManyToManyMappingTable domain property Id.
		/// </summary>
		public static readonly global::System.Guid ManyToManyMappingTableDomainPropertyId = new global::System.Guid(0x31007fe1, 0xfd24, 0x4064, 0x9e, 0x30, 0xc7, 0xc2, 0xe9, 0xcb, 0xc3, 0xaa);
		
		/// <summary>
		/// Storage for ManyToManyMappingTable
		/// </summary>
		private global::System.String manyToManyMappingTablePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ManyToManyMappingTable domain property.
		/// Description for AgileFx.AgileModeler.Association.Many To Many Mapping Table
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/ManyToManyMappingTable.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/ManyToManyMappingTable.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/ManyToManyMappingTable.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("31007fe1-fd24-4064-9e30-c7c2e9cbc3aa")]
		public global::System.String ManyToManyMappingTable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return manyToManyMappingTablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ManyToManyMappingTablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.ManyToManyMappingTable domain property.
		/// </summary>
		internal sealed partial class ManyToManyMappingTablePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private ManyToManyMappingTablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.ManyToManyMappingTable domain property value handler.
			/// </summary>
			public static readonly ManyToManyMappingTablePropertyHandler Instance = new ManyToManyMappingTablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.ManyToManyMappingTable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ManyToManyMappingTableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.manyToManyMappingTablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.manyToManyMappingTablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End1ManyToManyMappingColumn domain property code
		
		/// <summary>
		/// End1ManyToManyMappingColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1ManyToManyMappingColumnDomainPropertyId = new global::System.Guid(0xcbb2ef24, 0x8b94, 0x4f36, 0xb6, 0xe7, 0x99, 0xfc, 0x52, 0x4c, 0xd5, 0xd8);
		
		/// <summary>
		/// Storage for End1ManyToManyMappingColumn
		/// </summary>
		private global::System.String end1ManyToManyMappingColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End1ManyToManyMappingColumn domain property.
		/// Description for AgileFx.AgileModeler.Association.End1 Many To Many Mapping
		/// Column
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End1ManyToManyMappingColumn.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End1ManyToManyMappingColumn.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End1ManyToManyMappingColumn.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cbb2ef24-8b94-4f36-b6e7-99fc524cd5d8")]
		public global::System.String End1ManyToManyMappingColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end1ManyToManyMappingColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End1ManyToManyMappingColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End1ManyToManyMappingColumn domain property.
		/// </summary>
		internal sealed partial class End1ManyToManyMappingColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End1ManyToManyMappingColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End1ManyToManyMappingColumn domain property value handler.
			/// </summary>
			public static readonly End1ManyToManyMappingColumnPropertyHandler Instance = new End1ManyToManyMappingColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End1ManyToManyMappingColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1ManyToManyMappingColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end1ManyToManyMappingColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end1ManyToManyMappingColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End2ManyToManyMappingColumn domain property code
		
		/// <summary>
		/// End2ManyToManyMappingColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2ManyToManyMappingColumnDomainPropertyId = new global::System.Guid(0xc724fdad, 0x3210, 0x43f7, 0xa9, 0x03, 0x93, 0xa8, 0x89, 0x52, 0x5c, 0x7b);
		
		/// <summary>
		/// Storage for End2ManyToManyMappingColumn
		/// </summary>
		private global::System.String end2ManyToManyMappingColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End2ManyToManyMappingColumn domain property.
		/// Description for AgileFx.AgileModeler.Association.End2 Many To Many Mapping
		/// Column
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End2ManyToManyMappingColumn.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End2ManyToManyMappingColumn.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End2ManyToManyMappingColumn.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c724fdad-3210-43f7-a903-93a889525c7b")]
		public global::System.String End2ManyToManyMappingColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end2ManyToManyMappingColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End2ManyToManyMappingColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End2ManyToManyMappingColumn domain property.
		/// </summary>
		internal sealed partial class End2ManyToManyMappingColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End2ManyToManyMappingColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End2ManyToManyMappingColumn domain property value handler.
			/// </summary>
			public static readonly End2ManyToManyMappingColumnPropertyHandler Instance = new End2ManyToManyMappingColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End2ManyToManyMappingColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2ManyToManyMappingColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end2ManyToManyMappingColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end2ManyToManyMappingColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End1MultiplicityDisplay domain property code
		
		/// <summary>
		/// End1MultiplicityDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1MultiplicityDisplayDomainPropertyId = new global::System.Guid(0x065954aa, 0x03f6, 0x471a, 0x92, 0x17, 0x35, 0xcc, 0x38, 0x18, 0x91, 0x0d);
		
		/// <summary>
		/// Gets or sets the value of End1MultiplicityDisplay domain property.
		/// Description for AgileFx.AgileModeler.Association.End1 Multiplicity Display
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End1MultiplicityDisplay.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End1MultiplicityDisplay.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("065954aa-03f6-471a-9217-35cc3818910d")]
		public global::System.String End1MultiplicityDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return End1MultiplicityDisplayPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Association.End1MultiplicityDisplay domain property.
		/// </summary>
		internal sealed partial class End1MultiplicityDisplayPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Association, global::System.String>
		{
			private End1MultiplicityDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End1MultiplicityDisplay domain property value handler.
			/// </summary>
			public static readonly End1MultiplicityDisplayPropertyHandler Instance = new End1MultiplicityDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End1MultiplicityDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1MultiplicityDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for End1MultiplicityDisplay because its Kind is
				// set to Calculated. Please provide the GetEnd1MultiplicityDisplayValue()
				// method on the domain class.
				return element.GetEnd1MultiplicityDisplayValue();
			}
		
		}
		
		#endregion
		#region End2MultiplicityDisplay domain property code
		
		/// <summary>
		/// End2MultiplicityDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2MultiplicityDisplayDomainPropertyId = new global::System.Guid(0x7ccaabfb, 0xddfe, 0x40b4, 0x9b, 0xb5, 0x98, 0x5f, 0x89, 0xb2, 0x7b, 0xbb);
		
		/// <summary>
		/// Gets or sets the value of End2MultiplicityDisplay domain property.
		/// Description for AgileFx.AgileModeler.Association.End2 Multiplicity Display
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End2MultiplicityDisplay.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End2MultiplicityDisplay.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("7ccaabfb-ddfe-40b4-9bb5-985f89b27bbb")]
		public global::System.String End2MultiplicityDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return End2MultiplicityDisplayPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Association.End2MultiplicityDisplay domain property.
		/// </summary>
		internal sealed partial class End2MultiplicityDisplayPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Association, global::System.String>
		{
			private End2MultiplicityDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End2MultiplicityDisplay domain property value handler.
			/// </summary>
			public static readonly End2MultiplicityDisplayPropertyHandler Instance = new End2MultiplicityDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End2MultiplicityDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2MultiplicityDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for End2MultiplicityDisplay because its Kind is
				// set to Calculated. Please provide the GetEnd2MultiplicityDisplayValue()
				// method on the domain class.
				return element.GetEnd2MultiplicityDisplayValue();
			}
		
		}
		
		#endregion
		#region IsEdited domain property code
		
		/// <summary>
		/// IsEdited domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEditedDomainPropertyId = new global::System.Guid(0x009a5c71, 0x2903, 0x4dd7, 0xa2, 0x77, 0x6a, 0x7d, 0x7f, 0x08, 0x7d, 0x55);
		
		/// <summary>
		/// Storage for IsEdited
		/// </summary>
		private global::System.Boolean isEditedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsEdited domain property.
		/// Description for AgileFx.AgileModeler.Association.Is Edited
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/IsEdited.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/IsEdited.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("009a5c71-2903-4dd7-a277-6a7d7f087d55")]
		public global::System.Boolean IsEdited
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEditedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEditedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.IsEdited domain property.
		/// </summary>
		internal sealed partial class IsEditedPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.Boolean>
		{
			private IsEditedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.IsEdited domain property value handler.
			/// </summary>
			public static readonly IsEditedPropertyHandler Instance = new IsEditedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.IsEdited domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEditedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isEditedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEditedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End1ManyToManyNavigationProperty domain property code
		
		/// <summary>
		/// End1ManyToManyNavigationProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1ManyToManyNavigationPropertyDomainPropertyId = new global::System.Guid(0x3501ae43, 0x6bbc, 0x4c42, 0xad, 0xbd, 0xc0, 0xc0, 0xe5, 0x57, 0xad, 0xf2);
		
		/// <summary>
		/// Storage for End1ManyToManyNavigationProperty
		/// </summary>
		private global::System.String end1ManyToManyNavigationPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End1ManyToManyNavigationProperty domain property.
		/// Description for AgileFx.AgileModeler.Association.End1 Many To Many Navigation
		/// Property
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End1ManyToManyNavigationProperty.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End1ManyToManyNavigationProperty.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End1ManyToManyNavigationProperty.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3501ae43-6bbc-4c42-adbd-c0c0e557adf2")]
		public global::System.String End1ManyToManyNavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end1ManyToManyNavigationPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End1ManyToManyNavigationPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End1ManyToManyNavigationProperty domain property.
		/// </summary>
		internal sealed partial class End1ManyToManyNavigationPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End1ManyToManyNavigationPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End1ManyToManyNavigationProperty domain property value handler.
			/// </summary>
			public static readonly End1ManyToManyNavigationPropertyPropertyHandler Instance = new End1ManyToManyNavigationPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End1ManyToManyNavigationProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1ManyToManyNavigationPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end1ManyToManyNavigationPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end1ManyToManyNavigationPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End2ManyToManyNavigationProperty domain property code
		
		/// <summary>
		/// End2ManyToManyNavigationProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2ManyToManyNavigationPropertyDomainPropertyId = new global::System.Guid(0xb6bbb146, 0x07ff, 0x49d0, 0x85, 0x1a, 0xe9, 0x50, 0x6d, 0x54, 0xa8, 0xf6);
		
		/// <summary>
		/// Storage for End2ManyToManyNavigationProperty
		/// </summary>
		private global::System.String end2ManyToManyNavigationPropertyPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End2ManyToManyNavigationProperty domain property.
		/// Description for AgileFx.AgileModeler.Association.End2 Many To Many Navigation
		/// Property
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End2ManyToManyNavigationProperty.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End2ManyToManyNavigationProperty.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End2ManyToManyNavigationProperty.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b6bbb146-07ff-49d0-851a-e9506d54a8f6")]
		public global::System.String End2ManyToManyNavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end2ManyToManyNavigationPropertyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End2ManyToManyNavigationPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End2ManyToManyNavigationProperty domain property.
		/// </summary>
		internal sealed partial class End2ManyToManyNavigationPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End2ManyToManyNavigationPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End2ManyToManyNavigationProperty domain property value handler.
			/// </summary>
			public static readonly End2ManyToManyNavigationPropertyPropertyHandler Instance = new End2ManyToManyNavigationPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End2ManyToManyNavigationProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2ManyToManyNavigationPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end2ManyToManyNavigationPropertyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end2ManyToManyNavigationPropertyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End1ManyToManyFieldName domain property code
		
		/// <summary>
		/// End1ManyToManyFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1ManyToManyFieldNameDomainPropertyId = new global::System.Guid(0xf5d000e0, 0xe321, 0x49f1, 0x80, 0x1d, 0xa5, 0x25, 0x6d, 0x1c, 0x82, 0xb2);
		
		/// <summary>
		/// Storage for End1ManyToManyFieldName
		/// </summary>
		private global::System.String end1ManyToManyFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End1ManyToManyFieldName domain property.
		/// Description for AgileFx.AgileModeler.Association.End1 Many To Many Field Name
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End1ManyToManyFieldName.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End1ManyToManyFieldName.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End1ManyToManyFieldName.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f5d000e0-e321-49f1-801d-a5256d1c82b2")]
		public global::System.String End1ManyToManyFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end1ManyToManyFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End1ManyToManyFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End1ManyToManyFieldName domain property.
		/// </summary>
		internal sealed partial class End1ManyToManyFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End1ManyToManyFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End1ManyToManyFieldName domain property value handler.
			/// </summary>
			public static readonly End1ManyToManyFieldNamePropertyHandler Instance = new End1ManyToManyFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End1ManyToManyFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1ManyToManyFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end1ManyToManyFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end1ManyToManyFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End2ManyToManyFieldName domain property code
		
		/// <summary>
		/// End2ManyToManyFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2ManyToManyFieldNameDomainPropertyId = new global::System.Guid(0x350cf9b8, 0x82da, 0x4b2f, 0x8e, 0x86, 0x94, 0xc8, 0x00, 0xe8, 0x84, 0x8f);
		
		/// <summary>
		/// Storage for End2ManyToManyFieldName
		/// </summary>
		private global::System.String end2ManyToManyFieldNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of End2ManyToManyFieldName domain property.
		/// Description for AgileFx.AgileModeler.Association.End2 Many To Many Field Name
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Association/End2ManyToManyFieldName.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("AgileFx.AgileModeler.Association/End2ManyToManyFieldName.Category", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Association/End2ManyToManyFieldName.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("350cf9b8-82da-4b2f-8e86-94c800e8848f")]
		public global::System.String End2ManyToManyFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end2ManyToManyFieldNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End2ManyToManyFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.End2ManyToManyFieldName domain property.
		/// </summary>
		internal sealed partial class End2ManyToManyFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private End2ManyToManyFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.End2ManyToManyFieldName domain property value handler.
			/// </summary>
			public static readonly End2ManyToManyFieldNamePropertyHandler Instance = new End2ManyToManyFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.End2ManyToManyFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2ManyToManyFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end2ManyToManyFieldNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end2ManyToManyFieldNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.Association> GetLinksToTargets ( global::AgileFx.AgileModeler.ModelClass sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.Association>(sourceInstance, global::AgileFx.AgileModeler.Association.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.Association> GetLinksToSources ( global::AgileFx.AgileModeler.ModelClass targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.Association>(targetInstance, global::AgileFx.AgileModeler.Association.TargetDomainRoleId);
		}
		#endregion
		#region Association instance accessors
		
		/// <summary>
		/// Get any Association links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.Association> GetLinks( global::AgileFx.AgileModeler.ModelClass source, global::AgileFx.AgileModeler.ModelClass target )
		{
			global::System.Collections.Generic.List<global::AgileFx.AgileModeler.Association> outLinks = new global::System.Collections.Generic.List<global::AgileFx.AgileModeler.Association>();
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.Association> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.Association>(source, global::AgileFx.AgileModeler.Association.SourceDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.Association link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainRelationship Inheritance
	/// Inheritance between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Inheritance.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.Inheritance.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("15ca8a10-fff6-4d43-a147-fdbdb9b12649")]
	public partial class Inheritance : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Inheritance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15ca8a10, 0xfff6, 0x4d43, 0xa1, 0x47, 0xfd, 0xbd, 0xb9, 0xb1, 0x26, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Inheritance link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Inheritance(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Inheritance.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Inheritance.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Inheritance(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Inheritance(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Inheritance(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Inheritance(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0x2297342a, 0x9cb8, 0x45cb, 0xab, 0x4a, 0x7d, 0x4b, 0xa4, 0x7f, 0x1a, 0xfc);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Inheritance/Superclass.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Inheritance/Superclass.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="AgileFx.AgileModeler.Inheritance/Superclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2297342a-9cb8-45cb-ab4a-7d4ba47f1afc")]
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Baseclass of a ModelClass
		/// <summary>
		/// Gets Baseclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetBaseclass(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets Baseclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetBaseclass(ModelClass element, ModelClass newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0x5919e774, 0x7010, 0x40ae, 0xa1, 0x58, 0x7c, 0x8e, 0xc9, 0x7f, 0xc9, 0xf7);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Inheritance/Subclass.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Inheritance/Subclass.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Baseclass", PropertyDisplayNameKey="AgileFx.AgileModeler.Inheritance/Subclass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5919e774-7010-40ae-a158-7c8ec97fc9f7")]
		public virtual ModelClass Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a ModelClass
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetSubclasses(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Discriminator domain property code
		
		/// <summary>
		/// Discriminator domain property Id.
		/// </summary>
		public static readonly global::System.Guid DiscriminatorDomainPropertyId = new global::System.Guid(0xffc72a21, 0x4822, 0x42c3, 0x9e, 0xf6, 0xc7, 0x7d, 0x9d, 0x29, 0x85, 0x4c);
		
		/// <summary>
		/// Storage for Discriminator
		/// </summary>
		private global::System.String discriminatorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Discriminator domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Inheritance/Discriminator.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Inheritance/Discriminator.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("ffc72a21-4822-42c3-9ef6-c77d9d29854c")]
		public global::System.String Discriminator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return discriminatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DiscriminatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Inheritance.Discriminator domain property.
		/// </summary>
		internal sealed partial class DiscriminatorPropertyHandler : DslModeling::DomainPropertyValueHandler<Inheritance, global::System.String>
		{
			private DiscriminatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Inheritance.Discriminator domain property value handler.
			/// </summary>
			public static readonly DiscriminatorPropertyHandler Instance = new DiscriminatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Inheritance.Discriminator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DiscriminatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Inheritance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.discriminatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Inheritance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.discriminatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DerivedClassPrimaryKeyColumn domain property code
		
		/// <summary>
		/// DerivedClassPrimaryKeyColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivedClassPrimaryKeyColumnDomainPropertyId = new global::System.Guid(0x767eec2d, 0x6f10, 0x4a7d, 0xa9, 0x78, 0x25, 0xa1, 0x9a, 0xd5, 0x07, 0xa5);
		
		/// <summary>
		/// Storage for DerivedClassPrimaryKeyColumn
		/// </summary>
		private global::System.String derivedClassPrimaryKeyColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DerivedClassPrimaryKeyColumn domain property.
		/// Description for AgileFx.AgileModeler.Inheritance.Derived Class Primary Key
		/// Column
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Inheritance/DerivedClassPrimaryKeyColumn.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Inheritance/DerivedClassPrimaryKeyColumn.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("767eec2d-6f10-4a7d-a978-25a19ad507a5")]
		public global::System.String DerivedClassPrimaryKeyColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return derivedClassPrimaryKeyColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DerivedClassPrimaryKeyColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Inheritance.DerivedClassPrimaryKeyColumn domain property.
		/// </summary>
		internal sealed partial class DerivedClassPrimaryKeyColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<Inheritance, global::System.String>
		{
			private DerivedClassPrimaryKeyColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Inheritance.DerivedClassPrimaryKeyColumn domain property value handler.
			/// </summary>
			public static readonly DerivedClassPrimaryKeyColumnPropertyHandler Instance = new DerivedClassPrimaryKeyColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Inheritance.DerivedClassPrimaryKeyColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivedClassPrimaryKeyColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Inheritance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.derivedClassPrimaryKeyColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Inheritance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.derivedClassPrimaryKeyColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BaseClassPrimaryKeyColumn domain property code
		
		/// <summary>
		/// BaseClassPrimaryKeyColumn domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseClassPrimaryKeyColumnDomainPropertyId = new global::System.Guid(0x48adf7ba, 0xe5ec, 0x40ad, 0x97, 0x7d, 0x6f, 0x18, 0x3a, 0x9a, 0x41, 0x21);
		
		/// <summary>
		/// Storage for BaseClassPrimaryKeyColumn
		/// </summary>
		private global::System.String baseClassPrimaryKeyColumnPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseClassPrimaryKeyColumn domain property.
		/// Description for AgileFx.AgileModeler.Inheritance.Base Class Primary Key Column
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.Inheritance/BaseClassPrimaryKeyColumn.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.Inheritance/BaseClassPrimaryKeyColumn.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("48adf7ba-e5ec-40ad-977d-6f183a9a4121")]
		public global::System.String BaseClassPrimaryKeyColumn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return baseClassPrimaryKeyColumnPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BaseClassPrimaryKeyColumnPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Inheritance.BaseClassPrimaryKeyColumn domain property.
		/// </summary>
		internal sealed partial class BaseClassPrimaryKeyColumnPropertyHandler : DslModeling::DomainPropertyValueHandler<Inheritance, global::System.String>
		{
			private BaseClassPrimaryKeyColumnPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Inheritance.BaseClassPrimaryKeyColumn domain property value handler.
			/// </summary>
			public static readonly BaseClassPrimaryKeyColumnPropertyHandler Instance = new BaseClassPrimaryKeyColumnPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Inheritance.BaseClassPrimaryKeyColumn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseClassPrimaryKeyColumnDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Inheritance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.baseClassPrimaryKeyColumnPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Inheritance element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.baseClassPrimaryKeyColumnPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Inheritance links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.Inheritance> GetLinksToSubclasses ( global::AgileFx.AgileModeler.ModelClass superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.Inheritance>(superclassInstance, global::AgileFx.AgileModeler.Inheritance.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Inheritance link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.Inheritance GetLinkToBaseclass (global::AgileFx.AgileModeler.ModelClass subclassInstance)
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.Inheritance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.Inheritance>(subclassInstance, global::AgileFx.AgileModeler.Inheritance.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Inheritance instance accessors
		
		/// <summary>
		/// Get any Inheritance links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.Inheritance> GetLinks( global::AgileFx.AgileModeler.ModelClass source, global::AgileFx.AgileModeler.ModelClass target )
		{
			global::System.Collections.Generic.List<global::AgileFx.AgileModeler.Inheritance> outLinks = new global::System.Collections.Generic.List<global::AgileFx.AgileModeler.Inheritance>();
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.Inheritance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.Inheritance>(source, global::AgileFx.AgileModeler.Inheritance.SuperclassDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.Inheritance link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Inheritance link between a given ModelClassand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.Inheritance GetLink( global::AgileFx.AgileModeler.ModelClass source, global::AgileFx.AgileModeler.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.Inheritance> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.Inheritance>(source, global::AgileFx.AgileModeler.Inheritance.SuperclassDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.Inheritance link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelRootHasTypes.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelRootHasTypes.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2dd2b409-d601-4e22-9b4c-231bd6a8b71c")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2dd2b409, 0xd601, 0x4e22, 0x9b, 0x4c, 0x23, 0x1b, 0xd6, 0xa8, 0xb7, 0x1c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0xdb59a534, 0x0484, 0x4ec8, 0xb8, 0x33, 0x72, 0xa4, 0xc9, 0xf8, 0xb4, 0x3b);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelRootHasTypes/ModelRoot.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="AgileFx.AgileModeler.ModelRootHasTypes/ModelRoot.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("db59a534-0484-4ec8-b833-72a4c9f8b43b")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x0fef9cb5, 0xb9be, 0x4011, 0x8d, 0x18, 0xbe, 0xe8, 0x8c, 0x7a, 0xa3, 0x16);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ModelRootHasTypes/Type.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ModelRootHasTypes/Type.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0fef9cb5-b9be-4011-8d18-bee88c7aa316")]
		public virtual ModelType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelType>, ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.ModelRootHasTypes> GetLinksToTypes ( global::AgileFx.AgileModeler.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ModelRootHasTypes>(modelRootInstance, global::AgileFx.AgileModeler.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.ModelRootHasTypes GetLinkToModelRoot (global::AgileFx.AgileModeler.ModelType typeInstance)
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ModelRootHasTypes>(typeInstance, global::AgileFx.AgileModeler.ModelRootHasTypes.TypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Type not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.ModelRootHasTypes> GetLinks( global::AgileFx.AgileModeler.ModelRoot source, global::AgileFx.AgileModeler.ModelType target )
		{
			global::System.Collections.Generic.List<global::AgileFx.AgileModeler.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::AgileFx.AgileModeler.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ModelRootHasTypes>(source, global::AgileFx.AgileModeler.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.ModelRootHasTypes GetLink( global::AgileFx.AgileModeler.ModelRoot source, global::AgileFx.AgileModeler.ModelType target )
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ModelRootHasTypes>(source, global::AgileFx.AgileModeler.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainRelationship ClassHasFields
	/// Description for AgileFx.AgileModeler.ClassHasFields
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassHasFields.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassHasFields.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b0ae575c-cabf-4817-94de-fd17f918fdb7")]
	public partial class ClassHasFields : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasFields domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb0ae575c, 0xcabf, 0x4817, 0x94, 0xde, 0xfd, 0x17, 0xf9, 0x18, 0xfd, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasFields link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelField to use as the target of the relationship.</param>
		public ClassHasFields(ModelClass source, ModelField target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasFields.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasFields.ModelFieldDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFields(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFields(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasFields(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasFields(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0xa74903da, 0x4150, 0x4018, 0xa3, 0xa5, 0x64, 0x98, 0x74, 0x24, 0x63, 0x9b);
		
		/// <summary>
		/// DomainRole ModelClass
		/// Description for AgileFx.AgileModeler.ClassHasFields.ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassHasFields/ModelClass.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassHasFields/ModelClass.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Fields", PropertyDisplayNameKey="AgileFx.AgileModeler.ClassHasFields/ModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a74903da-4150-4018-a3a5-64987424639b")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ModelField
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ModelField element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelFieldDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ModelField element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelFieldDomainRoleId, newModelClass);
		}
		#endregion
		#region ModelField domain role code
		
		/// <summary>
		/// ModelField domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelFieldDomainRoleId = new global::System.Guid(0xc3bb9dd2, 0xc54e, 0x49c4, 0x96, 0x12, 0xe8, 0xc0, 0xd8, 0x08, 0x3e, 0xd9);
		
		/// <summary>
		/// DomainRole ModelField
		/// Description for AgileFx.AgileModeler.ClassHasFields.ModelField
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassHasFields/ModelField.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassHasFields/ModelField.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="AgileFx.AgileModeler.ClassHasFields/ModelField.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c3bb9dd2-c54e-49c4-9612-e8c0d8083ed9")]
		public virtual ModelField ModelField
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelField)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelFieldDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelFieldDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Fields of a ModelClass
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelField> GetFields(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelField>, ModelField>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasFields links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.ClassHasFields> GetLinksToFields ( global::AgileFx.AgileModeler.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasFields>(modelClassInstance, global::AgileFx.AgileModeler.ClassHasFields.ModelClassDomainRoleId);
		}
		#endregion
		#region ModelField link accessor
		/// <summary>
		/// Get the ClassHasFields link to a ModelField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.ClassHasFields GetLinkToModelClass (global::AgileFx.AgileModeler.ModelField modelFieldInstance)
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ClassHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasFields>(modelFieldInstance, global::AgileFx.AgileModeler.ClassHasFields.ModelFieldDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelField not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasFields instance accessors
		
		/// <summary>
		/// Get any ClassHasFields links between a given ModelClass and a ModelField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.ClassHasFields> GetLinks( global::AgileFx.AgileModeler.ModelClass source, global::AgileFx.AgileModeler.ModelField target )
		{
			global::System.Collections.Generic.List<global::AgileFx.AgileModeler.ClassHasFields> outLinks = new global::System.Collections.Generic.List<global::AgileFx.AgileModeler.ClassHasFields>();
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ClassHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasFields>(source, global::AgileFx.AgileModeler.ClassHasFields.ModelClassDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.ClassHasFields link in links )
			{
				if ( target.Equals(link.ModelField) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasFields link between a given ModelClassand a ModelField.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.ClassHasFields GetLink( global::AgileFx.AgileModeler.ModelClass source, global::AgileFx.AgileModeler.ModelField target )
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ClassHasFields> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasFields>(source, global::AgileFx.AgileModeler.ClassHasFields.ModelClassDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.ClassHasFields link in links )
			{
				if ( target.Equals(link.ModelField) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace AgileFx.AgileModeler
{
	/// <summary>
	/// DomainRelationship ClassHasNavigationProperties
	/// Description for AgileFx.AgileModeler.ClassHasNavigationProperties
	/// </summary>
	[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassHasNavigationProperties.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassHasNavigationProperties.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("42a28aa5-46f3-49cb-9b7a-e3b76048fbc9")]
	public partial class ClassHasNavigationProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasNavigationProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x42a28aa5, 0x46f3, 0x49cb, 0x9b, 0x7a, 0xe3, 0xb7, 0x60, 0x48, 0xfb, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasNavigationProperties link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">NavigationProperty to use as the target of the relationship.</param>
		public ClassHasNavigationProperties(ModelClass source, NavigationProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasNavigationProperties.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasNavigationProperties.NavigationPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasNavigationProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasNavigationProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasNavigationProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasNavigationProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x2a57841a, 0x2046, 0x44e3, 0xb3, 0xde, 0xd1, 0x5b, 0x6e, 0x9c, 0x4d, 0x38);
		
		/// <summary>
		/// DomainRole ModelClass
		/// Description for AgileFx.AgileModeler.ClassHasNavigationProperties.ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassHasNavigationProperties/ModelClass.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassHasNavigationProperties/ModelClass.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NavigationProperties", PropertyDisplayNameKey="AgileFx.AgileModeler.ClassHasNavigationProperties/ModelClass.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2a57841a-2046-44e3-b3de-d15b6e9c4d38")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a NavigationProperty
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(NavigationProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NavigationPropertyDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(NavigationProperty element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NavigationPropertyDomainRoleId, newModelClass);
		}
		#endregion
		#region NavigationProperty domain role code
		
		/// <summary>
		/// NavigationProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid NavigationPropertyDomainRoleId = new global::System.Guid(0xd9046450, 0x60cb, 0x416a, 0x8a, 0x1f, 0x85, 0x44, 0x5d, 0x3d, 0xfc, 0xa0);
		
		/// <summary>
		/// DomainRole NavigationProperty
		/// Description for
		/// AgileFx.AgileModeler.ClassHasNavigationProperties.NavigationProperty
		/// </summary>
		[DslDesign::DisplayNameResource("AgileFx.AgileModeler.ClassHasNavigationProperties/NavigationProperty.DisplayName", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("AgileFx.AgileModeler.ClassHasNavigationProperties/NavigationProperty.Description", typeof(global::AgileFx.AgileModeler.AgileModelerDomainModel), "AgileFx.AgileModeler.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="AgileFx.AgileModeler.ClassHasNavigationProperties/NavigationProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d9046450-60cb-416a-8a1f-85445d3dfca0")]
		public virtual NavigationProperty NavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NavigationProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, NavigationPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NavigationPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NavigationProperties of a ModelClass
		/// <summary>
		/// Gets a list of NavigationProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NavigationProperty> GetNavigationProperties(ModelClass element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasNavigationProperties links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.ClassHasNavigationProperties> GetLinksToNavigationProperties ( global::AgileFx.AgileModeler.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasNavigationProperties>(modelClassInstance, global::AgileFx.AgileModeler.ClassHasNavigationProperties.ModelClassDomainRoleId);
		}
		#endregion
		#region NavigationProperty link accessor
		/// <summary>
		/// Get the ClassHasNavigationProperties link to a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.ClassHasNavigationProperties GetLinkToModelClass (global::AgileFx.AgileModeler.NavigationProperty navigationPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ClassHasNavigationProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasNavigationProperties>(navigationPropertyInstance, global::AgileFx.AgileModeler.ClassHasNavigationProperties.NavigationPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NavigationProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasNavigationProperties instance accessors
		
		/// <summary>
		/// Get any ClassHasNavigationProperties links between a given ModelClass and a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::AgileFx.AgileModeler.ClassHasNavigationProperties> GetLinks( global::AgileFx.AgileModeler.ModelClass source, global::AgileFx.AgileModeler.NavigationProperty target )
		{
			global::System.Collections.Generic.List<global::AgileFx.AgileModeler.ClassHasNavigationProperties> outLinks = new global::System.Collections.Generic.List<global::AgileFx.AgileModeler.ClassHasNavigationProperties>();
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ClassHasNavigationProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasNavigationProperties>(source, global::AgileFx.AgileModeler.ClassHasNavigationProperties.ModelClassDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.ClassHasNavigationProperties link in links )
			{
				if ( target.Equals(link.NavigationProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasNavigationProperties link between a given ModelClassand a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::AgileFx.AgileModeler.ClassHasNavigationProperties GetLink( global::AgileFx.AgileModeler.ModelClass source, global::AgileFx.AgileModeler.NavigationProperty target )
		{
			global::System.Collections.Generic.IList<global::AgileFx.AgileModeler.ClassHasNavigationProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::AgileFx.AgileModeler.ClassHasNavigationProperties>(source, global::AgileFx.AgileModeler.ClassHasNavigationProperties.ModelClassDomainRoleId);
			foreach ( global::AgileFx.AgileModeler.ClassHasNavigationProperties link in links )
			{
				if ( target.Equals(link.NavigationProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
