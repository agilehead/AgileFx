<#@ template language="C#v3.5" hostspecific="True" debug="true" inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Data"#>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="VSLangProj"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="VSLangProj" #>
<#@ import namespace="dte=EnvDTE" #>
<#@ output extension=".cs" #>
<#@ AgileModeler processor="AgileModelerDirectiveProcessor" requires="fileName='%MODEL_FILENAME%'" #>
<#	var manager = Manager.Create(Host, GenerationEnvironment);
	var manyToManyAssociations = new List<Association>(); 
	var defaultNS = manager.GetOutputNamespace(Host.TemplateFile);  
	var util = new CSharpUtil(this.ModelRoot, this.Store); #>
//This code was auto-generated by AgileFx Modeler.
//Changes to this file will be lost if the file is regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Text;

using AgileFx.ORM;
using AgileFx.ORM.ObjectComposition;
using AgileFx.ORM.Mapping;
using AgileFx.ORM.Utils;
using AgileFx.ORM.Backends.LinqToSql;

using projectNS = <#= defaultNS #>;
using intermediateNS = <#= defaultNS #>.Intermediate;
using L2SNS = <#= defaultNS #>.L2S;
using pocoNS = <#= defaultNS #>.POCO;

namespace <#= defaultNS #>
{
    public class <#= this.ModelRoot.DataContextName #> : L2SDataContext
    {
		public <#= this.ModelRoot.DataContextName #>() : base("<#= this.ModelRoot.ConnectionString #>")
		{
		}
		
		public <#= this.ModelRoot.DataContextName #>(string connectionString) : base(connectionString)
		{
		}
	
        public override System.Data.Linq.DataContext GetLinqToSqlDataContext()
        {
			return new L2SNS.<#= util.GetL2SContextName() #>(this.ConnectionString);
        }
		
		public override EntityContext CreateNew()
		{
			return new <#= this.ModelRoot.DataContextName #>(this.ConnectionString);
		}
		
<#	foreach (ModelType type in this.ModelRoot.Types)
	{
		var entity = type as ModelClass;
#>		public IQueryable<<#= entity.Name #>> <#= entity.Name #> { get { return this.CreateQuery<<#= entity.Name #>>(); } }
<# 	}
#>  }
}
	
<#	//Write out the classes
	foreach (ModelType type in this.ModelRoot.Types)
  	{ 
		var entity = type as ModelClass; #>
namespace <#= defaultNS #>
{
<#		if (entity.Baseclass != null)
		{	 
#>	public class <#= entity.Name #>Mapping : ModelEntityMapping<projectNS.<#= entity.Name #>, intermediateNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>, L2SNS.<#= entity.Baseclass.Name #>>
<# 		} 
		else
		{ 
#>	public class <#= entity.Name #>Mapping : ModelEntityMapping<projectNS.<#= entity.Name #>, intermediateNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>>
<# 		} #>
	{
<#
		//	--- Mapping Class Begins Here ---
		if (entity.Baseclass != null) 
		{ 
#>		public <#= entity.Name #>Mapping() : base(e => e.<#= entity.Baseclass.Name #>)
<# 		} 
		else
		{
#>		public <#= entity.Name #>Mapping()
<# 		} #>
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
<# 	//Add Identity Field
		foreach (var field in util.GetRootBaseClass(entity).Fields) 
		{
			if (field.IsPrimaryKey) 
			{
#>			AddIdentityField<<#= util.GetTypeKeyword(field) #>>(e => e.<#= field.Name #>); 
<#			} 
		}
		
		//Add Associations
		foreach (var navProp in entity.NavigationProperties) 
		{
			var assoc = util.GetAssociation(navProp.Association);
			var otherEnd = util.GetOtherEnd(assoc, navProp);
			var thisEnd = util.GetThisEnd(assoc, navProp);
			if (!util.IsManyToMany(assoc)) 
			{ 
#>			AddRelationship<projectNS.<#= otherEnd.Role #>>(e => e.<#= navProp.Name #>, e => e.<#= otherEnd.NavigationProperty #>);
<# 			} #>
<#			else 
			{ 
#>			AddManyToManyRelationship<projectNS.<#= otherEnd.Role #>, <#= assoc.ManyToManyMappingTable #>>(e => e.<#= navProp.Name #>, map => map.<#= thisEnd.ManyToManyMappingColumn #>, map => map.<#= otherEnd.ManyToManyMappingColumn #>);
<#	 		} 
		}  
#>		}
	}
		
	[Serializable]
	[ClassMapping(typeof(<#= entity.Name #>Mapping))]
<# 		if (entity.Baseclass != null) 
		{ 
#>	public partial class <#= entity.Name #> : <#= entity.Baseclass.Name #><# if (!string.IsNullOrEmpty(entity.DerivesOrImplements.Trim())) {#>, <#= entity.DerivesOrImplements #><# } #>, IModelEntity<intermediateNS.<#= entity.Name #>>
<#	 	} 
		else 
		{ 
#>	public partial class <#= entity.Name #> : <# if (!string.IsNullOrEmpty(entity.DerivesOrImplements.Trim())) {#><#= entity.DerivesOrImplements #>, <# } #>IModelEntity<intermediateNS.<#= entity.Name #>>	
<#		} #>
	{
		private intermediateNS.<#= entity.Name #> __intermediateEntity;
		public <# if (entity.Baseclass != null) { #>new <# } #>intermediateNS.<#= entity.Name #> _intermediateEntity { get { return __intermediateEntity; } }
		public <# if (entity.Baseclass != null) { #>new <# } #>IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.<#= entity.Name #> intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
<# if (entity.Baseclass != null) { 
#>			base._setIntermediateEntity(intermediateEntity._base);<# } #> 
		}
<#		if (entity.Baseclass != null)
		{
			var primaryKey = util.GetPrimaryKey(entity);
#>		public override <#= util.GetTypeKeyword(primaryKey) #> <#= primaryKey.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(primaryKey.Getter) #>get { return base.<#= primaryKey.Name #>; }
			<#= util.GetPropertyAccessModifer(primaryKey.Setter) #>set { _intermediateEntity.<#= primaryKey.Name #> = value; base.<#= primaryKey.Name #> = value; }
		}
<#		}	#>
		
		//Fields		
<# 		foreach (var field in entity.Fields) 
		{ 
#>		public virtual <#= util.GetTypeKeyword(field) #> <#= field.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(field.Getter) #>get { return _intermediateEntity.<#= field.Name #>; }
			<#= util.GetPropertyAccessModifer(field.Setter) #>set { _intermediateEntity.<#= field.Name #> = value; }
		}
<#		} #>
			
		//Navigation Properties
<#	 	foreach (var navProp in entity.NavigationProperties) 
		{
			var assoc = util.GetAssociation(navProp.Association);
			var privateMember = util.GetPrivateMemberName(navProp.Name);
			var associatedType = util.GetOtherEnd(assoc, navProp).Role;
			
			if (!util.IsCollection(util.GetThisEnd(assoc, navProp))) //Entity Reference
			{ #>
		public <#= associatedType #> <#= navProp.Name #> 
		{	
			get { return _intermediateEntity.<#= navProp.Name #>.GetEntity(); }
			set { if (value != null) _intermediateEntity.<#= navProp.Name #> = value._intermediateEntity; else _intermediateEntity.<#= navProp.Name #> = null; }
		}
<#			}
			else //Collection
			{ #>
		public ICollection<projectNS.<#= associatedType #>> <#= navProp.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(navProp.Getter) #>get { return _intermediateEntity.<#= navProp.Name #>.EntityCollection; }
		}		
<#			}
		}
		
#>		public <#= entity.Name #>() : this(new intermediateNS.<#= entity.Name #>())
		{
		}
			
		public <#= entity.Name #>(intermediateNS.<#= entity.Name #> intermediateEntity)<# if (entity.Baseclass != null) { #> : base(intermediateEntity._base) <# } #>
		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public <#= entity.Name #>(SerializationInfo info, StreamingContext context)<# if (entity.Baseclass != null) { #> : base( info, context) <# } #>

		{
			__intermediateEntity = new intermediateNS.<#= entity.Name #>(info, context<# if (entity.Baseclass != null) { #>, base._intermediateEntity<# } #>);
			__intermediateEntity._entity = this;
		}

		public<# if (entity.Baseclass != null) { #> new<# } #> void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<<#= entity.Name #>, pocoNS.<#= entity.Name #>>(info);
		}

<#		if (entity.Baseclass == null)
		{	#>
		public static bool operator ==(<#= entity.Name #> a, <#= entity.Name #> b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(<#= entity.Name #> a, <#= entity.Name #> b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((<#= entity.Name #>)this)._equals(obj as <#= entity.Name #>);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
<#		}	#>
		
		public<# if (entity.Baseclass != null) { #> new<# } #> pocoNS.<#= entity.Name #> ToPOCO()
		{
			return this.CreatePOCO<<#= entity.Name #>, pocoNS.<#= entity.Name #>>();
		}
	}
}

namespace <#= defaultNS #>.POCO
{
	[Serializable]
	public class <#= entity.Name #><# if (entity.Baseclass != null) { #> : <#= entity.Baseclass.Name #>,  IPOCO<projectNS.<#= entity.Name #>><# } else { #> : IPOCO<projectNS.<#= entity.Name #>><# }
#>	{

<#		if (entity.Baseclass != null)
		{
			var primaryKey = util.GetPrimaryKey(entity);
#>		public new <#= util.GetTypeKeyword(primaryKey) #> <#= primaryKey.Name #> { get; set; }
<#		}	#>

<# 			foreach(var field in entity.Fields)
			{
#>		public <#= util.GetTypeKeyword(field) #> <#= field.Name #> { get; set; }
<#			}	#>
<# 			foreach(var navProp in entity.NavigationProperties)
			{
				var assoc = util.GetAssociation(navProp.Association);
				if (!util.IsCollection(util.GetThisEnd(assoc, navProp))) //Entity Reference
				{
#>		public POCOReference <#= navProp.Name #> { get; set; }

<#				}
				else
				{
#>		public POCOCollection <#= navProp.Name #> { get; set; }

<#				}
			}	#>
			
		public <#= entity.Name #>()
		{
		}
	}
}
	
namespace <#= defaultNS #>.Intermediate
{
<# 		if (entity.Baseclass != null) 
		{
#>	public class <#= entity.Name #> : DerivedIntermediateEntity<projectNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>, intermediateNS.<#= entity.Baseclass.Name #>>
	{	
<#		}
		else
		{
#>	public class <#= entity.Name #> : IntermediateEntity<projectNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>>
	{
<#		}	#>
<#		//////////// Field Writer /////////////

		Action<IEnumerable<ModelField>> fieldWriter = (IEnumerable<ModelField> fields) => 
		{
			foreach (var field in fields) 
			{
				var member = util.GetPrivateMemberName(field.Name);
				if (field.IsPrimaryKey)
				{
#>		public PrimaryKeyField<projectNS.<#= entity.Name #>, intermediateNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>, <#= util.GetTypeKeyword(field) #>> <#= member #>;
		public <#= util.GetTypeKeyword(field) #> <#= field.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(field.Getter) #>get { return <#= member #>.Value; }
			<#= util.GetPropertyAccessModifer(field.Setter) #>set { <#= member #>.Value = value; }
		}
<#				}
				else
				{
#>		public EntityField<projectNS.<#= entity.Name #>, intermediateNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>, <#= util.GetTypeKeyword(field) #>> <#= member #>;
		public <#= util.GetTypeKeyword(field) #> <#= field.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(field.Getter) #>get { return <#= member #>.Value; }
			<#= util.GetPropertyAccessModifer(field.Setter) #>set { <#= member #>.Value = value; }
		}
<#				}
					}
		}; #>
<#		//////////// Inherited Field Writer /////////////

		Action<IEnumerable<ModelField>> inheritedFieldWriter = (IEnumerable<ModelField> fields) => 
		{
			foreach (var field in fields) 
			{
				if (field.IsPrimaryKey)
				{
					var member = util.GetPrivateMemberName(field.Name);
#>		public DerivedPrimaryKeyField<projectNS.<#= entity.Name #>, intermediateNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>, intermediateNS.<#= entity.Baseclass.Name #>, <#= util.GetTypeKeyword(field) #>> <#= member #>;
		public <#= util.GetTypeKeyword(field) #> <#= field.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(field.Getter) #>get { return <#= member #>.Value; }
			<#= util.GetPropertyAccessModifer(field.Setter) #>set { <#= member #>.Value = value; }
		}
<#				}
				else
				{
#>		public <#= util.GetTypeKeyword(field) #> <#= field.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(field.Getter) #>get { return __base.<#= field.Name #>; }
			<#= util.GetPropertyAccessModifer(field.Setter) #>set { __base.<#= field.Name #> = value; }
		}
<#				}
			}
		}; #>
		//Fields				
<#	 	//Fields defined on the entity
		fieldWriter(entity.Fields); 
		
		//Fields due to inheritance
		inheritedFieldWriter(util.GetBaseclassFields(entity).Select(f => f.Value)); 
		#>

<#		//////////// Navigation Property Writer //////////////
		Action<IEnumerable<NavigationProperty>> navPropWriter = (properties) => 
		{
			var modelClass = entity;
			foreach (var navProp in properties) 
			{
				var assoc = util.GetAssociation(navProp.Association);
				var associatedType = util.GetOtherEnd(assoc, navProp).Role;
				//We are writing inherited propreties.
			
				var privateMember = util.GetPrivateMemberName(navProp.Name);
			
				if (!util.IsCollection(util.GetThisEnd(assoc, navProp))) 
				{				
#>		public IntermediateEntityReference<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>> <#= privateMember #>;
		public intermediateNS.<#= navProp.Type #> <#= navProp.Name #>
		{	
			<#= util.GetPropertyAccessModifer(navProp.Getter) #>get { return <#= privateMember #>.Value; }
			<#= util.GetPropertyAccessModifer(navProp.Setter) #>set { <#= privateMember #>.Value = value; }
		}
<# 				}
				else
				{
					if(!util.IsManyToMany(assoc))
					{ 
#>		public IntermediateEntityCollection<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>> <#= privateMember #>;
		public IntermediateEntityCollection<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>> <#= navProp.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(navProp.Getter) #>get { return <#= privateMember #>; }		
		}				
<#					} 
					else
					{
						if (!manyToManyAssociations.Contains(assoc))
							manyToManyAssociations.Add(assoc);
						
#>		public IntermediateManyToManyCollection<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, projectNS.<#= assoc.ManyToManyMappingTable #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, intermediateNS.<#= assoc.ManyToManyMappingTable #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>, L2SNS.<#= assoc.ManyToManyMappingTable #>> <#= privateMember #>;
		public IntermediateManyToManyCollection<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, projectNS.<#= assoc.ManyToManyMappingTable #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, intermediateNS.<#= assoc.ManyToManyMappingTable #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>, L2SNS.<#= assoc.ManyToManyMappingTable #>> <#= navProp.Name #> 
		{	
			<#= util.GetPropertyAccessModifer(navProp.Getter) #>get { return <#= privateMember #>; }		
		}
<#					}
				}
			} 
		};
#>

<#		//////////// Inherited Navigation Property Writer //////////////
		Action<IEnumerable<KeyValuePair<ModelClass, NavigationProperty>>> inheritedNavPropWriter = (properties) => 
		{
			foreach (var p in properties) 
			{
				var modelClass = p.Key;
				var navProp = p.Value;
				var assoc = util.GetAssociation(navProp.Association);
				var associatedType = util.GetOtherEnd(assoc, navProp).Role;
				//We are writing inherited propreties.
				
				if (!util.IsCollection(util.GetThisEnd(assoc, navProp))) 
				{ #>
		public intermediateNS.<#= navProp.Type #> <#= navProp.Name #>
		{	
			<#= util.GetPropertyAccessModifer(navProp.Getter) #>get { return __base.<#= navProp.Name #>; }
			<#= util.GetPropertyAccessModifer(navProp.Setter) #>set { __base.<#= navProp.Name #> = value; }
		}
<#				}
				else
				{ #>
		public ICollection<intermediateNS.<#= associatedType #>> <#= navProp.Name #>
		{
			get { return __base.<#= navProp.Name #>; }
		}
<#				}
			} 		
		};
#>
		//Navigation Properties
<#		navPropWriter(entity.NavigationProperties);		#>
		
		//Inherited Navigation Properties
<#	 	inheritedNavPropWriter(util.GetBaseclassNavigationProperties(entity)); #>
						
		public <#= entity.Name #>()
		{
<# 		if (entity.Baseclass != null) 
		{ 
#>			__base = new intermediateNS.<#= entity.Baseclass.Name #>();
<#		} #>
			__tableEntity = new L2SNS.<#= entity.Name #>();
<# 		if (entity.Baseclass != null) 
		{ 
#>			__tableEntity.<#= entity.Baseclass.Name #> = __base._tableEntity;
<#		} #>
			initFields();
		}
		
		public <#= entity.Name #>(SerializationInfo info, StreamingContext context<# if (entity.Baseclass != null) { #>, intermediateNS.<#= entity.Baseclass.Name #> _base<# } #>)
		{
			__tableEntity = new L2SNS.<#= entity.Name #>();
<# 		if (entity.Baseclass != null) 
		{ 
#>			__base = _base;
<#		} #>
			initFields();
			
			this.Deserialize<projectNS.<#= entity.Name #>, <#= entity.Name #>, pocoNS.<#= entity.Name #>>(info);
			
<# 		if (entity.Baseclass != null) 
		{ 
#>			__tableEntity.<#= entity.Baseclass.Name #> = __base._tableEntity;
<#		} #>
		}
			
		public <#= entity.Name #>(L2SNS.<#= entity.Name #> tableEntity<# if (entity.Baseclass != null) { #>, intermediateNS.<#= entity.Baseclass.Name #> baseclass<# } #>)
		{
<# 		if (entity.Baseclass != null) 
		{ 
#>			__base = baseclass;
<#		} #>
			__tableEntity = tableEntity;
<# 		if (entity.Baseclass != null) 
		{ 
#>			__tableEntity.<#= entity.Baseclass.Name #> = __base._tableEntity;
<#		} #>
			initFields();
		}

		private void initFields()
		{
<#		if (entity.Baseclass != null)
		{
			var primaryKey = util.GetPrimaryKey(entity);
			var primaryKeyMember = util.GetPrivateMemberName(primaryKey.Name);
#>			<#= primaryKeyMember #> = new DerivedPrimaryKeyField<projectNS.<#= entity.Name #>, intermediateNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>, intermediateNS.<#= entity.Baseclass.Name #>, <#= util.GetTypeKeyword(primaryKey) #>>(this, __base, t => t.<#= primaryKey.Name #>, (t, val) => t.<#= primaryKey.Name #> = val, (t, val) => t.<#= util.GetPrimaryKeyName(entity.Name) #> = val);
<#		}	#>
<#			foreach(var field in entity.Fields)
			{
				var member = util.GetPrivateMemberName(field.Name);
				var fieldType = field.IsPrimaryKey ? "PrimaryKeyField" : "EntityField";
#>			<#= member #> = new <#= fieldType #><projectNS.<#= entity.Name #>, intermediateNS.<#= entity.Name #>, L2SNS.<#= entity.Name #>, <#= util.GetTypeKeyword(field) #>>(this, t => t.<#= field.Name #>, (t, val) => t.<#= field.Name #> = val);
<#			}
			
			foreach (var navProp in entity.NavigationProperties) 
			{
				var assoc = util.GetAssociation(navProp.Association);
				var otherEnd = util.GetOtherEnd(assoc, navProp);
				var associatedType = otherEnd.Role;
				var member = util.GetPrivateMemberName(navProp.Name);
				var entityShort = "__" + entity.Name.ToLower()[0];
				var associatedTypeShort = "__" + associatedType.ToLower();
				var memberOnAssociatedType = util.GetPrivateMemberName(otherEnd.NavigationProperty);
				
				if (!util.IsCollection(util.GetThisEnd(assoc, navProp)))
				{
					var nullable = navProp.Multiplicity == AgileFx.AgileModeler.Multiplicity.One ? "false" : "true";
#>			<#= member #> = new IntermediateEntityReference<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>>(this, <#= entityShort #> => <#= entityShort #>.<#= navProp.Name #>, (<#= entityShort #>, <#= associatedTypeShort #>) => <#= entityShort #>.<#= navProp.Name #> = <#= associatedTypeShort #>, <#= associatedTypeShort #> => <#= associatedTypeShort #>.<#= memberOnAssociatedType #>, <#= nullable #>);
<# 				} else if (!util.IsManyToMany(assoc))
 				{
#>			<#= member #> = new IntermediateEntityCollection<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>>(this, <#= associatedTypeShort #> => <#= associatedTypeShort #>.<#= memberOnAssociatedType #>);
<# 				} else
				{
					var thisEndOnMapTable = (assoc.End1RoleName == entity.Name) ? assoc.End1ManyToManyMappingColumn : assoc.End2ManyToManyMappingColumn;
					var otherEndOnMapTable = (assoc.End1RoleName == entity.Name) ? assoc.End2ManyToManyMappingColumn : assoc.End1ManyToManyMappingColumn;
#>			<#= member #> = new IntermediateManyToManyCollection<projectNS.<#= entity.Name #>, projectNS.<#= associatedType #>, projectNS.<#= assoc.ManyToManyMappingTable #>, intermediateNS.<#= entity.Name #>, intermediateNS.<#= associatedType #>, intermediateNS.<#= assoc.ManyToManyMappingTable #>, L2SNS.<#= entity.Name #>, L2SNS.<#= associatedType #>, L2SNS.<#= assoc.ManyToManyMappingTable #>>(this, __map => __map.<#= thisEndOnMapTable #>, __map => __map.<#= otherEndOnMapTable #>, (__map, <#= entityShort #>) => __map.<#= thisEndOnMapTable #> = <#= entityShort #>, (__map, <#= associatedTypeShort #>) => __map.<#= otherEndOnMapTable #> = <#= associatedTypeShort #>, <#= associatedTypeShort #> => <#= associatedTypeShort #>.<#= memberOnAssociatedType #>);
<# 				} #>
<#			}#>
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
<#			if (entity.NavigationProperties.Count > 0 || entity.Baseclass != null)
			{
#>          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
<#			foreach (var navProp in entity.NavigationProperties) 
			{
#>				case "<#= navProp.Name #>":
<#
				var assoc = util.GetAssociation(navProp.Association);
				var member = util.GetPrivateMemberName(navProp.Name);
				
				if (!util.IsCollection(util.GetThisEnd(assoc, navProp)))
				{
#>                	return <#= member #>.IsLoaded;
<#				} else {
#>					return <#= navProp.Name #>.IsLoaded;
<#				}
			}
			if (entity.Baseclass != null)
			{
#>				default:
					return __base.IsLoaded(fieldSelector);
<#			}	#>
            }
<#			}	#>
            throw new InvalidOperationException();
        }
	}
}
	
namespace <#= defaultNS #>.L2S
{
	partial class <#= entity.Name #> : ITableEntity<intermediateNS.<#= entity.Name #>>
	{
        public intermediateNS.<#= entity.Name #> _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.<#= entity.Name #>;
		}
	}
}

<# }
	
/// Write of the many to many association map classes
foreach(var m2m in manyToManyAssociations)
{ #>
namespace <#= defaultNS #>
{
    public class <#= m2m.ManyToManyMappingTable #>Mapping : MapEntityMapping<projectNS.<#= m2m.ManyToManyMappingTable #>, intermediateNS.<#= m2m.ManyToManyMappingTable #>, L2SNS.<#= m2m.ManyToManyMappingTable #>>
    {
       public <#= m2m.ManyToManyMappingTable #>Mapping()
       {
	   		AddMappings();
       }
	   
	   public virtual void AddMappings()
	   {
<# 	var role1Field = util.GetPrimaryKey(m2m.End1RoleName);
	var role2Field = util.GetPrimaryKey(m2m.End2RoleName); #>
		   AddIdentityField<<#= util.GetTypeKeyword(role1Field) #>>(__a => __a.<#= m2m.End1ManyToManyFieldName #>, false);
		   AddIdentityField<<#= util.GetTypeKeyword(role2Field) #>>(__a => __a.<#= m2m.End2ManyToManyFieldName #>, false);
	   	   
		   AddManyToManyKeyRelationship<<#= util.GetTypeKeyword(role1Field) #>, <#= m2m.End1RoleName #>, <#= util.GetTypeKeyword(role1Field) #>>(__a => __a.<#= m2m.End1ManyToManyFieldName #>, __a => __a.<#= role1Field.Name #>);
		   AddManyToManyKeyRelationship<<#= util.GetTypeKeyword(role2Field) #>, <#= m2m.End2RoleName #>, <#= util.GetTypeKeyword(role2Field) #>>(__a => __a.<#= m2m.End2ManyToManyFieldName #>, __a => __a.<#= role2Field.Name #>);
	   	   
		   AddManyToManyMap<<#= m2m.End1RoleName #>, L2SNS.<#= m2m.End1RoleName #>>(__a => __a.<#= m2m.End1ManyToManyMappingColumn #>, __a => __a.<#= m2m.ManyToManyMappingTable #>);
           AddManyToManyMap<<#= m2m.End2RoleName #>, L2SNS.<#= m2m.End2RoleName #>>(__a => __a.<#= m2m.End2ManyToManyMappingColumn #>, __a => __a.<#= m2m.ManyToManyMappingTable #>);	   
	   }
   	}
	
	[ClassMapping(typeof(<#= m2m.ManyToManyMappingTable #>Mapping))]
	public partial class <#= m2m.ManyToManyMappingTable #> : IEntity<intermediateNS.<#= m2m.ManyToManyMappingTable #>>
	{
		private intermediateNS.<#= m2m.ManyToManyMappingTable #> __intermediateEntity;
		public intermediateNS.<#= m2m.ManyToManyMappingTable #> _intermediateEntity { get { return __intermediateEntity; } }		
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}		
		public void _setIntermediateEntity(intermediateNS.<#= m2m.ManyToManyMappingTable #> intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public virtual <#= util.GetTypeKeyword(role1Field) #> <#= m2m.End1ManyToManyFieldName #>
		{
			get { return __intermediateEntity.<#= m2m.End1ManyToManyFieldName #>; }
			set { __intermediateEntity.<#= m2m.End1ManyToManyFieldName #> = value; }
		}
		
		public virtual <#= util.GetTypeKeyword(role2Field) #> <#= m2m.End2ManyToManyFieldName #>
		{
			get { return __intermediateEntity.<#= m2m.End2ManyToManyFieldName #>; }
			set { __intermediateEntity.<#= m2m.End2ManyToManyFieldName #> = value; }
		}
		
		public projectNS.<#= m2m.End1RoleName #> <#= m2m.End1ManyToManyNavigationProperty #>
		{	
			get { return _intermediateEntity.<#= m2m.End1ManyToManyNavigationProperty #>.GetEntity(); }
			set { if (value != null) _intermediateEntity.<#= m2m.End1ManyToManyNavigationProperty #> = value._intermediateEntity; else _intermediateEntity.<#= m2m.End1ManyToManyNavigationProperty #> = null; }
		}
		
		public projectNS.<#= m2m.End2RoleName #> <#= m2m.End2ManyToManyNavigationProperty #>
		{	
			get { return _intermediateEntity.<#= m2m.End2ManyToManyNavigationProperty #>.GetEntity(); }
			set { if (value != null) _intermediateEntity.<#= m2m.End2ManyToManyNavigationProperty #> = value._intermediateEntity; else _intermediateEntity.<#= m2m.End2ManyToManyNavigationProperty #> = null; }
		}
						
		public <#= m2m.ManyToManyMappingTable #>()
		{
			__intermediateEntity = new intermediateNS.<#= m2m.ManyToManyMappingTable #>();
			__intermediateEntity._entity = this;
		}
			
		public <#= m2m.ManyToManyMappingTable #>(intermediateNS.<#= m2m.ManyToManyMappingTable #> intermediateEntity)
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
	}
}

namespace <#= defaultNS #>.Intermediate
{
	public class <#= m2m.ManyToManyMappingTable #> : IntermediateEntity<projectNS.<#= m2m.ManyToManyMappingTable #>, L2SNS.<#= m2m.ManyToManyMappingTable #>>
	{
		private bool _loadedFromDatabase = false;
		
		public PrimaryKeyField<projectNS.<#= m2m.ManyToManyMappingTable #>, intermediateNS.<#= m2m.ManyToManyMappingTable #>, L2SNS.<#= m2m.ManyToManyMappingTable #>, <#= util.GetTypeKeyword(role1Field) #>> <#= util.GetPrivateMemberName(m2m.End1ManyToManyFieldName) #>;
		public <#= util.GetTypeKeyword(role1Field) #> <#= m2m.End1ManyToManyFieldName #>
		{
			get { return <#= util.GetPrivateMemberName(m2m.End1ManyToManyFieldName) #>.Value; }
			set { <#= util.GetPrivateMemberName(m2m.End1ManyToManyFieldName) #>.Value = value; }
		}
		
		public PrimaryKeyField<projectNS.<#= m2m.ManyToManyMappingTable #>, intermediateNS.<#= m2m.ManyToManyMappingTable #>, L2SNS.<#= m2m.ManyToManyMappingTable #>, <#= util.GetTypeKeyword(role2Field) #>> <#= util.GetPrivateMemberName(m2m.End2ManyToManyFieldName) #>;
		public <#= util.GetTypeKeyword(role2Field) #> <#= m2m.End2ManyToManyFieldName #>
		{
			get { return <#= util.GetPrivateMemberName(m2m.End2ManyToManyFieldName) #>.Value; }
			set { <#= util.GetPrivateMemberName(m2m.End2ManyToManyFieldName) #>.Value = value; }
		}
	
		private intermediateNS.<#= m2m.End1RoleName #> <#= util.GetPrivateMemberName(m2m.End1ManyToManyNavigationProperty) #>;
		public intermediateNS.<#= m2m.End1RoleName #> <#= m2m.End1ManyToManyNavigationProperty #>
		{	
			get { return <#= util.GetPrivateMemberName(m2m.End1ManyToManyNavigationProperty) #>; }
			set { <#= util.GetPrivateMemberName(m2m.End1ManyToManyNavigationProperty) #> = value; if (!_loadedFromDatabase) { __tableEntity.<#= m2m.End1ManyToManyNavigationProperty #> = value._tableEntity; } }
		}
		
		private intermediateNS.<#= m2m.End2RoleName #> <#= util.GetPrivateMemberName(m2m.End2ManyToManyNavigationProperty) #>;
		public intermediateNS.<#= m2m.End2RoleName #> <#= m2m.End2ManyToManyNavigationProperty #>
		{	
			get { return <#= util.GetPrivateMemberName(m2m.End2ManyToManyNavigationProperty) #>; }
			set { <#= util.GetPrivateMemberName(m2m.End2ManyToManyNavigationProperty) #> = value; if (!_loadedFromDatabase) { __tableEntity.<#= m2m.End2ManyToManyNavigationProperty #> = value._tableEntity; } }
		}
						
		public <#= m2m.ManyToManyMappingTable #>()
		{
			__tableEntity = new L2SNS.<#= m2m.ManyToManyMappingTable #>();
			initFields();
		}
			
		public <#= m2m.ManyToManyMappingTable #>(L2SNS.<#= m2m.ManyToManyMappingTable #> tableEntity)
		{
			_loadedFromDatabase = true;
			__tableEntity = tableEntity;
			initFields();
		}
		
		private void initFields()
		{
			<#= util.GetPrivateMemberName(m2m.End1ManyToManyFieldName) #> = new PrimaryKeyField<projectNS.<#= m2m.ManyToManyMappingTable #>, intermediateNS.<#= m2m.ManyToManyMappingTable #>, L2SNS.<#= m2m.ManyToManyMappingTable #>, <#= util.GetTypeKeyword(role1Field) #>>(this, __m => __m.<#= m2m.End1ManyToManyFieldName #>, (__m, val) => __m.<#= m2m.End1ManyToManyFieldName #> = val);
			<#= util.GetPrivateMemberName(m2m.End2ManyToManyFieldName) #> = new PrimaryKeyField<projectNS.<#= m2m.ManyToManyMappingTable #>, intermediateNS.<#= m2m.ManyToManyMappingTable #>, L2SNS.<#= m2m.ManyToManyMappingTable #>, <#= util.GetTypeKeyword(role2Field) #>>(this, __m => __m.<#= m2m.End2ManyToManyFieldName #>, (__m, val) => __m.<#= m2m.End2ManyToManyFieldName #> = val);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
			return true;
		}
	}
}

namespace <#= defaultNS #>.L2S
{
	partial class <#= m2m.ManyToManyMappingTable #> : ITableEntity<intermediateNS.<#= m2m.ManyToManyMappingTable #>>
	{
        public intermediateNS.<#= m2m.ManyToManyMappingTable #> _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}
		
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.<#= m2m.ManyToManyMappingTable #>;
		}
	}
}
<# } //Many to many associations end here. #>

<# //Write out the DBML
	var dbmlFilename = Path.GetFileNameWithoutExtension(Host.TemplateFile) + "_backend_linqtosql.dbml";
	var dbmlGenerator = new L2SGenerator(this.Store, this.ModelRoot, manager.DefaultProjectNamespace);
	var dbmlXml = dbmlGenerator.Generate();
	var dbmlProperties = new Dictionary<string, string>();	
	dbmlProperties["CustomToolNamespace"] = defaultNS + ".L2S";
	manager.StartNewFile(dbmlFilename, dbmlProperties); #>
<#= dbmlXml #>
<#	manager.Process(true); 
	var dbmlFullPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), dbmlFilename);	
	var dbmlProjectItem = manager.dte.Solution.FindProjectItem(dbmlFullPath);
	if (dbmlProjectItem.Object is VSProjectItem)
		((VSProjectItem)dbmlProjectItem.Object).RunCustomTool(); #>
<#+ // -------------- DBML File Generator -------------
class L2SGenerator
    {
        private const string SQL_PROVIDER_NAMESPACE = "System.Data.SqlClient";

        //? to be set.
        //ModelRoot modelRoot = this.ModelRoot;
        //Store store = this.Store;
        private Store store = null;
        private ModelRoot modelRoot = null;
        private LinqToSQLUtil util = null;

        private String databaseName;
        private String projectNamespace;
        private String namespacePrefix;

        public L2SGenerator(Store store, ModelRoot root, string defaultProjectNamespace)
        {
            this.store = store;
            this.modelRoot = root;
            this.util = new LinqToSQLUtil(root, store);
            databaseName = this.util.GetDatabaseName();
            projectNamespace = defaultProjectNamespace;
            namespacePrefix = this.util.GetCleanDatabaseName(databaseName);
        }

        public String Generate()
        {
            string l2sName = databaseName;
            var l2sDoc = new XDocument(new XDeclaration("1.0", "utf-8", null));

            XElement l2sDocRoot = L2S.Element("Database", new XAttribute("Name", l2sName),
                                    new XAttribute("Class", namespacePrefix + "_LinqToSqlDataContext"));
            l2sDoc.Add(l2sDocRoot);

            var connection = L2S.Element("Connection", new XAttribute("Mode", "ConnectionString"),
                                    new XAttribute("ConnectionString", modelRoot.ConnectionString),
                                    new XAttribute("Provider", SQL_PROVIDER_NAMESPACE));
            l2sDocRoot.Add(connection);

            List<XElement> tables = new List<XElement>();
            modelRoot.Types.ForEach(t =>
            {
                var mc = t as ModelClass;

                var type = L2S.Element("Type",
                                    new XAttribute("Name", mc.Name),
                                        mc.Fields.Select(f => GetColumnElement(f)),
                                        mc.NavigationProperties.Select(n => GetAssociationElements(n, t as ModelClass)));

                if (mc.Baseclass != null) type.Add(GetBaseClassElements(mc));

                tables.Add(L2S.Element("Table",
                                    new XAttribute("Name", "dbo." + mc.TableName),
                                    new XAttribute("Member", mc.Name),
                                        type));
            });
           
            l2sDocRoot.Add(tables);

            // tables for many to many
            var manyToManyTables = store.ElementDirectory.FindElements<Association>()
                            .Where(x => x.End1Multiplicity == AgileFx.AgileModeler.Multiplicity.ZeroMany && x.End2Multiplicity == AgileFx.AgileModeler.Multiplicity.ZeroMany)
                            .Select(assoc => GetManyToManyTableElement(assoc));

            l2sDocRoot.Add(manyToManyTables);

            MemoryStream stream = new MemoryStream();
            XmlTextWriter writer = new XmlTextWriter(stream, new UTF8Encoding());
            writer.Formatting = Formatting.Indented;
            
            l2sDoc.Save(writer);

            writer.Flush();
            stream.Position = 0;
            StreamReader reader = new StreamReader(stream);
            string xml = reader.ReadToEnd();
            return xml;
        }

        private XElement[] GetBaseClassElements(ModelClass modelClass)
        {
            var primaryField = util.GetPrimaryKey(modelClass);
            var column = L2S.Element("Column",
                                new XAttribute("Name", primaryField.Name),
                                new XAttribute("Type", GetFullNameForBuiltInType(primaryField.Type)),
                                new XAttribute("DbType", GetSQLType(primaryField, true)),
                                new XAttribute("CanBeNull", "false"),
                                new XAttribute("IsPrimaryKey", "true"));

            var association = L2S.Element("Association",
                                        new XAttribute("Name", string.Format("{0}_{1}", modelClass.Baseclass.Name, modelClass.Name)),
                                        new XAttribute("Member", modelClass.Baseclass.Name),
                                        new XAttribute("ThisKey", primaryField.Name),
                                        new XAttribute("OtherKey", primaryField.Name),
                                        new XAttribute("Type", modelClass.Baseclass.Name),
                                        new XAttribute("IsForeignKey", "true"));

            return new XElement[] { column, association };
        }

        private XElement GetManyToManyTableElement(Association assoc)
        {
            var end1PrimaryField = util.GetPrimaryKey(assoc.End1RoleName);
            var end2PrimaryField = util.GetPrimaryKey(assoc.End2RoleName);
			var end1MemberName = assoc.End1ManyToManyFieldName;
			var end2MemberName = assoc.End2ManyToManyFieldName;
			return L2S.Element("Table",
                                new XAttribute("Name", "dbo." + assoc.ManyToManyMappingTable),
                                new XAttribute("Member", assoc.ManyToManyMappingTable),
                                    L2S.Element("Type",
                                        new XAttribute("Name", assoc.ManyToManyMappingTable),
                                            L2S.Element("Column",
                                                new XAttribute("Name", assoc.End1ManyToManyMappingColumn),
                                                new XAttribute("Type", GetFullNameForBuiltInType(end1PrimaryField.Type)),
                                                new XAttribute("DbType", GetSQLType(end1PrimaryField)),
                                                new XAttribute("IsPrimaryKey", "true"),
                                                new XAttribute("CanBeNull", "false"),
                                                new XAttribute("Member", end1MemberName)),
                                            L2S.Element("Column",
                                                new XAttribute("Name", assoc.End2ManyToManyMappingColumn),
                                                new XAttribute("Type", GetFullNameForBuiltInType(end2PrimaryField.Type)),
                                                new XAttribute("DbType", GetSQLType(end2PrimaryField)),
                                                new XAttribute("IsPrimaryKey", "true"),
                                                new XAttribute("CanBeNull", "false"),
                                                new XAttribute("Member", end2MemberName)),
                                            L2S.Element("Association",
                                                new XAttribute("Name", string.Format("{0}_{1}", assoc.End1RoleName, assoc.ManyToManyMappingTable)),
                                                new XAttribute("Member", assoc.End1ManyToManyMappingColumn),
                                                new XAttribute("ThisKey", end1MemberName),
                                                new XAttribute("OtherKey", end1PrimaryField.Name),
                                                new XAttribute("Type", assoc.End1RoleName),
                                                new XAttribute("IsForeignKey", "true")),
                                            L2S.Element("Association",
                                                new XAttribute("Name", string.Format("{0}_{1}", assoc.End2RoleName, assoc.ManyToManyMappingTable)),
                                                new XAttribute("Member", assoc.End2ManyToManyMappingColumn),
                                                new XAttribute("ThisKey", end2MemberName),
                                                new XAttribute("OtherKey", end2PrimaryField.Name),
                                                new XAttribute("Type", assoc.End2RoleName),
                                                new XAttribute("IsForeignKey", "true"))));
        }

        private XElement[] GetAssociationElements(NavigationProperty n, ModelClass modelClass)
        {
			XElement column = null;
            XElement association = null;

			var assoc = util.GetAssociation(n.Association);
            var thisEnd = util.GetThisEnd(assoc, n);
			var targetEnd = util.GetOtherEnd(assoc, n);
			
			//If this isn't Many to Many
			if (!(thisEnd.Multiplicity == AgileFx.AgileModeler.Multiplicity.ZeroMany
				&& targetEnd.Multiplicity == AgileFx.AgileModeler.Multiplicity.ZeroMany))
			{
				association = L2S.Element("Association",
					new XAttribute("Name", assoc.Name),
					new XAttribute("Member", n.Name),
					new XAttribute("Type", targetEnd.Role));
				
				if (n.IsForeignkey)
				{
					var foreignkeyField = modelClass.Fields.Single(f => f.DatabaseColumnName == n.ForeignkeyColumn);
					association.Add(new XAttribute("ThisKey", foreignkeyField.Name));
					association.Add(new XAttribute("OtherKey", util.GetPrimaryKeyName(targetEnd.Role)));
					association.Add(new XAttribute("IsForeignKey", "true"));
				}
				else
				{
					association.Add(new XAttribute("ThisKey", util.GetPrimaryKey(thisEnd.Role).Name));
					//We have to find the foreign key on the other end.
					var otherClass = util.GetModelClass(targetEnd.Role);	
					var otherProp = otherClass.NavigationProperties.Single(x => x.Association == n.Association && x != n);
					var otherField = otherClass.Fields.Single(f => f.ColumnName == otherProp.ForeignkeyColumn);
					association.Add(new XAttribute("OtherKey", otherField.Name));
					
					//If the other side is not a "Many", we can add the Cardinality attribute here.
					if (n.Multiplicity != AgileFx.AgileModeler.Multiplicity.ZeroMany)
						association.Add(new XAttribute("Cardinality", "One"));
				}
			}				
             //Many to Many
            else
            {
				association = L2S.Element("Association",
                                        new XAttribute("Name", string.Format("{0}_{1}", modelClass.Name, n.Association)),
                                        new XAttribute("Member", n.Association),
                                        new XAttribute("ThisKey", util.GetPrimaryKey(modelClass.Name).Name),
                                        new XAttribute("OtherKey", (assoc.End1RoleName == modelClass.Name) ? assoc.End1ManyToManyMappingColumn : assoc.End2ManyToManyMappingColumn),
                                        new XAttribute("Type", n.Association));
            }

            var xElements = new List<XElement>();

            if (column != null) xElements.Add(column);
            if (association != null) xElements.Add(association);

            return xElements.ToArray();
        }

        private XElement GetColumnElement(ModelField f)
        {
			var hasDbColumnName = !string.IsNullOrEmpty(f.DatabaseColumnName);
			
            var column = L2S.Element("Column",
                                new XAttribute("Name", hasDbColumnName ? f.DatabaseColumnName : f.Name),
                                new XAttribute("Type", GetFullNameForBuiltInType(f.Type)),
                                new XAttribute("DbType", GetSQLType(f)),
                                new XAttribute("CanBeNull", f.Nullable ? "true" : "false"));

            if (f.IsPrimaryKey) column.Add(new XAttribute("IsPrimaryKey", "true"));
            if (f.IsDbGenerated) column.Add(new XAttribute("IsDbGenerated", "true"));
			if (f.Type == BuiltInTypes.Timestamp) column.Add(new XAttribute("IsVersion", "true"));
			if (hasDbColumnName && (f.Name != f.DatabaseColumnName))	column.Add(new XAttribute("Member", f.Name));
			
			var updateCheck = f.UpdateCheck == ConcurrencyCheckFrequency.Always ? "Always"
				: f.UpdateCheck == ConcurrencyCheckFrequency.Never ? "Never" : "WhenChanged";
			if (updateCheck != "Always")column.Add(new XAttribute("UpdateCheck", updateCheck));
			
            return column;
        }

        private string GetSQLType(ModelField field, bool ignoreIdentity)
        {
            string type = "";
            if (field.Type == BuiltInTypes.Boolean) type = "Bit";
            else if (field.Type == BuiltInTypes.Byte) type = "Binary";
            else if (field.Type == BuiltInTypes.DateTime) type = "DateTime";
            else if (field.Type == BuiltInTypes.Decimal) type = "Decimal";
            else if (field.Type == BuiltInTypes.Double) type = "Float";
            else if (field.Type == BuiltInTypes.Guid) type = "UniqueIdentifier";
            else if (field.Type == BuiltInTypes.Int16) type = "SmallInt";
            else if (field.Type == BuiltInTypes.Int32) type = "Int";
            else if (field.Type == BuiltInTypes.Int64) type = "BigInt";
            else if (field.Type == BuiltInTypes.Single) type = "Real";
            else if (field.Type == BuiltInTypes.String)
            {
                if (field.IsUnicode) type = "N";
                if (field.MaxLength <= 0)
                {
                    type += "Text";
                }
                else
                {
                    type += (field.IsFixedLength ? "Char" : "VarChar");
                    type = string.Format("{0}({1})", type, field.MaxLength);
                }

            }
            else
			{
				throw new NotImplementedException("Mapping for SQL Type not implemented.");
			}

            if (!field.Nullable) type += " NOT NULL";
            if (!ignoreIdentity && field.IsIdentity) type += " IDENTITY";

            return type;
        }

        private string GetSQLType(ModelField field)
        {
            return GetSQLType(field, false);
        }

        private string GetFullNameForBuiltInType(BuiltInTypes type)
        {
            return "System." + Enum.GetName(typeof(BuiltInTypes), type);
        }

		public string GetTargetFieldName(string assocName, string targetClassName)
		{
			var modelClass = util.GetModelClass(targetClassName);
				var otherEnd = modelClass.NavigationProperties.Single(n => n.Association == assocName);
				var foreignkeyField = modelClass.Fields.Find(f => f.DatabaseColumnName == otherEnd.ForeignkeyColumn);
			return (foreignkeyField != null) ? foreignkeyField.Name : otherEnd.ForeignkeyColumn;
		}
    }

    class L2S
    {
        static L2S()
        {
            Namespace = "http://schemas.microsoft.com/linqtosql/dbml/2007";
        }

        public static XNamespace Namespace { get; private set; }

        public static XElement Element(string name)
        {
            return new XElement(Namespace + name);
        }

        public static XElement Element(string name, params object[] content)
        {
            return new XElement(Namespace + name, content);
        }

        public static XElement Element(string name, object content)
        {
            return new XElement(Namespace + name, content);
        }

        public static XAttribute Attribute(string name, object value)
        {
            return new XAttribute(name, value);
        }
    }

    class LinqToSQLUtil : Util
    {

        public LinqToSQLUtil(ModelRoot root, Store store)
            : base(root, store)
        { }

        public override string GetKeywordForAccessModifier(string modifier)
        {
            throw new NotImplementedException();
        }

        public override string GetKeywordForType(string type)
        {
            throw new NotImplementedException();
        }

        public override string GetPrivateMemberName(string name)
        {
            throw new NotImplementedException();
        }
    }
#>
<#+
class CSharpUtil : Util	{
	
	public CSharpUtil(ModelRoot root, Store store) : base(root, store)
	{}
	
	public override string GetKeywordForType(string type)
	{
		if (type == "Binary") return "AgileFx.ORM.Types.Binary";
		if (type == "Boolean") return "bool";
		if (type == "Byte") return "byte";
		if (type == "SByte") return "sbyte";
		if (type == "Char") return "char";
		if (type == "Decimal") return "decimal";
		if (type == "Double") return "double";
		if (type == "Single") return "float";
		if (type == "Int32") return "int";
		if (type == "UInt32") return "uint";
		if (type == "Int64") return "long";
		if (type == "UInt64") return "ulong";
		if (type == "Object") return "object";
		if (type == "Int16") return "short";
		if (type == "UInt16") return "ushort";
		if (type == "String") return "string";
		if (type == "Timestamp") return "AgileFx.ORM.Types.Binary";
		return type;
	}
	
	public override string GetKeywordForAccessModifier(string modifier)
	{
		return modifier.ToLower();
	}
	
	public override string GetPrivateMemberName(string name)
	{	
		if (name.Length > 1)
			return "_" + name.Substring(0,1).ToLower() + name.Substring(1);
		else
			return "_" + name.Substring(0,1).ToLower();
	}
}

abstract class Util	{
	ModelRoot modelRoot;
	Store store;
	
	public Util(ModelRoot root, Store store)	{
		this.modelRoot = root;
		this.store = store;
	}
	
	public Association GetAssociation(string associationName)
	{
		return store.ElementDirectory.FindElements<Association>().Single(a => a.Name == associationName);
	}
		
	public bool IsCollection(AssociationEnd end)	{
		return end.Multiplicity == AgileFx.AgileModeler.Multiplicity.ZeroMany;
	} 
	
	public bool IsManyToMany(Association assoc)	{
		return assoc.End1Multiplicity == AgileFx.AgileModeler.Multiplicity.ZeroMany &&
			assoc.End2Multiplicity == AgileFx.AgileModeler.Multiplicity.ZeroMany;
	}
	
	public AssociationEnd GetOtherEnd(Association assoc, NavigationProperty navigationProperty)	{
		if (assoc.End1RoleName == navigationProperty.ModelClass.Name && assoc.End1NavigationProperty == navigationProperty.Name)
			return new AssociationEnd { Role = assoc.End2RoleName, NavigationProperty = assoc.End2NavigationProperty, Multiplicity = assoc.End1Multiplicity, ManyToManyMappingColumn = assoc.End2ManyToManyMappingColumn };
		if (assoc.End2RoleName == navigationProperty.ModelClass.Name && assoc.End2NavigationProperty == navigationProperty.Name)
			return new AssociationEnd { Role = assoc.End1RoleName, NavigationProperty = assoc.End1NavigationProperty, Multiplicity = assoc.End2Multiplicity, ManyToManyMappingColumn = assoc.End1ManyToManyMappingColumn };
		throw new Exception("Cannot find associated type for association " + assoc.Name + " in " + navigationProperty.ModelClass.Name);
	}
	
	public AssociationEnd GetThisEnd(Association assoc, NavigationProperty navigationProperty)	{
		if (assoc.End2RoleName == navigationProperty.ModelClass.Name && assoc.End2NavigationProperty == navigationProperty.Name)
			return new AssociationEnd { Role = assoc.End2RoleName, NavigationProperty = assoc.End2NavigationProperty, Multiplicity = assoc.End1Multiplicity, ManyToManyMappingColumn = assoc.End2ManyToManyMappingColumn };
		if (assoc.End1RoleName == navigationProperty.ModelClass.Name && assoc.End1NavigationProperty == navigationProperty.Name)
			return new AssociationEnd { Role = assoc.End1RoleName, NavigationProperty = assoc.End1NavigationProperty, Multiplicity = assoc.End2Multiplicity, ManyToManyMappingColumn = assoc.End1ManyToManyMappingColumn };
		throw new Exception("Cannot find associated type for association " + assoc.Name + " in " + navigationProperty.ModelClass.Name);
	}
	
	/* Get Baseclass Fields */
	public IEnumerable<KeyValuePair<ModelClass, ModelField>> GetBaseclassFields(ModelClass modelClass)
	{
		var fields = new List<KeyValuePair<ModelClass, ModelField>>();
		
		if (modelClass.Baseclass != null)
			GetBaseclassFields(modelClass.Baseclass, fields);
		
		return fields;
	}
	
	private IEnumerable<KeyValuePair<ModelClass, ModelField>> GetBaseclassFields(ModelClass modelClass, List<KeyValuePair<ModelClass, ModelField>> fields)
	{
		if (modelClass.Baseclass != null)
			GetBaseclassFields(modelClass.Baseclass, fields);
		 
		foreach(var field in modelClass.Fields)
			fields.Add(new KeyValuePair<ModelClass, ModelField>(modelClass, field));
		
		return fields;
	}
	
	/* Get Baseclass Navigation Properties */
	public IEnumerable<KeyValuePair<ModelClass, NavigationProperty>> GetBaseclassNavigationProperties(ModelClass modelClass)
	{
		var props = new List<KeyValuePair<ModelClass, NavigationProperty>>();
		if (modelClass.Baseclass != null)
			GetBaseclassNavigationProperties(modelClass.Baseclass, props);
		return props;
	}
	
	private IEnumerable<KeyValuePair<ModelClass, NavigationProperty>> GetBaseclassNavigationProperties(ModelClass modelClass, List<KeyValuePair<ModelClass, NavigationProperty>> properties)
	{
		if (modelClass.Baseclass != null)
			GetBaseclassNavigationProperties(modelClass.Baseclass, properties);
		
		foreach(var property in modelClass.NavigationProperties)
			properties.Add(new KeyValuePair<ModelClass, NavigationProperty>(modelClass, property));
		
		return properties;
	}
	
	public string GetTypeKeyword(ModelField field)
	{
		var type = GetKeywordForType(field.Type.ToString());
		if (IsNullableValueType(field))
			return type + "?";
		else
			return type;
	}
	
	public string GetKeywordForAccessModifier(AccessModifier mod)
	{
		return GetKeywordForAccessModifier(mod.ToString());
	}
	
	public string GetPropertyAccessModifer(AccessModifier mod)
	{
		if (mod.ToString() != "Public")
			return GetPropertyAccessModifer(mod) + " ";
		else
			return "";
	}
	
	public bool IsNullableValueType(ModelField field)
	{
		var fieldType = field.Type.ToString();
		if (field.Nullable && 
			(fieldType == "Boolean" || fieldType == "Int16" || fieldType == "Int32" || fieldType == "Int64" || 
			fieldType == "UInt16" || fieldType == "UInt32" || fieldType == "UInt64" || fieldType == "Single" || 
			fieldType == "Double" || fieldType == "Decimal" || fieldType == "DateTime" || fieldType == "Guid"))
				return true;
		else
			return false;
	}
	
	public virtual string GetL2SContextName()
	{
		return GetCleanDatabaseName(GetDatabaseName()) + "_LinqToSqlDataContext";		
	}

   public string GetDatabaseName()
   {
       System.Data.SqlClient.SqlConnectionStringBuilder builder = new System.Data.SqlClient.SqlConnectionStringBuilder();
       builder.ConnectionString = this.modelRoot.ConnectionString;
       return builder.InitialCatalog;
   }

   public string GetCleanDatabaseName(string databaseName)
   {
       return new Regex(@"[^a-zA-Z0-9_]").Replace(databaseName.Replace('.', '_'), "");
   }
	
	public abstract string GetKeywordForAccessModifier(string modifier);
	public abstract string GetKeywordForType(string type);
	public abstract string GetPrivateMemberName(string name);

   public string GetPrimaryKeyName(string modelClassName)
   {   
       	var modelClass = GetModelClass(modelClassName);
       	return (modelClass.Baseclass == null) ? modelClass.Fields.Single(p => p.IsPrimaryKey).Name
			: store.ElementDirectory.FindElements<Inheritance>().Single(inh => inh.Subclass == modelClass).DerivedClassPrimaryKeyColumn;
   }

   public ModelField GetPrimaryKey(string modelClassName)
   {
       var modelClass = GetModelClass(modelClassName);
       return GetPrimaryKey(modelClass);
   }

   public ModelField GetPrimaryKey(ModelClass modelClass)
   {
       if (modelClass.Baseclass == null)
       {
           return modelClass.Fields.Single(p => p.IsPrimaryKey);
       }
       else
       {
           return GetPrimaryKey(modelClass.Baseclass);
       }
   }

   public ModelClass GetModelClass(string modelClassName)
   {
       return this.store.ElementDirectory.FindElements<ModelClass>().Single(c => c.Name == modelClassName);
   }
   
   public ModelClass GetRootBaseClass(ModelClass modelClass)
   {
		return (modelClass.Baseclass != null) ? GetRootBaseClass(modelClass.Baseclass) : modelClass;
   }
}

class AssociationEnd
{
	public string Role { get; set; }
	public string NavigationProperty { get; set; }
	public AgileFx.AgileModeler.Multiplicity Multiplicity { get; set; }
	public string ManyToManyMappingColumn { get; set; }
}

// Manager class records the various blocks so it can split them up
class Manager {
    public class Block {
        public String Name;
        public int Start, Length;
		public Dictionary<string, string> Properties = new Dictionary<string, string>();
    }

    protected Block currentBlock;
    protected List<Block> files = new List<Block>();
    protected Block footer = new Block();
    protected Block header = new Block();
    protected ITextTemplatingEngineHost host;
    protected StringBuilder template;
    protected List<String> generatedFileNames = new List<String>();
	public EnvDTE.DTE dte;
        
    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

	public void StartNewFile(String name) {
		StartNewFile(name, new Dictionary<string, string>());
    }

    public void StartNewFile(String name, Dictionary<string, string> properties) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name, Properties = properties };
    }

    public void StartFooter() {
        CurrentBlock = footer;
    }

    public void StartHeader() {
        CurrentBlock = header;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

	public virtual String GetOutputNamespace(string fileName) {
        return null; 
    }
	
    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private EnvDTE.ProjectItem templateProjectItem;
        private Action<String> checkOutAction;
        private Action<IEnumerable<String>> projectSyncAction;

        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

		public override string GetOutputNamespace(string fileName)	{
			var customToolNamespace = GetCustomToolNamespace(fileName);
			if (!string.IsNullOrEmpty(customToolNamespace))	return customToolNamespace;
			
			var projectItem = dte.Solution.FindProjectItem(fileName);
			var namespaces = new List<string>();
                dte.ProjectItem parent = projectItem.Collection.Parent as dte.ProjectItem;
                while (parent != null)
                {
                    if (parent.Kind != EnvDTE.Constants.vsProjectItemKindPhysicalFile)
                    {
                        namespaces.Insert(0, parent.Name.Replace(" ", string.Empty));
                    }

                    parent = parent.Collection.Parent as dte.ProjectItem;
                }

            namespaces.Insert(0, DefaultProjectNamespace);
            return string.Join(".", namespaces.ToArray());
		}
		
        public override String GetCustomToolNamespace(string fileName) {
			return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }
		
        public override void Process(bool split) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split);
            projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider) host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = (String fileName) => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = (IEnumerable<String> keepFileNames) => ProjectSync(templateProjectItem, keepFileNames, files);
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, IEnumerable<String> keepFileNames, List<Manager.Block> files) {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.get_FileNames(0)) + ".";
            foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.get_FileNames(0), projectItem);

            // Remove unused items from the project
            foreach(var pair in projectFiles)
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project 
            foreach(String fileName in keepFileNameSet)
                if (!projectFiles.ContainsKey(fileName))
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
				
			//Support for accessing the properties of the project item (jeswin)
			foreach(EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
			{		
				var filename = System.IO.Path.GetFileName(projectItem.get_FileNames(0));
				var block = files.FirstOrDefault(f => f.Name == filename);
				if (block != null)	{
					foreach(var pair in block.Properties)
						projectItem.Properties.Item(pair.Key).Value = pair.Value;
				}
			}
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
}
#>