#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace taskometer.Core.Models.L2S
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TaskometerDb")]
	public partial class TaskometerDb_LinqToSqlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertControl(Control instance);
    partial void UpdateControl(Control instance);
    partial void DeleteControl(Control instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertIssuesPortal(IssuesPortal instance);
    partial void UpdateIssuesPortal(IssuesPortal instance);
    partial void DeleteIssuesPortal(IssuesPortal instance);
    partial void InsertMeta(Meta instance);
    partial void UpdateMeta(Meta instance);
    partial void DeleteMeta(Meta instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPermissionSet(PermissionSet instance);
    partial void UpdatePermissionSet(PermissionSet instance);
    partial void DeletePermissionSet(PermissionSet instance);
    partial void InsertProjectPortal(ProjectPortal instance);
    partial void UpdateProjectPortal(ProjectPortal instance);
    partial void DeleteProjectPortal(ProjectPortal instance);
    partial void InsertRevision(Revision instance);
    partial void UpdateRevision(Revision instance);
    partial void DeleteRevision(Revision instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTemplate(Template instance);
    partial void UpdateTemplate(Template instance);
    partial void DeleteTemplate(Template instance);
    partial void InsertTenant(Tenant instance);
    partial void UpdateTenant(Tenant instance);
    partial void DeleteTenant(Tenant instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertWebsite(Website instance);
    partial void UpdateWebsite(Website instance);
    partial void DeleteWebsite(Website instance);
    partial void InsertAccountRoleMap(AccountRoleMap instance);
    partial void UpdateAccountRoleMap(AccountRoleMap instance);
    partial void DeleteAccountRoleMap(AccountRoleMap instance);
    partial void InsertTemplateControlMap(TemplateControlMap instance);
    partial void UpdateTemplateControlMap(TemplateControlMap instance);
    partial void DeleteTemplateControlMap(TemplateControlMap instance);
    #endregion
		
		public TaskometerDb_LinqToSqlDataContext() : 
				base("Data Source=.;Initial Catalog=TaskometerDb;Integrated Security=True;Connect Timeo" +
						"ut=10;User Instance=False", mappingSource)
		{
			OnCreated();
		}
		
		public TaskometerDb_LinqToSqlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaskometerDb_LinqToSqlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaskometerDb_LinqToSqlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaskometerDb_LinqToSqlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Account
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comment
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Control> Control
		{
			get
			{
				return this.GetTable<Control>();
			}
		}
		
		public System.Data.Linq.Table<File> File
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<IssuesPortal> IssuesPortal
		{
			get
			{
				return this.GetTable<IssuesPortal>();
			}
		}
		
		public System.Data.Linq.Table<Meta> Meta
		{
			get
			{
				return this.GetTable<Meta>();
			}
		}
		
		public System.Data.Linq.Table<Page> Page
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permission
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PermissionSet> PermissionSet
		{
			get
			{
				return this.GetTable<PermissionSet>();
			}
		}
		
		public System.Data.Linq.Table<ProjectPortal> ProjectPortal
		{
			get
			{
				return this.GetTable<ProjectPortal>();
			}
		}
		
		public System.Data.Linq.Table<Revision> Revision
		{
			get
			{
				return this.GetTable<Revision>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Template> Template
		{
			get
			{
				return this.GetTable<Template>();
			}
		}
		
		public System.Data.Linq.Table<Tenant> Tenant
		{
			get
			{
				return this.GetTable<Tenant>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Website> Website
		{
			get
			{
				return this.GetTable<Website>();
			}
		}
		
		public System.Data.Linq.Table<AccountRoleMap> AccountRoleMap
		{
			get
			{
				return this.GetTable<AccountRoleMap>();
			}
		}
		
		public System.Data.Linq.Table<TemplateControlMap> TemplateControlMap
		{
			get
			{
				return this.GetTable<TemplateControlMap>();
			}
		}
	}
	
	[Table(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateLastLogin;
		
		private string _Password;
		
		private string _Provider;
		
		private string _ProviderType;
		
		private string _Status;
		
		private long _TenantId;
		
		private string _Username;
		
		private EntityRef<User> _User;
		
		private EntitySet<AccountRoleMap> _AccountRoleMap;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateLastLoginChanging(System.DateTime value);
    partial void OnDateLastLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnProviderTypeChanging(string value);
    partial void OnProviderTypeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public Account()
		{
			this._User = default(EntityRef<User>);
			this._AccountRoleMap = new EntitySet<AccountRoleMap>(new Action<AccountRoleMap>(this.attach_AccountRoleMap), new Action<AccountRoleMap>(this.detach_AccountRoleMap));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_DateLastLogin", DbType="DateTime NOT NULL")]
		public System.DateTime DateLastLogin
		{
			get
			{
				return this._DateLastLogin;
			}
			set
			{
				if ((this._DateLastLogin != value))
				{
					this.OnDateLastLoginChanging(value);
					this.SendPropertyChanging();
					this._DateLastLogin = value;
					this.SendPropertyChanged("DateLastLogin");
					this.OnDateLastLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Provider", DbType="NVarChar(50)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[Column(Storage="_ProviderType", DbType="NVarChar(50)")]
		public string ProviderType
		{
			get
			{
				return this._ProviderType;
			}
			set
			{
				if ((this._ProviderType != value))
				{
					this.OnProviderTypeChanging(value);
					this.SendPropertyChanging();
					this._ProviderType = value;
					this.SendPropertyChanged("ProviderType");
					this.OnProviderTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Association(Name="Account_User", Storage="_User", ThisKey="Id", OtherKey="AccountId", IsUnique=true, IsForeignKey=false)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Account = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Account = this;
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Account_AccountRoleMap", Storage="_AccountRoleMap", ThisKey="Id", OtherKey="AccountId")]
		public EntitySet<AccountRoleMap> AccountRoleMap
		{
			get
			{
				return this._AccountRoleMap;
			}
			set
			{
				this._AccountRoleMap.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Account", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountRoleMap(AccountRoleMap entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountRoleMap(AccountRoleMap entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[Table(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private bool _IsRoot;
		
		private string _Name;
		
		private System.Nullable<long> _ParentId;
		
		private long _PermissionSetId;
		
		private long _TenantId;
		
		private string _UniquePath;
		
		private string _UrlAlias;
		
		private long _WebsiteId;
		
		private string _DefaultPage;
		
		private EntitySet<Category> _ChildCategories;
		
		private EntitySet<Page> _Pages;
		
		private EntityRef<PermissionSet> _PermissionSet;
		
		private EntityRef<Tenant> _Tenant;
		
		private EntityRef<Website> _Website;
		
		private EntityRef<Category> _Parent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnIsRootChanging(bool value);
    partial void OnIsRootChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIdChanging(System.Nullable<long> value);
    partial void OnParentIdChanged();
    partial void OnPermissionSetIdChanging(long value);
    partial void OnPermissionSetIdChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnUniquePathChanging(string value);
    partial void OnUniquePathChanged();
    partial void OnUrlAliasChanging(string value);
    partial void OnUrlAliasChanged();
    partial void OnWebsiteIdChanging(long value);
    partial void OnWebsiteIdChanged();
    partial void OnDefaultPageChanging(string value);
    partial void OnDefaultPageChanged();
    #endregion
		
		public Category()
		{
			this._ChildCategories = new EntitySet<Category>(new Action<Category>(this.attach_ChildCategories), new Action<Category>(this.detach_ChildCategories));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._PermissionSet = default(EntityRef<PermissionSet>);
			this._Tenant = default(EntityRef<Tenant>);
			this._Website = default(EntityRef<Website>);
			this._Parent = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsRoot", DbType="Bit NOT NULL")]
		public bool IsRoot
		{
			get
			{
				return this._IsRoot;
			}
			set
			{
				if ((this._IsRoot != value))
				{
					this.OnIsRootChanging(value);
					this.SendPropertyChanging();
					this._IsRoot = value;
					this.SendPropertyChanged("IsRoot");
					this.OnIsRootChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Parent", Storage="_ParentId", DbType="BigInt")]
		public System.Nullable<long> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[Column(Name="PermissionSet", Storage="_PermissionSetId", DbType="BigInt NOT NULL")]
		public long PermissionSetId
		{
			get
			{
				return this._PermissionSetId;
			}
			set
			{
				if ((this._PermissionSetId != value))
				{
					this.OnPermissionSetIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionSetId = value;
					this.SendPropertyChanged("PermissionSetId");
					this.OnPermissionSetIdChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_UniquePath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string UniquePath
		{
			get
			{
				return this._UniquePath;
			}
			set
			{
				if ((this._UniquePath != value))
				{
					this.OnUniquePathChanging(value);
					this.SendPropertyChanging();
					this._UniquePath = value;
					this.SendPropertyChanged("UniquePath");
					this.OnUniquePathChanged();
				}
			}
		}
		
		[Column(Storage="_UrlAlias", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UrlAlias
		{
			get
			{
				return this._UrlAlias;
			}
			set
			{
				if ((this._UrlAlias != value))
				{
					this.OnUrlAliasChanging(value);
					this.SendPropertyChanging();
					this._UrlAlias = value;
					this.SendPropertyChanged("UrlAlias");
					this.OnUrlAliasChanged();
				}
			}
		}
		
		[Column(Name="Website", Storage="_WebsiteId", DbType="BigInt NOT NULL")]
		public long WebsiteId
		{
			get
			{
				return this._WebsiteId;
			}
			set
			{
				if ((this._WebsiteId != value))
				{
					this.OnWebsiteIdChanging(value);
					this.SendPropertyChanging();
					this._WebsiteId = value;
					this.SendPropertyChanged("WebsiteId");
					this.OnWebsiteIdChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultPage", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DefaultPage
		{
			get
			{
				return this._DefaultPage;
			}
			set
			{
				if ((this._DefaultPage != value))
				{
					this.OnDefaultPageChanging(value);
					this.SendPropertyChanging();
					this._DefaultPage = value;
					this.SendPropertyChanged("DefaultPage");
					this.OnDefaultPageChanged();
				}
			}
		}
		
		[Association(Name="Category_Category", Storage="_ChildCategories", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Category> ChildCategories
		{
			get
			{
				return this._ChildCategories;
			}
			set
			{
				this._ChildCategories.Assign(value);
			}
		}
		
		[Association(Name="Category_Page", Storage="_Pages", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="PermissionSet_Category", Storage="_PermissionSet", ThisKey="PermissionSetId", OtherKey="Id", IsForeignKey=true)]
		public PermissionSet PermissionSet
		{
			get
			{
				return this._PermissionSet.Entity;
			}
			set
			{
				PermissionSet previousValue = this._PermissionSet.Entity;
				if (((previousValue != value) 
							|| (this._PermissionSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionSet.Entity = null;
						previousValue.Category = null;
					}
					this._PermissionSet.Entity = value;
					if ((value != null))
					{
						value.Category = this;
						this._PermissionSetId = value.Id;
					}
					else
					{
						this._PermissionSetId = default(long);
					}
					this.SendPropertyChanged("PermissionSet");
				}
			}
		}
		
		[Association(Name="Tenant_Category", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		[Association(Name="Website_Category", Storage="_Website", ThisKey="WebsiteId", OtherKey="Id", IsForeignKey=true)]
		public Website Website
		{
			get
			{
				return this._Website.Entity;
			}
			set
			{
				Website previousValue = this._Website.Entity;
				if (((previousValue != value) 
							|| (this._Website.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Website.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._Website.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._WebsiteId = value.Id;
					}
					else
					{
						this._WebsiteId = default(long);
					}
					this.SendPropertyChanged("Website");
				}
			}
		}
		
		[Association(Name="Category_Category", Storage="_Parent", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Category Parent
		{
			get
			{
				return this._Parent.Entity;
			}
			set
			{
				Category previousValue = this._Parent.Entity;
				if (((previousValue != value) 
							|| (this._Parent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parent.Entity = null;
						previousValue.ChildCategories.Remove(this);
					}
					this._Parent.Entity = value;
					if ((value != null))
					{
						value.ChildCategories.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChildCategories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_ChildCategories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _AddedById;
		
		private string _AddedByDisplayName;
		
		private string _AddedByEmail;
		
		private string _AddedByWebsite;
		
		private System.DateTime _AddedOn;
		
		private string _Body;
		
		private bool _IsApproved;
		
		private long _PageId;
		
		private long _TenantId;
		
		private string _IPAddress;
		
		private EntityRef<Page> _Page;
		
		private EntityRef<Tenant> _Tenant;
		
		private EntityRef<User> _AddedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAddedByIdChanging(System.Nullable<long> value);
    partial void OnAddedByIdChanged();
    partial void OnAddedByDisplayNameChanging(string value);
    partial void OnAddedByDisplayNameChanged();
    partial void OnAddedByEmailChanging(string value);
    partial void OnAddedByEmailChanged();
    partial void OnAddedByWebsiteChanging(string value);
    partial void OnAddedByWebsiteChanged();
    partial void OnAddedOnChanging(System.DateTime value);
    partial void OnAddedOnChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnPageIdChanging(long value);
    partial void OnPageIdChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    #endregion
		
		public Comment()
		{
			this._Page = default(EntityRef<Page>);
			this._Tenant = default(EntityRef<Tenant>);
			this._AddedBy = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="AddedBy", Storage="_AddedById", DbType="BigInt")]
		public System.Nullable<long> AddedById
		{
			get
			{
				return this._AddedById;
			}
			set
			{
				if ((this._AddedById != value))
				{
					this.OnAddedByIdChanging(value);
					this.SendPropertyChanging();
					this._AddedById = value;
					this.SendPropertyChanged("AddedById");
					this.OnAddedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddedByDisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AddedByDisplayName
		{
			get
			{
				return this._AddedByDisplayName;
			}
			set
			{
				if ((this._AddedByDisplayName != value))
				{
					this.OnAddedByDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._AddedByDisplayName = value;
					this.SendPropertyChanged("AddedByDisplayName");
					this.OnAddedByDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_AddedByEmail", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string AddedByEmail
		{
			get
			{
				return this._AddedByEmail;
			}
			set
			{
				if ((this._AddedByEmail != value))
				{
					this.OnAddedByEmailChanging(value);
					this.SendPropertyChanging();
					this._AddedByEmail = value;
					this.SendPropertyChanged("AddedByEmail");
					this.OnAddedByEmailChanged();
				}
			}
		}
		
		[Column(Storage="_AddedByWebsite", DbType="NVarChar(200)")]
		public string AddedByWebsite
		{
			get
			{
				return this._AddedByWebsite;
			}
			set
			{
				if ((this._AddedByWebsite != value))
				{
					this.OnAddedByWebsiteChanging(value);
					this.SendPropertyChanging();
					this._AddedByWebsite = value;
					this.SendPropertyChanged("AddedByWebsite");
					this.OnAddedByWebsiteChanged();
				}
			}
		}
		
		[Column(Storage="_AddedOn", DbType="DateTime NOT NULL")]
		public System.DateTime AddedOn
		{
			get
			{
				return this._AddedOn;
			}
			set
			{
				if ((this._AddedOn != value))
				{
					this.OnAddedOnChanging(value);
					this.SendPropertyChanging();
					this._AddedOn = value;
					this.SendPropertyChanged("AddedOn");
					this.OnAddedOnChanged();
				}
			}
		}
		
		[Column(Storage="_Body", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[Column(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[Column(Name="Page", Storage="_PageId", DbType="BigInt NOT NULL")]
		public long PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_IPAddress", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[Association(Name="Page_Comment", Storage="_Page", ThisKey="PageId", OtherKey="Id", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._PageId = value.Id;
					}
					else
					{
						this._PageId = default(long);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[Association(Name="Tenant_Comment", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		[Association(Name="User_Comment", Storage="_AddedBy", ThisKey="AddedById", OtherKey="Id", IsForeignKey=true)]
		public User AddedBy
		{
			get
			{
				return this._AddedBy.Entity;
			}
			set
			{
				User previousValue = this._AddedBy.Entity;
				if (((previousValue != value) 
							|| (this._AddedBy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddedBy.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._AddedBy.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._AddedById = value.Id;
					}
					else
					{
						this._AddedById = default(Nullable<long>);
					}
					this.SendPropertyChanged("AddedBy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Control")]
	public partial class Control : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _Type;
		
		private string _VirtualPath;
		
		private EntitySet<TemplateControlMap> _TemplateControlMap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnVirtualPathChanging(string value);
    partial void OnVirtualPathChanged();
    #endregion
		
		public Control()
		{
			this._TemplateControlMap = new EntitySet<TemplateControlMap>(new Action<TemplateControlMap>(this.attach_TemplateControlMap), new Action<TemplateControlMap>(this.detach_TemplateControlMap));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_VirtualPath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string VirtualPath
		{
			get
			{
				return this._VirtualPath;
			}
			set
			{
				if ((this._VirtualPath != value))
				{
					this.OnVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._VirtualPath = value;
					this.SendPropertyChanged("VirtualPath");
					this.OnVirtualPathChanged();
				}
			}
		}
		
		[Association(Name="Control_TemplateControlMap", Storage="_TemplateControlMap", ThisKey="Id", OtherKey="ControlId")]
		public EntitySet<TemplateControlMap> TemplateControlMap
		{
			get
			{
				return this._TemplateControlMap;
			}
			set
			{
				this._TemplateControlMap.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TemplateControlMap(TemplateControlMap entity)
		{
			this.SendPropertyChanging();
			entity.Control = this;
		}
		
		private void detach_TemplateControlMap(TemplateControlMap entity)
		{
			this.SendPropertyChanging();
			entity.Control = null;
		}
	}
	
	[Table(Name="dbo.File")]
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Filename;
		
		private long _PermissionSetId;
		
		private long _TenantId;
		
		private string _Title;
		
		private EntityRef<PermissionSet> _PermissionSet;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnPermissionSetIdChanging(long value);
    partial void OnPermissionSetIdChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public File()
		{
			this._PermissionSet = default(EntityRef<PermissionSet>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Filename", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[Column(Name="PermissionSet", Storage="_PermissionSetId", DbType="BigInt NOT NULL")]
		public long PermissionSetId
		{
			get
			{
				return this._PermissionSetId;
			}
			set
			{
				if ((this._PermissionSetId != value))
				{
					this.OnPermissionSetIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionSetId = value;
					this.SendPropertyChanged("PermissionSetId");
					this.OnPermissionSetIdChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Association(Name="PermissionSet_File", Storage="_PermissionSet", ThisKey="PermissionSetId", OtherKey="Id", IsForeignKey=true)]
		public PermissionSet PermissionSet
		{
			get
			{
				return this._PermissionSet.Entity;
			}
			set
			{
				PermissionSet previousValue = this._PermissionSet.Entity;
				if (((previousValue != value) 
							|| (this._PermissionSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionSet.Entity = null;
						previousValue.File = null;
					}
					this._PermissionSet.Entity = value;
					if ((value != null))
					{
						value.File = this;
						this._PermissionSetId = value.Id;
					}
					else
					{
						this._PermissionSetId = default(long);
					}
					this.SendPropertyChanged("PermissionSet");
				}
			}
		}
		
		[Association(Name="Tenant_File", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.IssuesPortal")]
	public partial class IssuesPortal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Domain;
		
		private bool _IsActive;
		
		private string _Path;
		
		private long _TenantId;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public IssuesPortal()
		{
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Association(Name="Tenant_IssuesPortal", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.IssuesPortal = null;
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.IssuesPortal = this;
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Meta")]
	public partial class Meta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _TenantId;
		
		private string _Text;
		
		private string _Url;
		
		private long _WebsiteId;
		
		private EntityRef<Tenant> _Tenant;
		
		private EntityRef<Website> _Website;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnWebsiteIdChanging(long value);
    partial void OnWebsiteIdChanged();
    #endregion
		
		public Meta()
		{
			this._Tenant = default(EntityRef<Tenant>);
			this._Website = default(EntityRef<Website>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Column(Name="Website", Storage="_WebsiteId", DbType="BigInt NOT NULL")]
		public long WebsiteId
		{
			get
			{
				return this._WebsiteId;
			}
			set
			{
				if ((this._WebsiteId != value))
				{
					this.OnWebsiteIdChanging(value);
					this.SendPropertyChanging();
					this._WebsiteId = value;
					this.SendPropertyChanged("WebsiteId");
					this.OnWebsiteIdChanged();
				}
			}
		}
		
		[Association(Name="Tenant_Meta", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Metas.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Metas.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		[Association(Name="Website_Meta", Storage="_Website", ThisKey="WebsiteId", OtherKey="Id", IsForeignKey=true)]
		public Website Website
		{
			get
			{
				return this._Website.Entity;
			}
			set
			{
				Website previousValue = this._Website.Entity;
				if (((previousValue != value) 
							|| (this._Website.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Website.Entity = null;
						previousValue.Meta.Remove(this);
					}
					this._Website.Entity = value;
					if ((value != null))
					{
						value.Meta.Add(this);
						this._WebsiteId = value.Id;
					}
					else
					{
						this._WebsiteId = default(long);
					}
					this.SendPropertyChanged("Website");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Page")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private bool _AllowComments;
		
		private long _AuthorId;
		
		private long _CategoryId;
		
		private string _ContentType;
		
		private System.DateTime _DateTime;
		
		private long _DisplayTemplateId;
		
		private string _Excerpt;
		
		private string _Html;
		
		private string _MainContentHtml;
		
		private long _PermissionSetId;
		
		private bool _Syndicate;
		
		private string _Tags;
		
		private long _TenantId;
		
		private string _Title;
		
		private string _UniquePath;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Revision> _Revisions;
		
		private EntityRef<PermissionSet> _PermissionSet;
		
		private EntityRef<Template> _DisplayTemplate;
		
		private EntityRef<Tenant> _Tenant;
		
		private EntityRef<User> _Author;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAllowCommentsChanging(bool value);
    partial void OnAllowCommentsChanged();
    partial void OnAuthorIdChanging(long value);
    partial void OnAuthorIdChanged();
    partial void OnCategoryIdChanging(long value);
    partial void OnCategoryIdChanged();
    partial void OnContentTypeChanging(string value);
    partial void OnContentTypeChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnDisplayTemplateIdChanging(long value);
    partial void OnDisplayTemplateIdChanged();
    partial void OnExcerptChanging(string value);
    partial void OnExcerptChanged();
    partial void OnHtmlChanging(string value);
    partial void OnHtmlChanged();
    partial void OnMainContentHtmlChanging(string value);
    partial void OnMainContentHtmlChanged();
    partial void OnPermissionSetIdChanging(long value);
    partial void OnPermissionSetIdChanged();
    partial void OnSyndicateChanging(bool value);
    partial void OnSyndicateChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUniquePathChanging(string value);
    partial void OnUniquePathChanged();
    #endregion
		
		public Page()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Revisions = new EntitySet<Revision>(new Action<Revision>(this.attach_Revisions), new Action<Revision>(this.detach_Revisions));
			this._PermissionSet = default(EntityRef<PermissionSet>);
			this._DisplayTemplate = default(EntityRef<Template>);
			this._Tenant = default(EntityRef<Tenant>);
			this._Author = default(EntityRef<User>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_AllowComments", DbType="Bit NOT NULL")]
		public bool AllowComments
		{
			get
			{
				return this._AllowComments;
			}
			set
			{
				if ((this._AllowComments != value))
				{
					this.OnAllowCommentsChanging(value);
					this.SendPropertyChanging();
					this._AllowComments = value;
					this.SendPropertyChanged("AllowComments");
					this.OnAllowCommentsChanged();
				}
			}
		}
		
		[Column(Name="Author", Storage="_AuthorId", DbType="BigInt NOT NULL")]
		public long AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[Column(Name="Category", Storage="_CategoryId", DbType="BigInt NOT NULL")]
		public long CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContentType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ContentType
		{
			get
			{
				return this._ContentType;
			}
			set
			{
				if ((this._ContentType != value))
				{
					this.OnContentTypeChanging(value);
					this.SendPropertyChanging();
					this._ContentType = value;
					this.SendPropertyChanged("ContentType");
					this.OnContentTypeChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Column(Name="DisplayTemplate", Storage="_DisplayTemplateId", DbType="BigInt NOT NULL")]
		public long DisplayTemplateId
		{
			get
			{
				return this._DisplayTemplateId;
			}
			set
			{
				if ((this._DisplayTemplateId != value))
				{
					this.OnDisplayTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._DisplayTemplateId = value;
					this.SendPropertyChanged("DisplayTemplateId");
					this.OnDisplayTemplateIdChanged();
				}
			}
		}
		
		[Column(Storage="_Excerpt", DbType="NVarChar(500)")]
		public string Excerpt
		{
			get
			{
				return this._Excerpt;
			}
			set
			{
				if ((this._Excerpt != value))
				{
					this.OnExcerptChanging(value);
					this.SendPropertyChanging();
					this._Excerpt = value;
					this.SendPropertyChanged("Excerpt");
					this.OnExcerptChanged();
				}
			}
		}
		
		[Column(Storage="_Html", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Html
		{
			get
			{
				return this._Html;
			}
			set
			{
				if ((this._Html != value))
				{
					this.OnHtmlChanging(value);
					this.SendPropertyChanging();
					this._Html = value;
					this.SendPropertyChanged("Html");
					this.OnHtmlChanged();
				}
			}
		}
		
		[Column(Storage="_MainContentHtml", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string MainContentHtml
		{
			get
			{
				return this._MainContentHtml;
			}
			set
			{
				if ((this._MainContentHtml != value))
				{
					this.OnMainContentHtmlChanging(value);
					this.SendPropertyChanging();
					this._MainContentHtml = value;
					this.SendPropertyChanged("MainContentHtml");
					this.OnMainContentHtmlChanged();
				}
			}
		}
		
		[Column(Name="PermissionSet", Storage="_PermissionSetId", DbType="BigInt NOT NULL")]
		public long PermissionSetId
		{
			get
			{
				return this._PermissionSetId;
			}
			set
			{
				if ((this._PermissionSetId != value))
				{
					this.OnPermissionSetIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionSetId = value;
					this.SendPropertyChanged("PermissionSetId");
					this.OnPermissionSetIdChanged();
				}
			}
		}
		
		[Column(Storage="_Syndicate", DbType="Bit NOT NULL")]
		public bool Syndicate
		{
			get
			{
				return this._Syndicate;
			}
			set
			{
				if ((this._Syndicate != value))
				{
					this.OnSyndicateChanging(value);
					this.SendPropertyChanging();
					this._Syndicate = value;
					this.SendPropertyChanged("Syndicate");
					this.OnSyndicateChanged();
				}
			}
		}
		
		[Column(Storage="_Tags", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UniquePath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string UniquePath
		{
			get
			{
				return this._UniquePath;
			}
			set
			{
				if ((this._UniquePath != value))
				{
					this.OnUniquePathChanging(value);
					this.SendPropertyChanging();
					this._UniquePath = value;
					this.SendPropertyChanged("UniquePath");
					this.OnUniquePathChanged();
				}
			}
		}
		
		[Association(Name="Page_Comment", Storage="_Comments", ThisKey="Id", OtherKey="PageId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Page_Revision", Storage="_Revisions", ThisKey="Id", OtherKey="PageId")]
		public EntitySet<Revision> Revisions
		{
			get
			{
				return this._Revisions;
			}
			set
			{
				this._Revisions.Assign(value);
			}
		}
		
		[Association(Name="PermissionSet_Page", Storage="_PermissionSet", ThisKey="PermissionSetId", OtherKey="Id", IsForeignKey=true)]
		public PermissionSet PermissionSet
		{
			get
			{
				return this._PermissionSet.Entity;
			}
			set
			{
				PermissionSet previousValue = this._PermissionSet.Entity;
				if (((previousValue != value) 
							|| (this._PermissionSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionSet.Entity = null;
						previousValue.Page = null;
					}
					this._PermissionSet.Entity = value;
					if ((value != null))
					{
						value.Page = this;
						this._PermissionSetId = value.Id;
					}
					else
					{
						this._PermissionSetId = default(long);
					}
					this.SendPropertyChanged("PermissionSet");
				}
			}
		}
		
		[Association(Name="Template_Page", Storage="_DisplayTemplate", ThisKey="DisplayTemplateId", OtherKey="Id", IsForeignKey=true)]
		public Template DisplayTemplate
		{
			get
			{
				return this._DisplayTemplate.Entity;
			}
			set
			{
				Template previousValue = this._DisplayTemplate.Entity;
				if (((previousValue != value) 
							|| (this._DisplayTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DisplayTemplate.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._DisplayTemplate.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._DisplayTemplateId = value.Id;
					}
					else
					{
						this._DisplayTemplateId = default(long);
					}
					this.SendPropertyChanged("DisplayTemplate");
				}
			}
		}
		
		[Association(Name="Tenant_Page", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		[Association(Name="User_Page", Storage="_Author", ThisKey="AuthorId", OtherKey="Id", IsForeignKey=true)]
		public User Author
		{
			get
			{
				return this._Author.Entity;
			}
			set
			{
				User previousValue = this._Author.Entity;
				if (((previousValue != value) 
							|| (this._Author.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Author.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._Author.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._AuthorId = value.Id;
					}
					else
					{
						this._AuthorId = default(long);
					}
					this.SendPropertyChanged("Author");
				}
			}
		}
		
		[Association(Name="Category_Page", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(long);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
		
		private void attach_Revisions(Revision entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_Revisions(Revision entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[Table(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _Assignee;
		
		private string _AssigneeType;
		
		private bool _Edit;
		
		private long _PermissionSetId;
		
		private long _TenantId;
		
		private bool _View;
		
		private EntityRef<PermissionSet> _PermissionSet;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAssigneeChanging(long value);
    partial void OnAssigneeChanged();
    partial void OnAssigneeTypeChanging(string value);
    partial void OnAssigneeTypeChanged();
    partial void OnEditChanging(bool value);
    partial void OnEditChanged();
    partial void OnPermissionSetIdChanging(long value);
    partial void OnPermissionSetIdChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnViewChanging(bool value);
    partial void OnViewChanged();
    #endregion
		
		public Permission()
		{
			this._PermissionSet = default(EntityRef<PermissionSet>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Assignee", DbType="BigInt NOT NULL")]
		public long Assignee
		{
			get
			{
				return this._Assignee;
			}
			set
			{
				if ((this._Assignee != value))
				{
					this.OnAssigneeChanging(value);
					this.SendPropertyChanging();
					this._Assignee = value;
					this.SendPropertyChanged("Assignee");
					this.OnAssigneeChanged();
				}
			}
		}
		
		[Column(Storage="_AssigneeType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AssigneeType
		{
			get
			{
				return this._AssigneeType;
			}
			set
			{
				if ((this._AssigneeType != value))
				{
					this.OnAssigneeTypeChanging(value);
					this.SendPropertyChanging();
					this._AssigneeType = value;
					this.SendPropertyChanged("AssigneeType");
					this.OnAssigneeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Edit", DbType="Bit NOT NULL")]
		public bool Edit
		{
			get
			{
				return this._Edit;
			}
			set
			{
				if ((this._Edit != value))
				{
					this.OnEditChanging(value);
					this.SendPropertyChanging();
					this._Edit = value;
					this.SendPropertyChanged("Edit");
					this.OnEditChanged();
				}
			}
		}
		
		[Column(Name="PermissionSet", Storage="_PermissionSetId", DbType="BigInt NOT NULL")]
		public long PermissionSetId
		{
			get
			{
				return this._PermissionSetId;
			}
			set
			{
				if ((this._PermissionSetId != value))
				{
					this.OnPermissionSetIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionSetId = value;
					this.SendPropertyChanged("PermissionSetId");
					this.OnPermissionSetIdChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_View", DbType="Bit NOT NULL")]
		public bool View
		{
			get
			{
				return this._View;
			}
			set
			{
				if ((this._View != value))
				{
					this.OnViewChanging(value);
					this.SendPropertyChanging();
					this._View = value;
					this.SendPropertyChanged("View");
					this.OnViewChanged();
				}
			}
		}
		
		[Association(Name="PermissionSet_Permission", Storage="_PermissionSet", ThisKey="PermissionSetId", OtherKey="Id", IsForeignKey=true)]
		public PermissionSet PermissionSet
		{
			get
			{
				return this._PermissionSet.Entity;
			}
			set
			{
				PermissionSet previousValue = this._PermissionSet.Entity;
				if (((previousValue != value) 
							|| (this._PermissionSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionSet.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._PermissionSet.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._PermissionSetId = value.Id;
					}
					else
					{
						this._PermissionSetId = default(long);
					}
					this.SendPropertyChanged("PermissionSet");
				}
			}
		}
		
		[Association(Name="Tenant_Permission", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PermissionSet")]
	public partial class PermissionSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _TenantId;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<File> _File;
		
		private EntityRef<Page> _Page;
		
		private EntitySet<Permission> _Permissions;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public PermissionSet()
		{
			this._Category = default(EntityRef<Category>);
			this._File = default(EntityRef<File>);
			this._Page = default(EntityRef<Page>);
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Association(Name="PermissionSet_Category", Storage="_Category", ThisKey="Id", OtherKey="PermissionSetId", IsUnique=true, IsForeignKey=false)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.PermissionSet = null;
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.PermissionSet = this;
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="PermissionSet_File", Storage="_File", ThisKey="Id", OtherKey="PermissionSetId", IsUnique=true, IsForeignKey=false)]
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.PermissionSet = null;
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.PermissionSet = this;
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		[Association(Name="PermissionSet_Page", Storage="_Page", ThisKey="Id", OtherKey="PermissionSetId", IsUnique=true, IsForeignKey=false)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.PermissionSet = null;
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.PermissionSet = this;
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[Association(Name="PermissionSet_Permission", Storage="_Permissions", ThisKey="Id", OtherKey="PermissionSetId")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[Association(Name="Tenant_PermissionSet", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.PermissionSets.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.PermissionSets.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionSet = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionSet = null;
		}
	}
	
	[Table(Name="dbo.ProjectPortal")]
	public partial class ProjectPortal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Domain;
		
		private bool _IsActive;
		
		private string _Path;
		
		private long _TenantId;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public ProjectPortal()
		{
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Association(Name="Tenant_ProjectPortal", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.ProjectPortal = null;
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.ProjectPortal = this;
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Revision")]
	public partial class Revision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Contents;
		
		private System.DateTime _DateTime;
		
		private string _Html;
		
		private string _MainContentHtml;
		
		private long _PageId;
		
		private long _TenantId;
		
		private EntityRef<Page> _Page;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnHtmlChanging(string value);
    partial void OnHtmlChanged();
    partial void OnMainContentHtmlChanging(string value);
    partial void OnMainContentHtmlChanged();
    partial void OnPageIdChanging(long value);
    partial void OnPageIdChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Revision()
		{
			this._Page = default(EntityRef<Page>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Contents", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Contents
		{
			get
			{
				return this._Contents;
			}
			set
			{
				if ((this._Contents != value))
				{
					this.OnContentsChanging(value);
					this.SendPropertyChanging();
					this._Contents = value;
					this.SendPropertyChanged("Contents");
					this.OnContentsChanged();
				}
			}
		}
		
		[Column(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Html", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Html
		{
			get
			{
				return this._Html;
			}
			set
			{
				if ((this._Html != value))
				{
					this.OnHtmlChanging(value);
					this.SendPropertyChanging();
					this._Html = value;
					this.SendPropertyChanged("Html");
					this.OnHtmlChanged();
				}
			}
		}
		
		[Column(Storage="_MainContentHtml", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string MainContentHtml
		{
			get
			{
				return this._MainContentHtml;
			}
			set
			{
				if ((this._MainContentHtml != value))
				{
					this.OnMainContentHtmlChanging(value);
					this.SendPropertyChanging();
					this._MainContentHtml = value;
					this.SendPropertyChanged("MainContentHtml");
					this.OnMainContentHtmlChanged();
				}
			}
		}
		
		[Column(Name="Page", Storage="_PageId", DbType="BigInt NOT NULL")]
		public long PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Association(Name="Page_Revision", Storage="_Page", ThisKey="PageId", OtherKey="Id", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.Revisions.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.Revisions.Add(this);
						this._PageId = value.Id;
					}
					else
					{
						this._PageId = default(long);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		[Association(Name="Tenant_Revision", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Revisions.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Revisions.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _TenantId;
		
		private EntitySet<AccountRoleMap> _AccountRoleMap;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public Role()
		{
			this._AccountRoleMap = new EntitySet<AccountRoleMap>(new Action<AccountRoleMap>(this.attach_AccountRoleMap), new Action<AccountRoleMap>(this.detach_AccountRoleMap));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Association(Name="Role_AccountRoleMap", Storage="_AccountRoleMap", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AccountRoleMap> AccountRoleMap
		{
			get
			{
				return this._AccountRoleMap;
			}
			set
			{
				this._AccountRoleMap.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Role", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountRoleMap(AccountRoleMap entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_AccountRoleMap(AccountRoleMap entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.Template")]
	public partial class Template : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Html;
		
		private string _Name;
		
		private string _Placeholders;
		
		private long _TenantId;
		
		private long _WebsiteId;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<TemplateControlMap> _TemplateControlMap;
		
		private EntityRef<Tenant> _Tenant;
		
		private EntityRef<Website> _Website;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnHtmlChanging(string value);
    partial void OnHtmlChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlaceholdersChanging(string value);
    partial void OnPlaceholdersChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnWebsiteIdChanging(long value);
    partial void OnWebsiteIdChanged();
    #endregion
		
		public Template()
		{
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._TemplateControlMap = new EntitySet<TemplateControlMap>(new Action<TemplateControlMap>(this.attach_TemplateControlMap), new Action<TemplateControlMap>(this.detach_TemplateControlMap));
			this._Tenant = default(EntityRef<Tenant>);
			this._Website = default(EntityRef<Website>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Html", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Html
		{
			get
			{
				return this._Html;
			}
			set
			{
				if ((this._Html != value))
				{
					this.OnHtmlChanging(value);
					this.SendPropertyChanging();
					this._Html = value;
					this.SendPropertyChanged("Html");
					this.OnHtmlChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Placeholders", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Placeholders
		{
			get
			{
				return this._Placeholders;
			}
			set
			{
				if ((this._Placeholders != value))
				{
					this.OnPlaceholdersChanging(value);
					this.SendPropertyChanging();
					this._Placeholders = value;
					this.SendPropertyChanged("Placeholders");
					this.OnPlaceholdersChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Name="Website", Storage="_WebsiteId", DbType="BigInt NOT NULL")]
		public long WebsiteId
		{
			get
			{
				return this._WebsiteId;
			}
			set
			{
				if ((this._WebsiteId != value))
				{
					this.OnWebsiteIdChanging(value);
					this.SendPropertyChanging();
					this._WebsiteId = value;
					this.SendPropertyChanged("WebsiteId");
					this.OnWebsiteIdChanged();
				}
			}
		}
		
		[Association(Name="Template_Page", Storage="_Pages", ThisKey="Id", OtherKey="DisplayTemplateId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="Template_TemplateControlMap", Storage="_TemplateControlMap", ThisKey="Id", OtherKey="TemplateId")]
		public EntitySet<TemplateControlMap> TemplateControlMap
		{
			get
			{
				return this._TemplateControlMap;
			}
			set
			{
				this._TemplateControlMap.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Template", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		[Association(Name="Website_Template", Storage="_Website", ThisKey="WebsiteId", OtherKey="Id", IsForeignKey=true)]
		public Website Website
		{
			get
			{
				return this._Website.Entity;
			}
			set
			{
				Website previousValue = this._Website.Entity;
				if (((previousValue != value) 
							|| (this._Website.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Website.Entity = null;
						previousValue.Templates.Remove(this);
					}
					this._Website.Entity = value;
					if ((value != null))
					{
						value.Templates.Add(this);
						this._WebsiteId = value.Id;
					}
					else
					{
						this._WebsiteId = default(long);
					}
					this.SendPropertyChanged("Website");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.DisplayTemplate = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.DisplayTemplate = null;
		}
		
		private void attach_TemplateControlMap(TemplateControlMap entity)
		{
			this.SendPropertyChanging();
			entity.Template = this;
		}
		
		private void detach_TemplateControlMap(TemplateControlMap entity)
		{
			this.SendPropertyChanging();
			entity.Template = null;
		}
	}
	
	[Table(Name="dbo.Tenant")]
	public partial class Tenant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Domain;
		
		private string _Logo;
		
		private string _Name;
		
		private string _Plan;
		
		private string _Timezone;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<File> _Files;
		
		private EntityRef<IssuesPortal> _IssuesPortal;
		
		private EntitySet<Meta> _Metas;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<Permission> _Permissions;
		
		private EntitySet<PermissionSet> _PermissionSets;
		
		private EntityRef<ProjectPortal> _ProjectPortal;
		
		private EntitySet<Revision> _Revisions;
		
		private EntitySet<Role> _Roles;
		
		private EntitySet<Template> _Templates;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Website> _Websites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPlanChanging(string value);
    partial void OnPlanChanged();
    partial void OnTimezoneChanging(string value);
    partial void OnTimezoneChanged();
    #endregion
		
		public Tenant()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			this._IssuesPortal = default(EntityRef<IssuesPortal>);
			this._Metas = new EntitySet<Meta>(new Action<Meta>(this.attach_Metas), new Action<Meta>(this.detach_Metas));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._PermissionSets = new EntitySet<PermissionSet>(new Action<PermissionSet>(this.attach_PermissionSets), new Action<PermissionSet>(this.detach_PermissionSets));
			this._ProjectPortal = default(EntityRef<ProjectPortal>);
			this._Revisions = new EntitySet<Revision>(new Action<Revision>(this.attach_Revisions), new Action<Revision>(this.detach_Revisions));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Websites = new EntitySet<Website>(new Action<Website>(this.attach_Websites), new Action<Website>(this.detach_Websites));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[Column(Storage="_Logo", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Plan", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Plan
		{
			get
			{
				return this._Plan;
			}
			set
			{
				if ((this._Plan != value))
				{
					this.OnPlanChanging(value);
					this.SendPropertyChanging();
					this._Plan = value;
					this.SendPropertyChanged("Plan");
					this.OnPlanChanged();
				}
			}
		}
		
		[Column(Storage="_Timezone", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Timezone
		{
			get
			{
				return this._Timezone;
			}
			set
			{
				if ((this._Timezone != value))
				{
					this.OnTimezoneChanging(value);
					this.SendPropertyChanging();
					this._Timezone = value;
					this.SendPropertyChanged("Timezone");
					this.OnTimezoneChanged();
				}
			}
		}
		
		[Association(Name="Tenant_Account", Storage="_Accounts", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Category", Storage="_Categories", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Comment", Storage="_Comments", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="Tenant_File", Storage="_Files", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		[Association(Name="Tenant_IssuesPortal", Storage="_IssuesPortal", ThisKey="Id", OtherKey="TenantId", IsUnique=true, IsForeignKey=false)]
		public IssuesPortal IssuesPortal
		{
			get
			{
				return this._IssuesPortal.Entity;
			}
			set
			{
				IssuesPortal previousValue = this._IssuesPortal.Entity;
				if (((previousValue != value) 
							|| (this._IssuesPortal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssuesPortal.Entity = null;
						previousValue.Tenant = null;
					}
					this._IssuesPortal.Entity = value;
					if ((value != null))
					{
						value.Tenant = this;
					}
					this.SendPropertyChanged("IssuesPortal");
				}
			}
		}
		
		[Association(Name="Tenant_Meta", Storage="_Metas", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Meta> Metas
		{
			get
			{
				return this._Metas;
			}
			set
			{
				this._Metas.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Page", Storage="_Pages", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Permission", Storage="_Permissions", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[Association(Name="Tenant_PermissionSet", Storage="_PermissionSets", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<PermissionSet> PermissionSets
		{
			get
			{
				return this._PermissionSets;
			}
			set
			{
				this._PermissionSets.Assign(value);
			}
		}
		
		[Association(Name="Tenant_ProjectPortal", Storage="_ProjectPortal", ThisKey="Id", OtherKey="TenantId", IsUnique=true, IsForeignKey=false)]
		public ProjectPortal ProjectPortal
		{
			get
			{
				return this._ProjectPortal.Entity;
			}
			set
			{
				ProjectPortal previousValue = this._ProjectPortal.Entity;
				if (((previousValue != value) 
							|| (this._ProjectPortal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectPortal.Entity = null;
						previousValue.Tenant = null;
					}
					this._ProjectPortal.Entity = value;
					if ((value != null))
					{
						value.Tenant = this;
					}
					this.SendPropertyChanged("ProjectPortal");
				}
			}
		}
		
		[Association(Name="Tenant_Revision", Storage="_Revisions", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Revision> Revisions
		{
			get
			{
				return this._Revisions;
			}
			set
			{
				this._Revisions.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Role", Storage="_Roles", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Template", Storage="_Templates", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		[Association(Name="Tenant_User", Storage="_Users", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Website", Storage="_Websites", ThisKey="Id", OtherKey="TenantId")]
		public EntitySet<Website> Websites
		{
			get
			{
				return this._Websites;
			}
			set
			{
				this._Websites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Metas(Meta entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Metas(Meta entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_PermissionSets(PermissionSet entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_PermissionSets(PermissionSet entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Revisions(Revision entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Revisions(Revision entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Websites(Website entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Websites(Website entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
	}
	
	[Table(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AccountId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private long _TenantId;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Page> _Pages;
		
		private EntityRef<Tenant> _Tenant;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    #endregion
		
		public User()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._Tenant = default(EntityRef<Tenant>);
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="Account", Storage="_AccountId", DbType="BigInt NOT NULL")]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Association(Name="User_Comment", Storage="_Comments", ThisKey="Id", OtherKey="AddedById")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[Association(Name="User_Page", Storage="_Pages", ThisKey="Id", OtherKey="AuthorId")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[Association(Name="Tenant_User", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		[Association(Name="Account_User", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.User = null;
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.User = this;
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.AddedBy = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.AddedBy = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Author = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Author = null;
		}
	}
	
	[Table(Name="dbo.Website")]
	public partial class Website : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Domain;
		
		private string _Name;
		
		private string _Path;
		
		private long _TenantId;
		
		private string _Title;
		
		private string _Type;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Meta> _Meta;
		
		private EntitySet<Template> _Templates;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnTenantIdChanging(long value);
    partial void OnTenantIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Website()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Meta = new EntitySet<Meta>(new Action<Meta>(this.attach_Meta), new Action<Meta>(this.detach_Meta));
			this._Templates = new EntitySet<Template>(new Action<Template>(this.attach_Templates), new Action<Template>(this.detach_Templates));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Domain", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Name="Tenant", Storage="_TenantId", DbType="BigInt NOT NULL")]
		public long TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Association(Name="Website_Category", Storage="_Categories", ThisKey="Id", OtherKey="WebsiteId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[Association(Name="Website_Meta", Storage="_Meta", ThisKey="Id", OtherKey="WebsiteId")]
		public EntitySet<Meta> Meta
		{
			get
			{
				return this._Meta;
			}
			set
			{
				this._Meta.Assign(value);
			}
		}
		
		[Association(Name="Website_Template", Storage="_Templates", ThisKey="Id", OtherKey="WebsiteId")]
		public EntitySet<Template> Templates
		{
			get
			{
				return this._Templates;
			}
			set
			{
				this._Templates.Assign(value);
			}
		}
		
		[Association(Name="Tenant_Website", Storage="_Tenant", ThisKey="TenantId", OtherKey="Id", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Websites.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Websites.Add(this);
						this._TenantId = value.Id;
					}
					else
					{
						this._TenantId = default(long);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Website = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.Website = null;
		}
		
		private void attach_Meta(Meta entity)
		{
			this.SendPropertyChanging();
			entity.Website = this;
		}
		
		private void detach_Meta(Meta entity)
		{
			this.SendPropertyChanging();
			entity.Website = null;
		}
		
		private void attach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Website = this;
		}
		
		private void detach_Templates(Template entity)
		{
			this.SendPropertyChanging();
			entity.Website = null;
		}
	}
	
	[Table(Name="dbo.AccountRoleMap")]
	public partial class AccountRoleMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AccountId;
		
		private long _RoleId;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(long value);
    partial void OnAccountIdChanged();
    partial void OnRoleIdChanging(long value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AccountRoleMap()
		{
			this._Account = default(EntityRef<Account>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[Column(Name="Account", Storage="_AccountId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[Column(Name="Role", Storage="_RoleId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="Account_AccountRoleMap", Storage="_Account", ThisKey="AccountId", OtherKey="Id", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountRoleMap.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountRoleMap.Add(this);
						this._AccountId = value.Id;
					}
					else
					{
						this._AccountId = default(long);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[Association(Name="Role_AccountRoleMap", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.AccountRoleMap.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.AccountRoleMap.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(long);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TemplateControlMap")]
	public partial class TemplateControlMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ControlId;
		
		private long _TemplateId;
		
		private EntityRef<Control> _Control;
		
		private EntityRef<Template> _Template;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControlIdChanging(long value);
    partial void OnControlIdChanged();
    partial void OnTemplateIdChanging(long value);
    partial void OnTemplateIdChanged();
    #endregion
		
		public TemplateControlMap()
		{
			this._Control = default(EntityRef<Control>);
			this._Template = default(EntityRef<Template>);
			OnCreated();
		}
		
		[Column(Name="Control", Storage="_ControlId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[Column(Name="Template", Storage="_TemplateId", DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true)]
		public long TemplateId
		{
			get
			{
				return this._TemplateId;
			}
			set
			{
				if ((this._TemplateId != value))
				{
					this.OnTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateId = value;
					this.SendPropertyChanged("TemplateId");
					this.OnTemplateIdChanged();
				}
			}
		}
		
		[Association(Name="Control_TemplateControlMap", Storage="_Control", ThisKey="ControlId", OtherKey="Id", IsForeignKey=true)]
		public Control Control
		{
			get
			{
				return this._Control.Entity;
			}
			set
			{
				Control previousValue = this._Control.Entity;
				if (((previousValue != value) 
							|| (this._Control.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Control.Entity = null;
						previousValue.TemplateControlMap.Remove(this);
					}
					this._Control.Entity = value;
					if ((value != null))
					{
						value.TemplateControlMap.Add(this);
						this._ControlId = value.Id;
					}
					else
					{
						this._ControlId = default(long);
					}
					this.SendPropertyChanged("Control");
				}
			}
		}
		
		[Association(Name="Template_TemplateControlMap", Storage="_Template", ThisKey="TemplateId", OtherKey="Id", IsForeignKey=true)]
		public Template Template
		{
			get
			{
				return this._Template.Entity;
			}
			set
			{
				Template previousValue = this._Template.Entity;
				if (((previousValue != value) 
							|| (this._Template.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Template.Entity = null;
						previousValue.TemplateControlMap.Remove(this);
					}
					this._Template.Entity = value;
					if ((value != null))
					{
						value.TemplateControlMap.Add(this);
						this._TemplateId = value.Id;
					}
					else
					{
						this._TemplateId = default(long);
					}
					this.SendPropertyChanged("Template");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
