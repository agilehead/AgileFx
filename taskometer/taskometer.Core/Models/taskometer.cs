//This code was auto-generated by AgileFx Modeler.
//Changes to this file will be lost if the file is regenerated.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Text;

using AgileFx.ORM;
using AgileFx.ORM.ObjectComposition;
using AgileFx.ORM.Mapping;
using AgileFx.ORM.Utils;
using AgileFx.ORM.Backends.LinqToSql;

using projectNS = taskometer.Core.Models;
using intermediateNS = taskometer.Core.Models.Intermediate;
using L2SNS = taskometer.Core.Models.L2S;
using pocoNS = taskometer.Core.Models.POCO;

namespace taskometer.Core.Models
{
    public class Entities : L2SDataContext
    {
		public Entities()
		{
			this.useDefaultConnectionString = true;
		}
		
		public Entities(string connectionString)
		{
			this.useDefaultConnectionString = false;
			this.connectionString = connectionString;
		}
	
        public override System.Data.Linq.DataContext GetLinqToSqlDataContext()
        {
			if (useDefaultConnectionString)
            	return new L2SNS.TaskometerDb_LinqToSqlDataContext();
			else
				return new L2SNS.TaskometerDb_LinqToSqlDataContext(this.connectionString);
        }
		
		public override EntityContext CreateNew()
		{
			if (useDefaultConnectionString)
            	return new Entities();
			else
				return new Entities(this.connectionString);
		}
		
		public IQueryable<Account> Account { get { return this.CreateQuery<Account>(); } }
		public IQueryable<Category> Category { get { return this.CreateQuery<Category>(); } }
		public IQueryable<Comment> Comment { get { return this.CreateQuery<Comment>(); } }
		public IQueryable<Control> Control { get { return this.CreateQuery<Control>(); } }
		public IQueryable<File> File { get { return this.CreateQuery<File>(); } }
		public IQueryable<IssuesPortal> IssuesPortal { get { return this.CreateQuery<IssuesPortal>(); } }
		public IQueryable<Meta> Meta { get { return this.CreateQuery<Meta>(); } }
		public IQueryable<Page> Page { get { return this.CreateQuery<Page>(); } }
		public IQueryable<Permission> Permission { get { return this.CreateQuery<Permission>(); } }
		public IQueryable<PermissionSet> PermissionSet { get { return this.CreateQuery<PermissionSet>(); } }
		public IQueryable<ProjectPortal> ProjectPortal { get { return this.CreateQuery<ProjectPortal>(); } }
		public IQueryable<Revision> Revision { get { return this.CreateQuery<Revision>(); } }
		public IQueryable<Role> Role { get { return this.CreateQuery<Role>(); } }
		public IQueryable<Template> Template { get { return this.CreateQuery<Template>(); } }
		public IQueryable<Tenant> Tenant { get { return this.CreateQuery<Tenant>(); } }
		public IQueryable<User> User { get { return this.CreateQuery<User>(); } }
		public IQueryable<Website> Website { get { return this.CreateQuery<Website>(); } }
  }
}
	
namespace taskometer.Core.Models
{
	public class AccountMapping : ModelEntityMapping<projectNS.Account, intermediateNS.Account, L2SNS.Account>
	{
		public AccountMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Role, AccountRoleMap>(e => e.Roles, map => map.Account, map => map.Role);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Accounts);
			AddRelationship<projectNS.User>(e => e.User, e => e.Account);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(AccountMapping))]
	public partial class Account : EntityBase, IModelEntity<intermediateNS.Account>	
	{
		private intermediateNS.Account __intermediateEntity;
		public intermediateNS.Account _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Account intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual DateTime DateCreated 
		{	
			get { return _intermediateEntity.DateCreated; }
			set { _intermediateEntity.DateCreated = value; }
		}
		public virtual DateTime DateLastLogin 
		{	
			get { return _intermediateEntity.DateLastLogin; }
			set { _intermediateEntity.DateLastLogin = value; }
		}
		public virtual string Password 
		{	
			get { return _intermediateEntity.Password; }
			set { _intermediateEntity.Password = value; }
		}
		public virtual string Provider 
		{	
			get { return _intermediateEntity.Provider; }
			set { _intermediateEntity.Provider = value; }
		}
		public virtual string ProviderType 
		{	
			get { return _intermediateEntity.ProviderType; }
			set { _intermediateEntity.ProviderType = value; }
		}
		public virtual string Status 
		{	
			get { return _intermediateEntity.Status; }
			set { _intermediateEntity.Status = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual string Username 
		{	
			get { return _intermediateEntity.Username; }
			set { _intermediateEntity.Username = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Role> Roles 
		{	
			get { return _intermediateEntity.Roles.EntityCollection; }
		}		
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public User User 
		{	
			get { return _intermediateEntity.User.GetEntity(); }
			set { if (value != null) _intermediateEntity.User = value._intermediateEntity; else _intermediateEntity.User = null; }
		}
		public Account() : this(new intermediateNS.Account())
		{
		}
			
		public Account(intermediateNS.Account intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Account(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Account(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Account, pocoNS.Account>(info);
		}

		public static bool operator ==(Account a, Account b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Account a, Account b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Account)this)._equals(obj as Account);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Account ToPOCO()
		{
			return this.CreatePOCO<Account, pocoNS.Account>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Account : IPOCO<projectNS.Account>	{


		public long Id { get; set; }
		public DateTime DateCreated { get; set; }
		public DateTime DateLastLogin { get; set; }
		public string Password { get; set; }
		public string Provider { get; set; }
		public string ProviderType { get; set; }
		public string Status { get; set; }
		public long TenantId { get; set; }
		public string Username { get; set; }
		public POCOCollection Roles { get; set; }

		public POCOReference Tenant { get; set; }

		public POCOReference User { get; set; }

			
		public Account()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Account : IntermediateEntity<projectNS.Account, L2SNS.Account>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime> _dateCreated;
		public DateTime DateCreated 
		{	
			get { return _dateCreated.Value; }
			set { _dateCreated.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime> _dateLastLogin;
		public DateTime DateLastLogin 
		{	
			get { return _dateLastLogin.Value; }
			set { _dateLastLogin.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _password;
		public string Password 
		{	
			get { return _password.Value; }
			set { _password.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _provider;
		public string Provider 
		{	
			get { return _provider.Value; }
			set { _provider.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _providerType;
		public string ProviderType 
		{	
			get { return _providerType.Value; }
			set { _providerType.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _status;
		public string Status 
		{	
			get { return _status.Value; }
			set { _status.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string> _username;
		public string Username 
		{	
			get { return _username.Value; }
			set { _username.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Account, projectNS.Role, projectNS.AccountRoleMap, intermediateNS.Account, intermediateNS.Role, intermediateNS.AccountRoleMap, L2SNS.Account, L2SNS.Role, L2SNS.AccountRoleMap> _roles;
		public IntermediateManyToManyCollection<projectNS.Account, projectNS.Role, projectNS.AccountRoleMap, intermediateNS.Account, intermediateNS.Role, intermediateNS.AccountRoleMap, L2SNS.Account, L2SNS.Role, L2SNS.AccountRoleMap> Roles 
		{	
			get { return _roles; }		
		}
		public IntermediateEntityReference<projectNS.Account, projectNS.Tenant, intermediateNS.Account, intermediateNS.Tenant, L2SNS.Account, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Account, projectNS.User, intermediateNS.Account, intermediateNS.User, L2SNS.Account, L2SNS.User> _user;
		public intermediateNS.User User
		{	
			get { return _user.Value; }
			set { _user.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Account()
		{
			__tableEntity = new L2SNS.Account();
			initFields();
		}
		
		public Account(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Account();
			initFields();
			
			this.Deserialize<projectNS.Account, Account, pocoNS.Account>(info);
			
		}
			
		public Account(L2SNS.Account tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long>(this, t => t.Id, (t, val) => t.Id = val);
			_dateCreated = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime>(this, t => t.DateCreated, (t, val) => t.DateCreated = val);
			_dateLastLogin = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, DateTime>(this, t => t.DateLastLogin, (t, val) => t.DateLastLogin = val);
			_password = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Password, (t, val) => t.Password = val);
			_provider = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Provider, (t, val) => t.Provider = val);
			_providerType = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.ProviderType, (t, val) => t.ProviderType = val);
			_status = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Status, (t, val) => t.Status = val);
			_tenantId = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_username = new EntityField<projectNS.Account, intermediateNS.Account, L2SNS.Account, string>(this, t => t.Username, (t, val) => t.Username = val);
			_roles = new IntermediateManyToManyCollection<projectNS.Account, projectNS.Role, projectNS.AccountRoleMap, intermediateNS.Account, intermediateNS.Role, intermediateNS.AccountRoleMap, L2SNS.Account, L2SNS.Role, L2SNS.AccountRoleMap>(this, __map => __map.Account, __map => __map.Role, (__map, __a) => __map.Account = __a, (__map, __role) => __map.Role = __role, __role => __role._accounts);
			_tenant = new IntermediateEntityReference<projectNS.Account, projectNS.Tenant, intermediateNS.Account, intermediateNS.Tenant, L2SNS.Account, L2SNS.Tenant>(this, __a => __a.Tenant, (__a, __tenant) => __a.Tenant = __tenant, __tenant => __tenant._accounts, false);
			_user = new IntermediateEntityReference<projectNS.Account, projectNS.User, intermediateNS.Account, intermediateNS.User, L2SNS.Account, L2SNS.User>(this, __a => __a.User, (__a, __user) => __a.User = __user, __user => __user._account, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Roles":
					return Roles.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
				case "User":
                	return _user.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Account : ITableEntity<intermediateNS.Account>
	{
        public intermediateNS.Account _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Account;
		}
	}
}

namespace taskometer.Core.Models
{
	public class CategoryMapping : ModelEntityMapping<projectNS.Category, intermediateNS.Category, L2SNS.Category>
	{
		public CategoryMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.PermissionSet>(e => e.PermissionSet, e => e.Category);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Categories);
			AddRelationship<projectNS.Website>(e => e.Website, e => e.Categories);
			AddRelationship<projectNS.Page>(e => e.Pages, e => e.Category);
			AddRelationship<projectNS.Category>(e => e.ChildCategories, e => e.Parent);
			AddRelationship<projectNS.Category>(e => e.Parent, e => e.ChildCategories);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(CategoryMapping))]
	public partial class Category : EntityBase, IModelEntity<intermediateNS.Category>	
	{
		private intermediateNS.Category __intermediateEntity;
		public intermediateNS.Category _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Category intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual bool IsRoot 
		{	
			get { return _intermediateEntity.IsRoot; }
			set { _intermediateEntity.IsRoot = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual long? ParentId 
		{	
			get { return _intermediateEntity.ParentId; }
			set { _intermediateEntity.ParentId = value; }
		}
		public virtual long PermissionSetId 
		{	
			get { return _intermediateEntity.PermissionSetId; }
			set { _intermediateEntity.PermissionSetId = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual string UniquePath 
		{	
			get { return _intermediateEntity.UniquePath; }
			set { _intermediateEntity.UniquePath = value; }
		}
		public virtual string UrlAlias 
		{	
			get { return _intermediateEntity.UrlAlias; }
			set { _intermediateEntity.UrlAlias = value; }
		}
		public virtual long WebsiteId 
		{	
			get { return _intermediateEntity.WebsiteId; }
			set { _intermediateEntity.WebsiteId = value; }
		}
		public virtual string DefaultPage 
		{	
			get { return _intermediateEntity.DefaultPage; }
			set { _intermediateEntity.DefaultPage = value; }
		}
			
		//Navigation Properties
		public PermissionSet PermissionSet 
		{	
			get { return _intermediateEntity.PermissionSet.GetEntity(); }
			set { if (value != null) _intermediateEntity.PermissionSet = value._intermediateEntity; else _intermediateEntity.PermissionSet = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Website Website 
		{	
			get { return _intermediateEntity.Website.GetEntity(); }
			set { if (value != null) _intermediateEntity.Website = value._intermediateEntity; else _intermediateEntity.Website = null; }
		}
		public ICollection<projectNS.Page> Pages 
		{	
			get { return _intermediateEntity.Pages.EntityCollection; }
		}		
		public ICollection<projectNS.Category> ChildCategories 
		{	
			get { return _intermediateEntity.ChildCategories.EntityCollection; }
		}		
		public Category Parent 
		{	
			get { return _intermediateEntity.Parent.GetEntity(); }
			set { if (value != null) _intermediateEntity.Parent = value._intermediateEntity; else _intermediateEntity.Parent = null; }
		}
		public Category() : this(new intermediateNS.Category())
		{
		}
			
		public Category(intermediateNS.Category intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Category(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Category(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Category, pocoNS.Category>(info);
		}

		public static bool operator ==(Category a, Category b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Category a, Category b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Category)this)._equals(obj as Category);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Category ToPOCO()
		{
			return this.CreatePOCO<Category, pocoNS.Category>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Category : IPOCO<projectNS.Category>	{


		public long Id { get; set; }
		public bool IsRoot { get; set; }
		public string Name { get; set; }
		public long? ParentId { get; set; }
		public long PermissionSetId { get; set; }
		public long TenantId { get; set; }
		public string UniquePath { get; set; }
		public string UrlAlias { get; set; }
		public long WebsiteId { get; set; }
		public string DefaultPage { get; set; }
		public POCOReference PermissionSet { get; set; }

		public POCOReference Tenant { get; set; }

		public POCOReference Website { get; set; }

		public POCOCollection Pages { get; set; }

		public POCOCollection ChildCategories { get; set; }

		public POCOReference Parent { get; set; }

			
		public Category()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Category : IntermediateEntity<projectNS.Category, L2SNS.Category>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, bool> _isRoot;
		public bool IsRoot 
		{	
			get { return _isRoot.Value; }
			set { _isRoot.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long?> _parentId;
		public long? ParentId 
		{	
			get { return _parentId.Value; }
			set { _parentId.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long> _permissionSetId;
		public long PermissionSetId 
		{	
			get { return _permissionSetId.Value; }
			set { _permissionSetId.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string> _uniquePath;
		public string UniquePath 
		{	
			get { return _uniquePath.Value; }
			set { _uniquePath.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string> _urlAlias;
		public string UrlAlias 
		{	
			get { return _urlAlias.Value; }
			set { _urlAlias.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long> _websiteId;
		public long WebsiteId 
		{	
			get { return _websiteId.Value; }
			set { _websiteId.Value = value; }
		}
		public EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string> _defaultPage;
		public string DefaultPage 
		{	
			get { return _defaultPage.Value; }
			set { _defaultPage.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Category, projectNS.PermissionSet, intermediateNS.Category, intermediateNS.PermissionSet, L2SNS.Category, L2SNS.PermissionSet> _permissionSet;
		public intermediateNS.PermissionSet PermissionSet
		{	
			get { return _permissionSet.Value; }
			set { _permissionSet.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Category, projectNS.Tenant, intermediateNS.Category, intermediateNS.Tenant, L2SNS.Category, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Category, projectNS.Website, intermediateNS.Category, intermediateNS.Website, L2SNS.Category, L2SNS.Website> _website;
		public intermediateNS.Website Website
		{	
			get { return _website.Value; }
			set { _website.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.Category, projectNS.Page, intermediateNS.Category, intermediateNS.Page, L2SNS.Category, L2SNS.Page> _pages;
		public IntermediateEntityCollection<projectNS.Category, projectNS.Page, intermediateNS.Category, intermediateNS.Page, L2SNS.Category, L2SNS.Page> Pages 
		{	
			get { return _pages; }		
		}				
		public IntermediateEntityCollection<projectNS.Category, projectNS.Category, intermediateNS.Category, intermediateNS.Category, L2SNS.Category, L2SNS.Category> _childCategories;
		public IntermediateEntityCollection<projectNS.Category, projectNS.Category, intermediateNS.Category, intermediateNS.Category, L2SNS.Category, L2SNS.Category> ChildCategories 
		{	
			get { return _childCategories; }		
		}				
		public IntermediateEntityReference<projectNS.Category, projectNS.Category, intermediateNS.Category, intermediateNS.Category, L2SNS.Category, L2SNS.Category> _parent;
		public intermediateNS.Category Parent
		{	
			get { return _parent.Value; }
			set { _parent.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Category()
		{
			__tableEntity = new L2SNS.Category();
			initFields();
		}
		
		public Category(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Category();
			initFields();
			
			this.Deserialize<projectNS.Category, Category, pocoNS.Category>(info);
			
		}
			
		public Category(L2SNS.Category tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long>(this, t => t.Id, (t, val) => t.Id = val);
			_isRoot = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, bool>(this, t => t.IsRoot, (t, val) => t.IsRoot = val);
			_name = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string>(this, t => t.Name, (t, val) => t.Name = val);
			_parentId = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long?>(this, t => t.ParentId, (t, val) => t.ParentId = val);
			_permissionSetId = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long>(this, t => t.PermissionSetId, (t, val) => t.PermissionSetId = val);
			_tenantId = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_uniquePath = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string>(this, t => t.UniquePath, (t, val) => t.UniquePath = val);
			_urlAlias = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string>(this, t => t.UrlAlias, (t, val) => t.UrlAlias = val);
			_websiteId = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, long>(this, t => t.WebsiteId, (t, val) => t.WebsiteId = val);
			_defaultPage = new EntityField<projectNS.Category, intermediateNS.Category, L2SNS.Category, string>(this, t => t.DefaultPage, (t, val) => t.DefaultPage = val);
			_permissionSet = new IntermediateEntityReference<projectNS.Category, projectNS.PermissionSet, intermediateNS.Category, intermediateNS.PermissionSet, L2SNS.Category, L2SNS.PermissionSet>(this, __c => __c.PermissionSet, (__c, __permissionset) => __c.PermissionSet = __permissionset, __permissionset => __permissionset._category, false);
			_tenant = new IntermediateEntityReference<projectNS.Category, projectNS.Tenant, intermediateNS.Category, intermediateNS.Tenant, L2SNS.Category, L2SNS.Tenant>(this, __c => __c.Tenant, (__c, __tenant) => __c.Tenant = __tenant, __tenant => __tenant._categories, false);
			_website = new IntermediateEntityReference<projectNS.Category, projectNS.Website, intermediateNS.Category, intermediateNS.Website, L2SNS.Category, L2SNS.Website>(this, __c => __c.Website, (__c, __website) => __c.Website = __website, __website => __website._categories, false);
			_pages = new IntermediateEntityCollection<projectNS.Category, projectNS.Page, intermediateNS.Category, intermediateNS.Page, L2SNS.Category, L2SNS.Page>(this, __page => __page._category);
			_childCategories = new IntermediateEntityCollection<projectNS.Category, projectNS.Category, intermediateNS.Category, intermediateNS.Category, L2SNS.Category, L2SNS.Category>(this, __category => __category._parent);
			_parent = new IntermediateEntityReference<projectNS.Category, projectNS.Category, intermediateNS.Category, intermediateNS.Category, L2SNS.Category, L2SNS.Category>(this, __c => __c.Parent, (__c, __category) => __c.Parent = __category, __category => __category._childCategories, true);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "PermissionSet":
                	return _permissionSet.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
				case "Website":
                	return _website.IsLoaded;
				case "Pages":
					return Pages.IsLoaded;
				case "ChildCategories":
					return ChildCategories.IsLoaded;
				case "Parent":
                	return _parent.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Category : ITableEntity<intermediateNS.Category>
	{
        public intermediateNS.Category _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Category;
		}
	}
}

namespace taskometer.Core.Models
{
	public class CommentMapping : ModelEntityMapping<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment>
	{
		public CommentMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Page>(e => e.Page, e => e.Comments);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Comments);
			AddRelationship<projectNS.User>(e => e.AddedBy, e => e.Comments);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(CommentMapping))]
	public partial class Comment : EntityBase, IModelEntity<intermediateNS.Comment>	
	{
		private intermediateNS.Comment __intermediateEntity;
		public intermediateNS.Comment _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Comment intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long? AddedById 
		{	
			get { return _intermediateEntity.AddedById; }
			set { _intermediateEntity.AddedById = value; }
		}
		public virtual string AddedByDisplayName 
		{	
			get { return _intermediateEntity.AddedByDisplayName; }
			set { _intermediateEntity.AddedByDisplayName = value; }
		}
		public virtual string AddedByEmail 
		{	
			get { return _intermediateEntity.AddedByEmail; }
			set { _intermediateEntity.AddedByEmail = value; }
		}
		public virtual string AddedByWebsite 
		{	
			get { return _intermediateEntity.AddedByWebsite; }
			set { _intermediateEntity.AddedByWebsite = value; }
		}
		public virtual DateTime AddedOn 
		{	
			get { return _intermediateEntity.AddedOn; }
			set { _intermediateEntity.AddedOn = value; }
		}
		public virtual string Body 
		{	
			get { return _intermediateEntity.Body; }
			set { _intermediateEntity.Body = value; }
		}
		public virtual bool IsApproved 
		{	
			get { return _intermediateEntity.IsApproved; }
			set { _intermediateEntity.IsApproved = value; }
		}
		public virtual long PageId 
		{	
			get { return _intermediateEntity.PageId; }
			set { _intermediateEntity.PageId = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual string IPAddress 
		{	
			get { return _intermediateEntity.IPAddress; }
			set { _intermediateEntity.IPAddress = value; }
		}
			
		//Navigation Properties
		public Page Page 
		{	
			get { return _intermediateEntity.Page.GetEntity(); }
			set { if (value != null) _intermediateEntity.Page = value._intermediateEntity; else _intermediateEntity.Page = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public User AddedBy 
		{	
			get { return _intermediateEntity.AddedBy.GetEntity(); }
			set { if (value != null) _intermediateEntity.AddedBy = value._intermediateEntity; else _intermediateEntity.AddedBy = null; }
		}
		public Comment() : this(new intermediateNS.Comment())
		{
		}
			
		public Comment(intermediateNS.Comment intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Comment(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Comment(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Comment, pocoNS.Comment>(info);
		}

		public static bool operator ==(Comment a, Comment b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Comment a, Comment b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Comment)this)._equals(obj as Comment);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Comment ToPOCO()
		{
			return this.CreatePOCO<Comment, pocoNS.Comment>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Comment : IPOCO<projectNS.Comment>	{


		public long Id { get; set; }
		public long? AddedById { get; set; }
		public string AddedByDisplayName { get; set; }
		public string AddedByEmail { get; set; }
		public string AddedByWebsite { get; set; }
		public DateTime AddedOn { get; set; }
		public string Body { get; set; }
		public bool IsApproved { get; set; }
		public long PageId { get; set; }
		public long TenantId { get; set; }
		public string IPAddress { get; set; }
		public POCOReference Page { get; set; }

		public POCOReference Tenant { get; set; }

		public POCOReference AddedBy { get; set; }

			
		public Comment()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Comment : IntermediateEntity<projectNS.Comment, L2SNS.Comment>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long?> _addedById;
		public long? AddedById 
		{	
			get { return _addedById.Value; }
			set { _addedById.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string> _addedByDisplayName;
		public string AddedByDisplayName 
		{	
			get { return _addedByDisplayName.Value; }
			set { _addedByDisplayName.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string> _addedByEmail;
		public string AddedByEmail 
		{	
			get { return _addedByEmail.Value; }
			set { _addedByEmail.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string> _addedByWebsite;
		public string AddedByWebsite 
		{	
			get { return _addedByWebsite.Value; }
			set { _addedByWebsite.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, DateTime> _addedOn;
		public DateTime AddedOn 
		{	
			get { return _addedOn.Value; }
			set { _addedOn.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string> _body;
		public string Body 
		{	
			get { return _body.Value; }
			set { _body.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, bool> _isApproved;
		public bool IsApproved 
		{	
			get { return _isApproved.Value; }
			set { _isApproved.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long> _pageId;
		public long PageId 
		{	
			get { return _pageId.Value; }
			set { _pageId.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string> _iPAddress;
		public string IPAddress 
		{	
			get { return _iPAddress.Value; }
			set { _iPAddress.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Comment, projectNS.Page, intermediateNS.Comment, intermediateNS.Page, L2SNS.Comment, L2SNS.Page> _page;
		public intermediateNS.Page Page
		{	
			get { return _page.Value; }
			set { _page.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Comment, projectNS.Tenant, intermediateNS.Comment, intermediateNS.Tenant, L2SNS.Comment, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Comment, projectNS.User, intermediateNS.Comment, intermediateNS.User, L2SNS.Comment, L2SNS.User> _addedBy;
		public intermediateNS.User AddedBy
		{	
			get { return _addedBy.Value; }
			set { _addedBy.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Comment()
		{
			__tableEntity = new L2SNS.Comment();
			initFields();
		}
		
		public Comment(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Comment();
			initFields();
			
			this.Deserialize<projectNS.Comment, Comment, pocoNS.Comment>(info);
			
		}
			
		public Comment(L2SNS.Comment tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long>(this, t => t.Id, (t, val) => t.Id = val);
			_addedById = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long?>(this, t => t.AddedById, (t, val) => t.AddedById = val);
			_addedByDisplayName = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string>(this, t => t.AddedByDisplayName, (t, val) => t.AddedByDisplayName = val);
			_addedByEmail = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string>(this, t => t.AddedByEmail, (t, val) => t.AddedByEmail = val);
			_addedByWebsite = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string>(this, t => t.AddedByWebsite, (t, val) => t.AddedByWebsite = val);
			_addedOn = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, DateTime>(this, t => t.AddedOn, (t, val) => t.AddedOn = val);
			_body = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string>(this, t => t.Body, (t, val) => t.Body = val);
			_isApproved = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, bool>(this, t => t.IsApproved, (t, val) => t.IsApproved = val);
			_pageId = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long>(this, t => t.PageId, (t, val) => t.PageId = val);
			_tenantId = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_iPAddress = new EntityField<projectNS.Comment, intermediateNS.Comment, L2SNS.Comment, string>(this, t => t.IPAddress, (t, val) => t.IPAddress = val);
			_page = new IntermediateEntityReference<projectNS.Comment, projectNS.Page, intermediateNS.Comment, intermediateNS.Page, L2SNS.Comment, L2SNS.Page>(this, __c => __c.Page, (__c, __page) => __c.Page = __page, __page => __page._comments, false);
			_tenant = new IntermediateEntityReference<projectNS.Comment, projectNS.Tenant, intermediateNS.Comment, intermediateNS.Tenant, L2SNS.Comment, L2SNS.Tenant>(this, __c => __c.Tenant, (__c, __tenant) => __c.Tenant = __tenant, __tenant => __tenant._comments, false);
			_addedBy = new IntermediateEntityReference<projectNS.Comment, projectNS.User, intermediateNS.Comment, intermediateNS.User, L2SNS.Comment, L2SNS.User>(this, __c => __c.AddedBy, (__c, __user) => __c.AddedBy = __user, __user => __user._comments, true);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Page":
                	return _page.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
				case "AddedBy":
                	return _addedBy.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Comment : ITableEntity<intermediateNS.Comment>
	{
        public intermediateNS.Comment _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Comment;
		}
	}
}

namespace taskometer.Core.Models
{
	public class ControlMapping : ModelEntityMapping<projectNS.Control, intermediateNS.Control, L2SNS.Control>
	{
		public ControlMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Template, TemplateControlMap>(e => e.Templates, map => map.Control, map => map.Template);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(ControlMapping))]
	public partial class Control : EntityBase, IModelEntity<intermediateNS.Control>	
	{
		private intermediateNS.Control __intermediateEntity;
		public intermediateNS.Control _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Control intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
		public virtual string VirtualPath 
		{	
			get { return _intermediateEntity.VirtualPath; }
			set { _intermediateEntity.VirtualPath = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Template> Templates 
		{	
			get { return _intermediateEntity.Templates.EntityCollection; }
		}		
		public Control() : this(new intermediateNS.Control())
		{
		}
			
		public Control(intermediateNS.Control intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Control(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Control(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Control, pocoNS.Control>(info);
		}

		public static bool operator ==(Control a, Control b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Control a, Control b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Control)this)._equals(obj as Control);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Control ToPOCO()
		{
			return this.CreatePOCO<Control, pocoNS.Control>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Control : IPOCO<projectNS.Control>	{


		public long Id { get; set; }
		public string Name { get; set; }
		public string Type { get; set; }
		public string VirtualPath { get; set; }
		public POCOCollection Templates { get; set; }

			
		public Control()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Control : IntermediateEntity<projectNS.Control, L2SNS.Control>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Control, intermediateNS.Control, L2SNS.Control, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Control, intermediateNS.Control, L2SNS.Control, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Control, intermediateNS.Control, L2SNS.Control, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}
		public EntityField<projectNS.Control, intermediateNS.Control, L2SNS.Control, string> _virtualPath;
		public string VirtualPath 
		{	
			get { return _virtualPath.Value; }
			set { _virtualPath.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Control, projectNS.Template, projectNS.TemplateControlMap, intermediateNS.Control, intermediateNS.Template, intermediateNS.TemplateControlMap, L2SNS.Control, L2SNS.Template, L2SNS.TemplateControlMap> _templates;
		public IntermediateManyToManyCollection<projectNS.Control, projectNS.Template, projectNS.TemplateControlMap, intermediateNS.Control, intermediateNS.Template, intermediateNS.TemplateControlMap, L2SNS.Control, L2SNS.Template, L2SNS.TemplateControlMap> Templates 
		{	
			get { return _templates; }		
		}
		
		//Inherited Navigation Properties
						
		public Control()
		{
			__tableEntity = new L2SNS.Control();
			initFields();
		}
		
		public Control(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Control();
			initFields();
			
			this.Deserialize<projectNS.Control, Control, pocoNS.Control>(info);
			
		}
			
		public Control(L2SNS.Control tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Control, intermediateNS.Control, L2SNS.Control, long>(this, t => t.Id, (t, val) => t.Id = val);
			_name = new EntityField<projectNS.Control, intermediateNS.Control, L2SNS.Control, string>(this, t => t.Name, (t, val) => t.Name = val);
			_type = new EntityField<projectNS.Control, intermediateNS.Control, L2SNS.Control, string>(this, t => t.Type, (t, val) => t.Type = val);
			_virtualPath = new EntityField<projectNS.Control, intermediateNS.Control, L2SNS.Control, string>(this, t => t.VirtualPath, (t, val) => t.VirtualPath = val);
			_templates = new IntermediateManyToManyCollection<projectNS.Control, projectNS.Template, projectNS.TemplateControlMap, intermediateNS.Control, intermediateNS.Template, intermediateNS.TemplateControlMap, L2SNS.Control, L2SNS.Template, L2SNS.TemplateControlMap>(this, __map => __map.Control, __map => __map.Template, (__map, __c) => __map.Control = __c, (__map, __template) => __map.Template = __template, __template => __template._controls);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Templates":
					return Templates.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Control : ITableEntity<intermediateNS.Control>
	{
        public intermediateNS.Control _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Control;
		}
	}
}

namespace taskometer.Core.Models
{
	public class FileMapping : ModelEntityMapping<projectNS.File, intermediateNS.File, L2SNS.File>
	{
		public FileMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.PermissionSet>(e => e.PermissionSet, e => e.File);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Files);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(FileMapping))]
	public partial class File : EntityBase, IModelEntity<intermediateNS.File>	
	{
		private intermediateNS.File __intermediateEntity;
		public intermediateNS.File _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.File intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Filename 
		{	
			get { return _intermediateEntity.Filename; }
			set { _intermediateEntity.Filename = value; }
		}
		public virtual long PermissionSetId 
		{	
			get { return _intermediateEntity.PermissionSetId; }
			set { _intermediateEntity.PermissionSetId = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual string Title 
		{	
			get { return _intermediateEntity.Title; }
			set { _intermediateEntity.Title = value; }
		}
			
		//Navigation Properties
		public PermissionSet PermissionSet 
		{	
			get { return _intermediateEntity.PermissionSet.GetEntity(); }
			set { if (value != null) _intermediateEntity.PermissionSet = value._intermediateEntity; else _intermediateEntity.PermissionSet = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public File() : this(new intermediateNS.File())
		{
		}
			
		public File(intermediateNS.File intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public File(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.File(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<File, pocoNS.File>(info);
		}

		public static bool operator ==(File a, File b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(File a, File b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((File)this)._equals(obj as File);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.File ToPOCO()
		{
			return this.CreatePOCO<File, pocoNS.File>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class File : IPOCO<projectNS.File>	{


		public long Id { get; set; }
		public string Filename { get; set; }
		public long PermissionSetId { get; set; }
		public long TenantId { get; set; }
		public string Title { get; set; }
		public POCOReference PermissionSet { get; set; }

		public POCOReference Tenant { get; set; }

			
		public File()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class File : IntermediateEntity<projectNS.File, L2SNS.File>
	{
		//Fields				
		public PrimaryKeyField<projectNS.File, intermediateNS.File, L2SNS.File, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.File, intermediateNS.File, L2SNS.File, string> _filename;
		public string Filename 
		{	
			get { return _filename.Value; }
			set { _filename.Value = value; }
		}
		public EntityField<projectNS.File, intermediateNS.File, L2SNS.File, long> _permissionSetId;
		public long PermissionSetId 
		{	
			get { return _permissionSetId.Value; }
			set { _permissionSetId.Value = value; }
		}
		public EntityField<projectNS.File, intermediateNS.File, L2SNS.File, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.File, intermediateNS.File, L2SNS.File, string> _title;
		public string Title 
		{	
			get { return _title.Value; }
			set { _title.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.File, projectNS.PermissionSet, intermediateNS.File, intermediateNS.PermissionSet, L2SNS.File, L2SNS.PermissionSet> _permissionSet;
		public intermediateNS.PermissionSet PermissionSet
		{	
			get { return _permissionSet.Value; }
			set { _permissionSet.Value = value; }
		}
		public IntermediateEntityReference<projectNS.File, projectNS.Tenant, intermediateNS.File, intermediateNS.Tenant, L2SNS.File, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public File()
		{
			__tableEntity = new L2SNS.File();
			initFields();
		}
		
		public File(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.File();
			initFields();
			
			this.Deserialize<projectNS.File, File, pocoNS.File>(info);
			
		}
			
		public File(L2SNS.File tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.File, intermediateNS.File, L2SNS.File, long>(this, t => t.Id, (t, val) => t.Id = val);
			_filename = new EntityField<projectNS.File, intermediateNS.File, L2SNS.File, string>(this, t => t.Filename, (t, val) => t.Filename = val);
			_permissionSetId = new EntityField<projectNS.File, intermediateNS.File, L2SNS.File, long>(this, t => t.PermissionSetId, (t, val) => t.PermissionSetId = val);
			_tenantId = new EntityField<projectNS.File, intermediateNS.File, L2SNS.File, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_title = new EntityField<projectNS.File, intermediateNS.File, L2SNS.File, string>(this, t => t.Title, (t, val) => t.Title = val);
			_permissionSet = new IntermediateEntityReference<projectNS.File, projectNS.PermissionSet, intermediateNS.File, intermediateNS.PermissionSet, L2SNS.File, L2SNS.PermissionSet>(this, __f => __f.PermissionSet, (__f, __permissionset) => __f.PermissionSet = __permissionset, __permissionset => __permissionset._file, false);
			_tenant = new IntermediateEntityReference<projectNS.File, projectNS.Tenant, intermediateNS.File, intermediateNS.Tenant, L2SNS.File, L2SNS.Tenant>(this, __f => __f.Tenant, (__f, __tenant) => __f.Tenant = __tenant, __tenant => __tenant._files, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "PermissionSet":
                	return _permissionSet.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class File : ITableEntity<intermediateNS.File>
	{
        public intermediateNS.File _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.File;
		}
	}
}

namespace taskometer.Core.Models
{
	public class IssuesPortalMapping : ModelEntityMapping<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal>
	{
		public IssuesPortalMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.IssuesPortal);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(IssuesPortalMapping))]
	public partial class IssuesPortal : EntityBase, IModelEntity<intermediateNS.IssuesPortal>	
	{
		private intermediateNS.IssuesPortal __intermediateEntity;
		public intermediateNS.IssuesPortal _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.IssuesPortal intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Domain 
		{	
			get { return _intermediateEntity.Domain; }
			set { _intermediateEntity.Domain = value; }
		}
		public virtual bool IsActive 
		{	
			get { return _intermediateEntity.IsActive; }
			set { _intermediateEntity.IsActive = value; }
		}
		public virtual string Path 
		{	
			get { return _intermediateEntity.Path; }
			set { _intermediateEntity.Path = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public IssuesPortal() : this(new intermediateNS.IssuesPortal())
		{
		}
			
		public IssuesPortal(intermediateNS.IssuesPortal intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public IssuesPortal(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.IssuesPortal(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<IssuesPortal, pocoNS.IssuesPortal>(info);
		}

		public static bool operator ==(IssuesPortal a, IssuesPortal b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(IssuesPortal a, IssuesPortal b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((IssuesPortal)this)._equals(obj as IssuesPortal);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.IssuesPortal ToPOCO()
		{
			return this.CreatePOCO<IssuesPortal, pocoNS.IssuesPortal>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class IssuesPortal : IPOCO<projectNS.IssuesPortal>	{


		public long Id { get; set; }
		public string Domain { get; set; }
		public bool IsActive { get; set; }
		public string Path { get; set; }
		public long TenantId { get; set; }
		public POCOReference Tenant { get; set; }

			
		public IssuesPortal()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class IssuesPortal : IntermediateEntity<projectNS.IssuesPortal, L2SNS.IssuesPortal>
	{
		//Fields				
		public PrimaryKeyField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, string> _domain;
		public string Domain 
		{	
			get { return _domain.Value; }
			set { _domain.Value = value; }
		}
		public EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, bool> _isActive;
		public bool IsActive 
		{	
			get { return _isActive.Value; }
			set { _isActive.Value = value; }
		}
		public EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, string> _path;
		public string Path 
		{	
			get { return _path.Value; }
			set { _path.Value = value; }
		}
		public EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.IssuesPortal, projectNS.Tenant, intermediateNS.IssuesPortal, intermediateNS.Tenant, L2SNS.IssuesPortal, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public IssuesPortal()
		{
			__tableEntity = new L2SNS.IssuesPortal();
			initFields();
		}
		
		public IssuesPortal(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.IssuesPortal();
			initFields();
			
			this.Deserialize<projectNS.IssuesPortal, IssuesPortal, pocoNS.IssuesPortal>(info);
			
		}
			
		public IssuesPortal(L2SNS.IssuesPortal tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, long>(this, t => t.Id, (t, val) => t.Id = val);
			_domain = new EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, string>(this, t => t.Domain, (t, val) => t.Domain = val);
			_isActive = new EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, bool>(this, t => t.IsActive, (t, val) => t.IsActive = val);
			_path = new EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, string>(this, t => t.Path, (t, val) => t.Path = val);
			_tenantId = new EntityField<projectNS.IssuesPortal, intermediateNS.IssuesPortal, L2SNS.IssuesPortal, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_tenant = new IntermediateEntityReference<projectNS.IssuesPortal, projectNS.Tenant, intermediateNS.IssuesPortal, intermediateNS.Tenant, L2SNS.IssuesPortal, L2SNS.Tenant>(this, __i => __i.Tenant, (__i, __tenant) => __i.Tenant = __tenant, __tenant => __tenant._issuesPortal, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class IssuesPortal : ITableEntity<intermediateNS.IssuesPortal>
	{
        public intermediateNS.IssuesPortal _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.IssuesPortal;
		}
	}
}

namespace taskometer.Core.Models
{
	public class MetaMapping : ModelEntityMapping<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta>
	{
		public MetaMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Metas);
			AddRelationship<projectNS.Website>(e => e.Website, e => e.Meta);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(MetaMapping))]
	public partial class Meta : EntityBase, IModelEntity<intermediateNS.Meta>	
	{
		private intermediateNS.Meta __intermediateEntity;
		public intermediateNS.Meta _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Meta intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual string Text 
		{	
			get { return _intermediateEntity.Text; }
			set { _intermediateEntity.Text = value; }
		}
		public virtual string Url 
		{	
			get { return _intermediateEntity.Url; }
			set { _intermediateEntity.Url = value; }
		}
		public virtual long WebsiteId 
		{	
			get { return _intermediateEntity.WebsiteId; }
			set { _intermediateEntity.WebsiteId = value; }
		}
			
		//Navigation Properties
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Website Website 
		{	
			get { return _intermediateEntity.Website.GetEntity(); }
			set { if (value != null) _intermediateEntity.Website = value._intermediateEntity; else _intermediateEntity.Website = null; }
		}
		public Meta() : this(new intermediateNS.Meta())
		{
		}
			
		public Meta(intermediateNS.Meta intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Meta(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Meta(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Meta, pocoNS.Meta>(info);
		}

		public static bool operator ==(Meta a, Meta b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Meta a, Meta b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Meta)this)._equals(obj as Meta);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Meta ToPOCO()
		{
			return this.CreatePOCO<Meta, pocoNS.Meta>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Meta : IPOCO<projectNS.Meta>	{


		public long Id { get; set; }
		public long TenantId { get; set; }
		public string Text { get; set; }
		public string Url { get; set; }
		public long WebsiteId { get; set; }
		public POCOReference Tenant { get; set; }

		public POCOReference Website { get; set; }

			
		public Meta()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Meta : IntermediateEntity<projectNS.Meta, L2SNS.Meta>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, string> _text;
		public string Text 
		{	
			get { return _text.Value; }
			set { _text.Value = value; }
		}
		public EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, string> _url;
		public string Url 
		{	
			get { return _url.Value; }
			set { _url.Value = value; }
		}
		public EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, long> _websiteId;
		public long WebsiteId 
		{	
			get { return _websiteId.Value; }
			set { _websiteId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Meta, projectNS.Tenant, intermediateNS.Meta, intermediateNS.Tenant, L2SNS.Meta, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Meta, projectNS.Website, intermediateNS.Meta, intermediateNS.Website, L2SNS.Meta, L2SNS.Website> _website;
		public intermediateNS.Website Website
		{	
			get { return _website.Value; }
			set { _website.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Meta()
		{
			__tableEntity = new L2SNS.Meta();
			initFields();
		}
		
		public Meta(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Meta();
			initFields();
			
			this.Deserialize<projectNS.Meta, Meta, pocoNS.Meta>(info);
			
		}
			
		public Meta(L2SNS.Meta tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, long>(this, t => t.Id, (t, val) => t.Id = val);
			_tenantId = new EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_text = new EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, string>(this, t => t.Text, (t, val) => t.Text = val);
			_url = new EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, string>(this, t => t.Url, (t, val) => t.Url = val);
			_websiteId = new EntityField<projectNS.Meta, intermediateNS.Meta, L2SNS.Meta, long>(this, t => t.WebsiteId, (t, val) => t.WebsiteId = val);
			_tenant = new IntermediateEntityReference<projectNS.Meta, projectNS.Tenant, intermediateNS.Meta, intermediateNS.Tenant, L2SNS.Meta, L2SNS.Tenant>(this, __m => __m.Tenant, (__m, __tenant) => __m.Tenant = __tenant, __tenant => __tenant._metas, false);
			_website = new IntermediateEntityReference<projectNS.Meta, projectNS.Website, intermediateNS.Meta, intermediateNS.Website, L2SNS.Meta, L2SNS.Website>(this, __m => __m.Website, (__m, __website) => __m.Website = __website, __website => __website._meta, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Tenant":
                	return _tenant.IsLoaded;
				case "Website":
                	return _website.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Meta : ITableEntity<intermediateNS.Meta>
	{
        public intermediateNS.Meta _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Meta;
		}
	}
}

namespace taskometer.Core.Models
{
	public class PageMapping : ModelEntityMapping<projectNS.Page, intermediateNS.Page, L2SNS.Page>
	{
		public PageMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Comment>(e => e.Comments, e => e.Page);
			AddRelationship<projectNS.Revision>(e => e.Revisions, e => e.Page);
			AddRelationship<projectNS.PermissionSet>(e => e.PermissionSet, e => e.Page);
			AddRelationship<projectNS.Template>(e => e.DisplayTemplate, e => e.Pages);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Pages);
			AddRelationship<projectNS.User>(e => e.Author, e => e.Pages);
			AddRelationship<projectNS.Category>(e => e.Category, e => e.Pages);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(PageMapping))]
	public partial class Page : EntityBase, IModelEntity<intermediateNS.Page>	
	{
		private intermediateNS.Page __intermediateEntity;
		public intermediateNS.Page _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Page intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual bool AllowComments 
		{	
			get { return _intermediateEntity.AllowComments; }
			set { _intermediateEntity.AllowComments = value; }
		}
		public virtual long AuthorId 
		{	
			get { return _intermediateEntity.AuthorId; }
			set { _intermediateEntity.AuthorId = value; }
		}
		public virtual long CategoryId 
		{	
			get { return _intermediateEntity.CategoryId; }
			set { _intermediateEntity.CategoryId = value; }
		}
		public virtual string ContentType 
		{	
			get { return _intermediateEntity.ContentType; }
			set { _intermediateEntity.ContentType = value; }
		}
		public virtual DateTime DateTime 
		{	
			get { return _intermediateEntity.DateTime; }
			set { _intermediateEntity.DateTime = value; }
		}
		public virtual long DisplayTemplateId 
		{	
			get { return _intermediateEntity.DisplayTemplateId; }
			set { _intermediateEntity.DisplayTemplateId = value; }
		}
		public virtual string Excerpt 
		{	
			get { return _intermediateEntity.Excerpt; }
			set { _intermediateEntity.Excerpt = value; }
		}
		public virtual string Html 
		{	
			get { return _intermediateEntity.Html; }
			set { _intermediateEntity.Html = value; }
		}
		public virtual string MainContentHtml 
		{	
			get { return _intermediateEntity.MainContentHtml; }
			set { _intermediateEntity.MainContentHtml = value; }
		}
		public virtual long PermissionSetId 
		{	
			get { return _intermediateEntity.PermissionSetId; }
			set { _intermediateEntity.PermissionSetId = value; }
		}
		public virtual bool Syndicate 
		{	
			get { return _intermediateEntity.Syndicate; }
			set { _intermediateEntity.Syndicate = value; }
		}
		public virtual string Tags 
		{	
			get { return _intermediateEntity.Tags; }
			set { _intermediateEntity.Tags = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual string Title 
		{	
			get { return _intermediateEntity.Title; }
			set { _intermediateEntity.Title = value; }
		}
		public virtual string UniquePath 
		{	
			get { return _intermediateEntity.UniquePath; }
			set { _intermediateEntity.UniquePath = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Comment> Comments 
		{	
			get { return _intermediateEntity.Comments.EntityCollection; }
		}		
		public ICollection<projectNS.Revision> Revisions 
		{	
			get { return _intermediateEntity.Revisions.EntityCollection; }
		}		
		public PermissionSet PermissionSet 
		{	
			get { return _intermediateEntity.PermissionSet.GetEntity(); }
			set { if (value != null) _intermediateEntity.PermissionSet = value._intermediateEntity; else _intermediateEntity.PermissionSet = null; }
		}
		public Template DisplayTemplate 
		{	
			get { return _intermediateEntity.DisplayTemplate.GetEntity(); }
			set { if (value != null) _intermediateEntity.DisplayTemplate = value._intermediateEntity; else _intermediateEntity.DisplayTemplate = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public User Author 
		{	
			get { return _intermediateEntity.Author.GetEntity(); }
			set { if (value != null) _intermediateEntity.Author = value._intermediateEntity; else _intermediateEntity.Author = null; }
		}
		public Category Category 
		{	
			get { return _intermediateEntity.Category.GetEntity(); }
			set { if (value != null) _intermediateEntity.Category = value._intermediateEntity; else _intermediateEntity.Category = null; }
		}
		public Page() : this(new intermediateNS.Page())
		{
		}
			
		public Page(intermediateNS.Page intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Page(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Page(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Page, pocoNS.Page>(info);
		}

		public static bool operator ==(Page a, Page b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Page a, Page b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Page)this)._equals(obj as Page);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Page ToPOCO()
		{
			return this.CreatePOCO<Page, pocoNS.Page>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Page : IPOCO<projectNS.Page>	{


		public long Id { get; set; }
		public bool AllowComments { get; set; }
		public long AuthorId { get; set; }
		public long CategoryId { get; set; }
		public string ContentType { get; set; }
		public DateTime DateTime { get; set; }
		public long DisplayTemplateId { get; set; }
		public string Excerpt { get; set; }
		public string Html { get; set; }
		public string MainContentHtml { get; set; }
		public long PermissionSetId { get; set; }
		public bool Syndicate { get; set; }
		public string Tags { get; set; }
		public long TenantId { get; set; }
		public string Title { get; set; }
		public string UniquePath { get; set; }
		public POCOCollection Comments { get; set; }

		public POCOCollection Revisions { get; set; }

		public POCOReference PermissionSet { get; set; }

		public POCOReference DisplayTemplate { get; set; }

		public POCOReference Tenant { get; set; }

		public POCOReference Author { get; set; }

		public POCOReference Category { get; set; }

			
		public Page()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Page : IntermediateEntity<projectNS.Page, L2SNS.Page>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, bool> _allowComments;
		public bool AllowComments 
		{	
			get { return _allowComments.Value; }
			set { _allowComments.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long> _authorId;
		public long AuthorId 
		{	
			get { return _authorId.Value; }
			set { _authorId.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long> _categoryId;
		public long CategoryId 
		{	
			get { return _categoryId.Value; }
			set { _categoryId.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string> _contentType;
		public string ContentType 
		{	
			get { return _contentType.Value; }
			set { _contentType.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, DateTime> _dateTime;
		public DateTime DateTime 
		{	
			get { return _dateTime.Value; }
			set { _dateTime.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long> _displayTemplateId;
		public long DisplayTemplateId 
		{	
			get { return _displayTemplateId.Value; }
			set { _displayTemplateId.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string> _excerpt;
		public string Excerpt 
		{	
			get { return _excerpt.Value; }
			set { _excerpt.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string> _html;
		public string Html 
		{	
			get { return _html.Value; }
			set { _html.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string> _mainContentHtml;
		public string MainContentHtml 
		{	
			get { return _mainContentHtml.Value; }
			set { _mainContentHtml.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long> _permissionSetId;
		public long PermissionSetId 
		{	
			get { return _permissionSetId.Value; }
			set { _permissionSetId.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, bool> _syndicate;
		public bool Syndicate 
		{	
			get { return _syndicate.Value; }
			set { _syndicate.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string> _tags;
		public string Tags 
		{	
			get { return _tags.Value; }
			set { _tags.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string> _title;
		public string Title 
		{	
			get { return _title.Value; }
			set { _title.Value = value; }
		}
		public EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string> _uniquePath;
		public string UniquePath 
		{	
			get { return _uniquePath.Value; }
			set { _uniquePath.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityCollection<projectNS.Page, projectNS.Comment, intermediateNS.Page, intermediateNS.Comment, L2SNS.Page, L2SNS.Comment> _comments;
		public IntermediateEntityCollection<projectNS.Page, projectNS.Comment, intermediateNS.Page, intermediateNS.Comment, L2SNS.Page, L2SNS.Comment> Comments 
		{	
			get { return _comments; }		
		}				
		public IntermediateEntityCollection<projectNS.Page, projectNS.Revision, intermediateNS.Page, intermediateNS.Revision, L2SNS.Page, L2SNS.Revision> _revisions;
		public IntermediateEntityCollection<projectNS.Page, projectNS.Revision, intermediateNS.Page, intermediateNS.Revision, L2SNS.Page, L2SNS.Revision> Revisions 
		{	
			get { return _revisions; }		
		}				
		public IntermediateEntityReference<projectNS.Page, projectNS.PermissionSet, intermediateNS.Page, intermediateNS.PermissionSet, L2SNS.Page, L2SNS.PermissionSet> _permissionSet;
		public intermediateNS.PermissionSet PermissionSet
		{	
			get { return _permissionSet.Value; }
			set { _permissionSet.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Page, projectNS.Template, intermediateNS.Page, intermediateNS.Template, L2SNS.Page, L2SNS.Template> _displayTemplate;
		public intermediateNS.Template DisplayTemplate
		{	
			get { return _displayTemplate.Value; }
			set { _displayTemplate.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Page, projectNS.Tenant, intermediateNS.Page, intermediateNS.Tenant, L2SNS.Page, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Page, projectNS.User, intermediateNS.Page, intermediateNS.User, L2SNS.Page, L2SNS.User> _author;
		public intermediateNS.User Author
		{	
			get { return _author.Value; }
			set { _author.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Page, projectNS.Category, intermediateNS.Page, intermediateNS.Category, L2SNS.Page, L2SNS.Category> _category;
		public intermediateNS.Category Category
		{	
			get { return _category.Value; }
			set { _category.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Page()
		{
			__tableEntity = new L2SNS.Page();
			initFields();
		}
		
		public Page(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Page();
			initFields();
			
			this.Deserialize<projectNS.Page, Page, pocoNS.Page>(info);
			
		}
			
		public Page(L2SNS.Page tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long>(this, t => t.Id, (t, val) => t.Id = val);
			_allowComments = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, bool>(this, t => t.AllowComments, (t, val) => t.AllowComments = val);
			_authorId = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long>(this, t => t.AuthorId, (t, val) => t.AuthorId = val);
			_categoryId = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long>(this, t => t.CategoryId, (t, val) => t.CategoryId = val);
			_contentType = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string>(this, t => t.ContentType, (t, val) => t.ContentType = val);
			_dateTime = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, DateTime>(this, t => t.DateTime, (t, val) => t.DateTime = val);
			_displayTemplateId = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long>(this, t => t.DisplayTemplateId, (t, val) => t.DisplayTemplateId = val);
			_excerpt = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string>(this, t => t.Excerpt, (t, val) => t.Excerpt = val);
			_html = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string>(this, t => t.Html, (t, val) => t.Html = val);
			_mainContentHtml = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string>(this, t => t.MainContentHtml, (t, val) => t.MainContentHtml = val);
			_permissionSetId = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long>(this, t => t.PermissionSetId, (t, val) => t.PermissionSetId = val);
			_syndicate = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, bool>(this, t => t.Syndicate, (t, val) => t.Syndicate = val);
			_tags = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string>(this, t => t.Tags, (t, val) => t.Tags = val);
			_tenantId = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_title = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string>(this, t => t.Title, (t, val) => t.Title = val);
			_uniquePath = new EntityField<projectNS.Page, intermediateNS.Page, L2SNS.Page, string>(this, t => t.UniquePath, (t, val) => t.UniquePath = val);
			_comments = new IntermediateEntityCollection<projectNS.Page, projectNS.Comment, intermediateNS.Page, intermediateNS.Comment, L2SNS.Page, L2SNS.Comment>(this, __comment => __comment._page);
			_revisions = new IntermediateEntityCollection<projectNS.Page, projectNS.Revision, intermediateNS.Page, intermediateNS.Revision, L2SNS.Page, L2SNS.Revision>(this, __revision => __revision._page);
			_permissionSet = new IntermediateEntityReference<projectNS.Page, projectNS.PermissionSet, intermediateNS.Page, intermediateNS.PermissionSet, L2SNS.Page, L2SNS.PermissionSet>(this, __p => __p.PermissionSet, (__p, __permissionset) => __p.PermissionSet = __permissionset, __permissionset => __permissionset._page, false);
			_displayTemplate = new IntermediateEntityReference<projectNS.Page, projectNS.Template, intermediateNS.Page, intermediateNS.Template, L2SNS.Page, L2SNS.Template>(this, __p => __p.DisplayTemplate, (__p, __template) => __p.DisplayTemplate = __template, __template => __template._pages, false);
			_tenant = new IntermediateEntityReference<projectNS.Page, projectNS.Tenant, intermediateNS.Page, intermediateNS.Tenant, L2SNS.Page, L2SNS.Tenant>(this, __p => __p.Tenant, (__p, __tenant) => __p.Tenant = __tenant, __tenant => __tenant._pages, false);
			_author = new IntermediateEntityReference<projectNS.Page, projectNS.User, intermediateNS.Page, intermediateNS.User, L2SNS.Page, L2SNS.User>(this, __p => __p.Author, (__p, __user) => __p.Author = __user, __user => __user._pages, false);
			_category = new IntermediateEntityReference<projectNS.Page, projectNS.Category, intermediateNS.Page, intermediateNS.Category, L2SNS.Page, L2SNS.Category>(this, __p => __p.Category, (__p, __category) => __p.Category = __category, __category => __category._pages, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Comments":
					return Comments.IsLoaded;
				case "Revisions":
					return Revisions.IsLoaded;
				case "PermissionSet":
                	return _permissionSet.IsLoaded;
				case "DisplayTemplate":
                	return _displayTemplate.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
				case "Author":
                	return _author.IsLoaded;
				case "Category":
                	return _category.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Page : ITableEntity<intermediateNS.Page>
	{
        public intermediateNS.Page _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Page;
		}
	}
}

namespace taskometer.Core.Models
{
	public class PermissionMapping : ModelEntityMapping<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission>
	{
		public PermissionMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.PermissionSet>(e => e.PermissionSet, e => e.Permissions);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Permissions);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(PermissionMapping))]
	public partial class Permission : EntityBase, IModelEntity<intermediateNS.Permission>	
	{
		private intermediateNS.Permission __intermediateEntity;
		public intermediateNS.Permission _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Permission intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long Assignee 
		{	
			get { return _intermediateEntity.Assignee; }
			set { _intermediateEntity.Assignee = value; }
		}
		public virtual string AssigneeType 
		{	
			get { return _intermediateEntity.AssigneeType; }
			set { _intermediateEntity.AssigneeType = value; }
		}
		public virtual bool Edit 
		{	
			get { return _intermediateEntity.Edit; }
			set { _intermediateEntity.Edit = value; }
		}
		public virtual long PermissionSetId 
		{	
			get { return _intermediateEntity.PermissionSetId; }
			set { _intermediateEntity.PermissionSetId = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual bool View 
		{	
			get { return _intermediateEntity.View; }
			set { _intermediateEntity.View = value; }
		}
			
		//Navigation Properties
		public PermissionSet PermissionSet 
		{	
			get { return _intermediateEntity.PermissionSet.GetEntity(); }
			set { if (value != null) _intermediateEntity.PermissionSet = value._intermediateEntity; else _intermediateEntity.PermissionSet = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Permission() : this(new intermediateNS.Permission())
		{
		}
			
		public Permission(intermediateNS.Permission intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Permission(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Permission(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Permission, pocoNS.Permission>(info);
		}

		public static bool operator ==(Permission a, Permission b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Permission a, Permission b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Permission)this)._equals(obj as Permission);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Permission ToPOCO()
		{
			return this.CreatePOCO<Permission, pocoNS.Permission>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Permission : IPOCO<projectNS.Permission>	{


		public long Id { get; set; }
		public long Assignee { get; set; }
		public string AssigneeType { get; set; }
		public bool Edit { get; set; }
		public long PermissionSetId { get; set; }
		public long TenantId { get; set; }
		public bool View { get; set; }
		public POCOReference PermissionSet { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Permission()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Permission : IntermediateEntity<projectNS.Permission, L2SNS.Permission>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long> _assignee;
		public long Assignee 
		{	
			get { return _assignee.Value; }
			set { _assignee.Value = value; }
		}
		public EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, string> _assigneeType;
		public string AssigneeType 
		{	
			get { return _assigneeType.Value; }
			set { _assigneeType.Value = value; }
		}
		public EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, bool> _edit;
		public bool Edit 
		{	
			get { return _edit.Value; }
			set { _edit.Value = value; }
		}
		public EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long> _permissionSetId;
		public long PermissionSetId 
		{	
			get { return _permissionSetId.Value; }
			set { _permissionSetId.Value = value; }
		}
		public EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, bool> _view;
		public bool View 
		{	
			get { return _view.Value; }
			set { _view.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Permission, projectNS.PermissionSet, intermediateNS.Permission, intermediateNS.PermissionSet, L2SNS.Permission, L2SNS.PermissionSet> _permissionSet;
		public intermediateNS.PermissionSet PermissionSet
		{	
			get { return _permissionSet.Value; }
			set { _permissionSet.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Permission, projectNS.Tenant, intermediateNS.Permission, intermediateNS.Tenant, L2SNS.Permission, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Permission()
		{
			__tableEntity = new L2SNS.Permission();
			initFields();
		}
		
		public Permission(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Permission();
			initFields();
			
			this.Deserialize<projectNS.Permission, Permission, pocoNS.Permission>(info);
			
		}
			
		public Permission(L2SNS.Permission tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long>(this, t => t.Id, (t, val) => t.Id = val);
			_assignee = new EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long>(this, t => t.Assignee, (t, val) => t.Assignee = val);
			_assigneeType = new EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, string>(this, t => t.AssigneeType, (t, val) => t.AssigneeType = val);
			_edit = new EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, bool>(this, t => t.Edit, (t, val) => t.Edit = val);
			_permissionSetId = new EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long>(this, t => t.PermissionSetId, (t, val) => t.PermissionSetId = val);
			_tenantId = new EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_view = new EntityField<projectNS.Permission, intermediateNS.Permission, L2SNS.Permission, bool>(this, t => t.View, (t, val) => t.View = val);
			_permissionSet = new IntermediateEntityReference<projectNS.Permission, projectNS.PermissionSet, intermediateNS.Permission, intermediateNS.PermissionSet, L2SNS.Permission, L2SNS.PermissionSet>(this, __p => __p.PermissionSet, (__p, __permissionset) => __p.PermissionSet = __permissionset, __permissionset => __permissionset._permissions, false);
			_tenant = new IntermediateEntityReference<projectNS.Permission, projectNS.Tenant, intermediateNS.Permission, intermediateNS.Tenant, L2SNS.Permission, L2SNS.Tenant>(this, __p => __p.Tenant, (__p, __tenant) => __p.Tenant = __tenant, __tenant => __tenant._permissions, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "PermissionSet":
                	return _permissionSet.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Permission : ITableEntity<intermediateNS.Permission>
	{
        public intermediateNS.Permission _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Permission;
		}
	}
}

namespace taskometer.Core.Models
{
	public class PermissionSetMapping : ModelEntityMapping<projectNS.PermissionSet, intermediateNS.PermissionSet, L2SNS.PermissionSet>
	{
		public PermissionSetMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.File>(e => e.File, e => e.PermissionSet);
			AddRelationship<projectNS.Page>(e => e.Page, e => e.PermissionSet);
			AddRelationship<projectNS.Category>(e => e.Category, e => e.PermissionSet);
			AddRelationship<projectNS.Permission>(e => e.Permissions, e => e.PermissionSet);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.PermissionSets);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(PermissionSetMapping))]
	public partial class PermissionSet : EntityBase, IModelEntity<intermediateNS.PermissionSet>	
	{
		private intermediateNS.PermissionSet __intermediateEntity;
		public intermediateNS.PermissionSet _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.PermissionSet intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public File File 
		{	
			get { return _intermediateEntity.File.GetEntity(); }
			set { if (value != null) _intermediateEntity.File = value._intermediateEntity; else _intermediateEntity.File = null; }
		}
		public Page Page 
		{	
			get { return _intermediateEntity.Page.GetEntity(); }
			set { if (value != null) _intermediateEntity.Page = value._intermediateEntity; else _intermediateEntity.Page = null; }
		}
		public Category Category 
		{	
			get { return _intermediateEntity.Category.GetEntity(); }
			set { if (value != null) _intermediateEntity.Category = value._intermediateEntity; else _intermediateEntity.Category = null; }
		}
		public ICollection<projectNS.Permission> Permissions 
		{	
			get { return _intermediateEntity.Permissions.EntityCollection; }
		}		
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public PermissionSet() : this(new intermediateNS.PermissionSet())
		{
		}
			
		public PermissionSet(intermediateNS.PermissionSet intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public PermissionSet(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.PermissionSet(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<PermissionSet, pocoNS.PermissionSet>(info);
		}

		public static bool operator ==(PermissionSet a, PermissionSet b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(PermissionSet a, PermissionSet b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((PermissionSet)this)._equals(obj as PermissionSet);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.PermissionSet ToPOCO()
		{
			return this.CreatePOCO<PermissionSet, pocoNS.PermissionSet>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class PermissionSet : IPOCO<projectNS.PermissionSet>	{


		public long Id { get; set; }
		public long TenantId { get; set; }
		public POCOReference File { get; set; }

		public POCOReference Page { get; set; }

		public POCOReference Category { get; set; }

		public POCOCollection Permissions { get; set; }

		public POCOReference Tenant { get; set; }

			
		public PermissionSet()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class PermissionSet : IntermediateEntity<projectNS.PermissionSet, L2SNS.PermissionSet>
	{
		//Fields				
		public PrimaryKeyField<projectNS.PermissionSet, intermediateNS.PermissionSet, L2SNS.PermissionSet, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.PermissionSet, intermediateNS.PermissionSet, L2SNS.PermissionSet, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.PermissionSet, projectNS.File, intermediateNS.PermissionSet, intermediateNS.File, L2SNS.PermissionSet, L2SNS.File> _file;
		public intermediateNS.File File
		{	
			get { return _file.Value; }
			set { _file.Value = value; }
		}
		public IntermediateEntityReference<projectNS.PermissionSet, projectNS.Page, intermediateNS.PermissionSet, intermediateNS.Page, L2SNS.PermissionSet, L2SNS.Page> _page;
		public intermediateNS.Page Page
		{	
			get { return _page.Value; }
			set { _page.Value = value; }
		}
		public IntermediateEntityReference<projectNS.PermissionSet, projectNS.Category, intermediateNS.PermissionSet, intermediateNS.Category, L2SNS.PermissionSet, L2SNS.Category> _category;
		public intermediateNS.Category Category
		{	
			get { return _category.Value; }
			set { _category.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.PermissionSet, projectNS.Permission, intermediateNS.PermissionSet, intermediateNS.Permission, L2SNS.PermissionSet, L2SNS.Permission> _permissions;
		public IntermediateEntityCollection<projectNS.PermissionSet, projectNS.Permission, intermediateNS.PermissionSet, intermediateNS.Permission, L2SNS.PermissionSet, L2SNS.Permission> Permissions 
		{	
			get { return _permissions; }		
		}				
		public IntermediateEntityReference<projectNS.PermissionSet, projectNS.Tenant, intermediateNS.PermissionSet, intermediateNS.Tenant, L2SNS.PermissionSet, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public PermissionSet()
		{
			__tableEntity = new L2SNS.PermissionSet();
			initFields();
		}
		
		public PermissionSet(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.PermissionSet();
			initFields();
			
			this.Deserialize<projectNS.PermissionSet, PermissionSet, pocoNS.PermissionSet>(info);
			
		}
			
		public PermissionSet(L2SNS.PermissionSet tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.PermissionSet, intermediateNS.PermissionSet, L2SNS.PermissionSet, long>(this, t => t.Id, (t, val) => t.Id = val);
			_tenantId = new EntityField<projectNS.PermissionSet, intermediateNS.PermissionSet, L2SNS.PermissionSet, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_file = new IntermediateEntityReference<projectNS.PermissionSet, projectNS.File, intermediateNS.PermissionSet, intermediateNS.File, L2SNS.PermissionSet, L2SNS.File>(this, __p => __p.File, (__p, __file) => __p.File = __file, __file => __file._permissionSet, false);
			_page = new IntermediateEntityReference<projectNS.PermissionSet, projectNS.Page, intermediateNS.PermissionSet, intermediateNS.Page, L2SNS.PermissionSet, L2SNS.Page>(this, __p => __p.Page, (__p, __page) => __p.Page = __page, __page => __page._permissionSet, false);
			_category = new IntermediateEntityReference<projectNS.PermissionSet, projectNS.Category, intermediateNS.PermissionSet, intermediateNS.Category, L2SNS.PermissionSet, L2SNS.Category>(this, __p => __p.Category, (__p, __category) => __p.Category = __category, __category => __category._permissionSet, false);
			_permissions = new IntermediateEntityCollection<projectNS.PermissionSet, projectNS.Permission, intermediateNS.PermissionSet, intermediateNS.Permission, L2SNS.PermissionSet, L2SNS.Permission>(this, __permission => __permission._permissionSet);
			_tenant = new IntermediateEntityReference<projectNS.PermissionSet, projectNS.Tenant, intermediateNS.PermissionSet, intermediateNS.Tenant, L2SNS.PermissionSet, L2SNS.Tenant>(this, __p => __p.Tenant, (__p, __tenant) => __p.Tenant = __tenant, __tenant => __tenant._permissionSets, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "File":
                	return _file.IsLoaded;
				case "Page":
                	return _page.IsLoaded;
				case "Category":
                	return _category.IsLoaded;
				case "Permissions":
					return Permissions.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class PermissionSet : ITableEntity<intermediateNS.PermissionSet>
	{
        public intermediateNS.PermissionSet _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.PermissionSet;
		}
	}
}

namespace taskometer.Core.Models
{
	public class ProjectPortalMapping : ModelEntityMapping<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal>
	{
		public ProjectPortalMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.ProjectPortal);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(ProjectPortalMapping))]
	public partial class ProjectPortal : EntityBase, IModelEntity<intermediateNS.ProjectPortal>	
	{
		private intermediateNS.ProjectPortal __intermediateEntity;
		public intermediateNS.ProjectPortal _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.ProjectPortal intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Domain 
		{	
			get { return _intermediateEntity.Domain; }
			set { _intermediateEntity.Domain = value; }
		}
		public virtual bool IsActive 
		{	
			get { return _intermediateEntity.IsActive; }
			set { _intermediateEntity.IsActive = value; }
		}
		public virtual string Path 
		{	
			get { return _intermediateEntity.Path; }
			set { _intermediateEntity.Path = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public ProjectPortal() : this(new intermediateNS.ProjectPortal())
		{
		}
			
		public ProjectPortal(intermediateNS.ProjectPortal intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public ProjectPortal(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.ProjectPortal(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<ProjectPortal, pocoNS.ProjectPortal>(info);
		}

		public static bool operator ==(ProjectPortal a, ProjectPortal b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(ProjectPortal a, ProjectPortal b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((ProjectPortal)this)._equals(obj as ProjectPortal);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.ProjectPortal ToPOCO()
		{
			return this.CreatePOCO<ProjectPortal, pocoNS.ProjectPortal>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class ProjectPortal : IPOCO<projectNS.ProjectPortal>	{


		public long Id { get; set; }
		public string Domain { get; set; }
		public bool IsActive { get; set; }
		public string Path { get; set; }
		public long TenantId { get; set; }
		public POCOReference Tenant { get; set; }

			
		public ProjectPortal()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class ProjectPortal : IntermediateEntity<projectNS.ProjectPortal, L2SNS.ProjectPortal>
	{
		//Fields				
		public PrimaryKeyField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, string> _domain;
		public string Domain 
		{	
			get { return _domain.Value; }
			set { _domain.Value = value; }
		}
		public EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, bool> _isActive;
		public bool IsActive 
		{	
			get { return _isActive.Value; }
			set { _isActive.Value = value; }
		}
		public EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, string> _path;
		public string Path 
		{	
			get { return _path.Value; }
			set { _path.Value = value; }
		}
		public EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.ProjectPortal, projectNS.Tenant, intermediateNS.ProjectPortal, intermediateNS.Tenant, L2SNS.ProjectPortal, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public ProjectPortal()
		{
			__tableEntity = new L2SNS.ProjectPortal();
			initFields();
		}
		
		public ProjectPortal(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.ProjectPortal();
			initFields();
			
			this.Deserialize<projectNS.ProjectPortal, ProjectPortal, pocoNS.ProjectPortal>(info);
			
		}
			
		public ProjectPortal(L2SNS.ProjectPortal tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, long>(this, t => t.Id, (t, val) => t.Id = val);
			_domain = new EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, string>(this, t => t.Domain, (t, val) => t.Domain = val);
			_isActive = new EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, bool>(this, t => t.IsActive, (t, val) => t.IsActive = val);
			_path = new EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, string>(this, t => t.Path, (t, val) => t.Path = val);
			_tenantId = new EntityField<projectNS.ProjectPortal, intermediateNS.ProjectPortal, L2SNS.ProjectPortal, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_tenant = new IntermediateEntityReference<projectNS.ProjectPortal, projectNS.Tenant, intermediateNS.ProjectPortal, intermediateNS.Tenant, L2SNS.ProjectPortal, L2SNS.Tenant>(this, __p => __p.Tenant, (__p, __tenant) => __p.Tenant = __tenant, __tenant => __tenant._projectPortal, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class ProjectPortal : ITableEntity<intermediateNS.ProjectPortal>
	{
        public intermediateNS.ProjectPortal _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.ProjectPortal;
		}
	}
}

namespace taskometer.Core.Models
{
	public class RevisionMapping : ModelEntityMapping<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision>
	{
		public RevisionMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Page>(e => e.Page, e => e.Revisions);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Revisions);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(RevisionMapping))]
	public partial class Revision : EntityBase, IModelEntity<intermediateNS.Revision>	
	{
		private intermediateNS.Revision __intermediateEntity;
		public intermediateNS.Revision _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Revision intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Contents 
		{	
			get { return _intermediateEntity.Contents; }
			set { _intermediateEntity.Contents = value; }
		}
		public virtual DateTime DateTime 
		{	
			get { return _intermediateEntity.DateTime; }
			set { _intermediateEntity.DateTime = value; }
		}
		public virtual string Html 
		{	
			get { return _intermediateEntity.Html; }
			set { _intermediateEntity.Html = value; }
		}
		public virtual string MainContentHtml 
		{	
			get { return _intermediateEntity.MainContentHtml; }
			set { _intermediateEntity.MainContentHtml = value; }
		}
		public virtual long PageId 
		{	
			get { return _intermediateEntity.PageId; }
			set { _intermediateEntity.PageId = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Page Page 
		{	
			get { return _intermediateEntity.Page.GetEntity(); }
			set { if (value != null) _intermediateEntity.Page = value._intermediateEntity; else _intermediateEntity.Page = null; }
		}
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Revision() : this(new intermediateNS.Revision())
		{
		}
			
		public Revision(intermediateNS.Revision intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Revision(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Revision(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Revision, pocoNS.Revision>(info);
		}

		public static bool operator ==(Revision a, Revision b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Revision a, Revision b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Revision)this)._equals(obj as Revision);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Revision ToPOCO()
		{
			return this.CreatePOCO<Revision, pocoNS.Revision>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Revision : IPOCO<projectNS.Revision>	{


		public long Id { get; set; }
		public string Contents { get; set; }
		public DateTime DateTime { get; set; }
		public string Html { get; set; }
		public string MainContentHtml { get; set; }
		public long PageId { get; set; }
		public long TenantId { get; set; }
		public POCOReference Page { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Revision()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Revision : IntermediateEntity<projectNS.Revision, L2SNS.Revision>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, string> _contents;
		public string Contents 
		{	
			get { return _contents.Value; }
			set { _contents.Value = value; }
		}
		public EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, DateTime> _dateTime;
		public DateTime DateTime 
		{	
			get { return _dateTime.Value; }
			set { _dateTime.Value = value; }
		}
		public EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, string> _html;
		public string Html 
		{	
			get { return _html.Value; }
			set { _html.Value = value; }
		}
		public EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, string> _mainContentHtml;
		public string MainContentHtml 
		{	
			get { return _mainContentHtml.Value; }
			set { _mainContentHtml.Value = value; }
		}
		public EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, long> _pageId;
		public long PageId 
		{	
			get { return _pageId.Value; }
			set { _pageId.Value = value; }
		}
		public EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Revision, projectNS.Page, intermediateNS.Revision, intermediateNS.Page, L2SNS.Revision, L2SNS.Page> _page;
		public intermediateNS.Page Page
		{	
			get { return _page.Value; }
			set { _page.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Revision, projectNS.Tenant, intermediateNS.Revision, intermediateNS.Tenant, L2SNS.Revision, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Revision()
		{
			__tableEntity = new L2SNS.Revision();
			initFields();
		}
		
		public Revision(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Revision();
			initFields();
			
			this.Deserialize<projectNS.Revision, Revision, pocoNS.Revision>(info);
			
		}
			
		public Revision(L2SNS.Revision tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, long>(this, t => t.Id, (t, val) => t.Id = val);
			_contents = new EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, string>(this, t => t.Contents, (t, val) => t.Contents = val);
			_dateTime = new EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, DateTime>(this, t => t.DateTime, (t, val) => t.DateTime = val);
			_html = new EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, string>(this, t => t.Html, (t, val) => t.Html = val);
			_mainContentHtml = new EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, string>(this, t => t.MainContentHtml, (t, val) => t.MainContentHtml = val);
			_pageId = new EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, long>(this, t => t.PageId, (t, val) => t.PageId = val);
			_tenantId = new EntityField<projectNS.Revision, intermediateNS.Revision, L2SNS.Revision, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_page = new IntermediateEntityReference<projectNS.Revision, projectNS.Page, intermediateNS.Revision, intermediateNS.Page, L2SNS.Revision, L2SNS.Page>(this, __r => __r.Page, (__r, __page) => __r.Page = __page, __page => __page._revisions, false);
			_tenant = new IntermediateEntityReference<projectNS.Revision, projectNS.Tenant, intermediateNS.Revision, intermediateNS.Tenant, L2SNS.Revision, L2SNS.Tenant>(this, __r => __r.Tenant, (__r, __tenant) => __r.Tenant = __tenant, __tenant => __tenant._revisions, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Page":
                	return _page.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Revision : ITableEntity<intermediateNS.Revision>
	{
        public intermediateNS.Revision _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Revision;
		}
	}
}

namespace taskometer.Core.Models
{
	public class RoleMapping : ModelEntityMapping<projectNS.Role, intermediateNS.Role, L2SNS.Role>
	{
		public RoleMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Account, AccountRoleMap>(e => e.Accounts, map => map.Role, map => map.Account);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Roles);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(RoleMapping))]
	public partial class Role : EntityBase, IModelEntity<intermediateNS.Role>	
	{
		private intermediateNS.Role __intermediateEntity;
		public intermediateNS.Role _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Role intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Account> Accounts 
		{	
			get { return _intermediateEntity.Accounts.EntityCollection; }
		}		
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Role() : this(new intermediateNS.Role())
		{
		}
			
		public Role(intermediateNS.Role intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Role(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Role(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Role, pocoNS.Role>(info);
		}

		public static bool operator ==(Role a, Role b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Role a, Role b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Role)this)._equals(obj as Role);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Role ToPOCO()
		{
			return this.CreatePOCO<Role, pocoNS.Role>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Role : IPOCO<projectNS.Role>	{


		public long Id { get; set; }
		public string Name { get; set; }
		public long TenantId { get; set; }
		public POCOCollection Accounts { get; set; }

		public POCOReference Tenant { get; set; }

			
		public Role()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Role : IntermediateEntity<projectNS.Role, L2SNS.Role>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Role, intermediateNS.Role, L2SNS.Role, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Role, intermediateNS.Role, L2SNS.Role, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Role, intermediateNS.Role, L2SNS.Role, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Role, projectNS.Account, projectNS.AccountRoleMap, intermediateNS.Role, intermediateNS.Account, intermediateNS.AccountRoleMap, L2SNS.Role, L2SNS.Account, L2SNS.AccountRoleMap> _accounts;
		public IntermediateManyToManyCollection<projectNS.Role, projectNS.Account, projectNS.AccountRoleMap, intermediateNS.Role, intermediateNS.Account, intermediateNS.AccountRoleMap, L2SNS.Role, L2SNS.Account, L2SNS.AccountRoleMap> Accounts 
		{	
			get { return _accounts; }		
		}
		public IntermediateEntityReference<projectNS.Role, projectNS.Tenant, intermediateNS.Role, intermediateNS.Tenant, L2SNS.Role, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Role()
		{
			__tableEntity = new L2SNS.Role();
			initFields();
		}
		
		public Role(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Role();
			initFields();
			
			this.Deserialize<projectNS.Role, Role, pocoNS.Role>(info);
			
		}
			
		public Role(L2SNS.Role tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Role, intermediateNS.Role, L2SNS.Role, long>(this, t => t.Id, (t, val) => t.Id = val);
			_name = new EntityField<projectNS.Role, intermediateNS.Role, L2SNS.Role, string>(this, t => t.Name, (t, val) => t.Name = val);
			_tenantId = new EntityField<projectNS.Role, intermediateNS.Role, L2SNS.Role, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_accounts = new IntermediateManyToManyCollection<projectNS.Role, projectNS.Account, projectNS.AccountRoleMap, intermediateNS.Role, intermediateNS.Account, intermediateNS.AccountRoleMap, L2SNS.Role, L2SNS.Account, L2SNS.AccountRoleMap>(this, __map => __map.Role, __map => __map.Account, (__map, __r) => __map.Role = __r, (__map, __account) => __map.Account = __account, __account => __account._roles);
			_tenant = new IntermediateEntityReference<projectNS.Role, projectNS.Tenant, intermediateNS.Role, intermediateNS.Tenant, L2SNS.Role, L2SNS.Tenant>(this, __r => __r.Tenant, (__r, __tenant) => __r.Tenant = __tenant, __tenant => __tenant._roles, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Accounts":
					return Accounts.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Role : ITableEntity<intermediateNS.Role>
	{
        public intermediateNS.Role _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Role;
		}
	}
}

namespace taskometer.Core.Models
{
	public class TemplateMapping : ModelEntityMapping<projectNS.Template, intermediateNS.Template, L2SNS.Template>
	{
		public TemplateMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddManyToManyRelationship<projectNS.Control, TemplateControlMap>(e => e.Controls, map => map.Template, map => map.Control);
			AddRelationship<projectNS.Page>(e => e.Pages, e => e.DisplayTemplate);
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Templates);
			AddRelationship<projectNS.Website>(e => e.Website, e => e.Templates);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(TemplateMapping))]
	public partial class Template : EntityBase, IModelEntity<intermediateNS.Template>	
	{
		private intermediateNS.Template __intermediateEntity;
		public intermediateNS.Template _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Template intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Html 
		{	
			get { return _intermediateEntity.Html; }
			set { _intermediateEntity.Html = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Placeholders 
		{	
			get { return _intermediateEntity.Placeholders; }
			set { _intermediateEntity.Placeholders = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual long WebsiteId 
		{	
			get { return _intermediateEntity.WebsiteId; }
			set { _intermediateEntity.WebsiteId = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Control> Controls 
		{	
			get { return _intermediateEntity.Controls.EntityCollection; }
		}		
		public ICollection<projectNS.Page> Pages 
		{	
			get { return _intermediateEntity.Pages.EntityCollection; }
		}		
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public Website Website 
		{	
			get { return _intermediateEntity.Website.GetEntity(); }
			set { if (value != null) _intermediateEntity.Website = value._intermediateEntity; else _intermediateEntity.Website = null; }
		}
		public Template() : this(new intermediateNS.Template())
		{
		}
			
		public Template(intermediateNS.Template intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Template(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Template(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Template, pocoNS.Template>(info);
		}

		public static bool operator ==(Template a, Template b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Template a, Template b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Template)this)._equals(obj as Template);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Template ToPOCO()
		{
			return this.CreatePOCO<Template, pocoNS.Template>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Template : IPOCO<projectNS.Template>	{


		public long Id { get; set; }
		public string Html { get; set; }
		public string Name { get; set; }
		public string Placeholders { get; set; }
		public long TenantId { get; set; }
		public long WebsiteId { get; set; }
		public POCOCollection Controls { get; set; }

		public POCOCollection Pages { get; set; }

		public POCOReference Tenant { get; set; }

		public POCOReference Website { get; set; }

			
		public Template()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Template : IntermediateEntity<projectNS.Template, L2SNS.Template>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Template, intermediateNS.Template, L2SNS.Template, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, string> _html;
		public string Html 
		{	
			get { return _html.Value; }
			set { _html.Value = value; }
		}
		public EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, string> _placeholders;
		public string Placeholders 
		{	
			get { return _placeholders.Value; }
			set { _placeholders.Value = value; }
		}
		public EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, long> _websiteId;
		public long WebsiteId 
		{	
			get { return _websiteId.Value; }
			set { _websiteId.Value = value; }
		}


		//Navigation Properties
		public IntermediateManyToManyCollection<projectNS.Template, projectNS.Control, projectNS.TemplateControlMap, intermediateNS.Template, intermediateNS.Control, intermediateNS.TemplateControlMap, L2SNS.Template, L2SNS.Control, L2SNS.TemplateControlMap> _controls;
		public IntermediateManyToManyCollection<projectNS.Template, projectNS.Control, projectNS.TemplateControlMap, intermediateNS.Template, intermediateNS.Control, intermediateNS.TemplateControlMap, L2SNS.Template, L2SNS.Control, L2SNS.TemplateControlMap> Controls 
		{	
			get { return _controls; }		
		}
		public IntermediateEntityCollection<projectNS.Template, projectNS.Page, intermediateNS.Template, intermediateNS.Page, L2SNS.Template, L2SNS.Page> _pages;
		public IntermediateEntityCollection<projectNS.Template, projectNS.Page, intermediateNS.Template, intermediateNS.Page, L2SNS.Template, L2SNS.Page> Pages 
		{	
			get { return _pages; }		
		}				
		public IntermediateEntityReference<projectNS.Template, projectNS.Tenant, intermediateNS.Template, intermediateNS.Tenant, L2SNS.Template, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityReference<projectNS.Template, projectNS.Website, intermediateNS.Template, intermediateNS.Website, L2SNS.Template, L2SNS.Website> _website;
		public intermediateNS.Website Website
		{	
			get { return _website.Value; }
			set { _website.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public Template()
		{
			__tableEntity = new L2SNS.Template();
			initFields();
		}
		
		public Template(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Template();
			initFields();
			
			this.Deserialize<projectNS.Template, Template, pocoNS.Template>(info);
			
		}
			
		public Template(L2SNS.Template tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Template, intermediateNS.Template, L2SNS.Template, long>(this, t => t.Id, (t, val) => t.Id = val);
			_html = new EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, string>(this, t => t.Html, (t, val) => t.Html = val);
			_name = new EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, string>(this, t => t.Name, (t, val) => t.Name = val);
			_placeholders = new EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, string>(this, t => t.Placeholders, (t, val) => t.Placeholders = val);
			_tenantId = new EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_websiteId = new EntityField<projectNS.Template, intermediateNS.Template, L2SNS.Template, long>(this, t => t.WebsiteId, (t, val) => t.WebsiteId = val);
			_controls = new IntermediateManyToManyCollection<projectNS.Template, projectNS.Control, projectNS.TemplateControlMap, intermediateNS.Template, intermediateNS.Control, intermediateNS.TemplateControlMap, L2SNS.Template, L2SNS.Control, L2SNS.TemplateControlMap>(this, __map => __map.Template, __map => __map.Control, (__map, __t) => __map.Template = __t, (__map, __control) => __map.Control = __control, __control => __control._templates);
			_pages = new IntermediateEntityCollection<projectNS.Template, projectNS.Page, intermediateNS.Template, intermediateNS.Page, L2SNS.Template, L2SNS.Page>(this, __page => __page._displayTemplate);
			_tenant = new IntermediateEntityReference<projectNS.Template, projectNS.Tenant, intermediateNS.Template, intermediateNS.Tenant, L2SNS.Template, L2SNS.Tenant>(this, __t => __t.Tenant, (__t, __tenant) => __t.Tenant = __tenant, __tenant => __tenant._templates, false);
			_website = new IntermediateEntityReference<projectNS.Template, projectNS.Website, intermediateNS.Template, intermediateNS.Website, L2SNS.Template, L2SNS.Website>(this, __t => __t.Website, (__t, __website) => __t.Website = __website, __website => __website._templates, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Controls":
					return Controls.IsLoaded;
				case "Pages":
					return Pages.IsLoaded;
				case "Tenant":
                	return _tenant.IsLoaded;
				case "Website":
                	return _website.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Template : ITableEntity<intermediateNS.Template>
	{
        public intermediateNS.Template _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Template;
		}
	}
}

namespace taskometer.Core.Models
{
	public class TenantMapping : ModelEntityMapping<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant>
	{
		public TenantMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Revision>(e => e.Revisions, e => e.Tenant);
			AddRelationship<projectNS.Website>(e => e.Websites, e => e.Tenant);
			AddRelationship<projectNS.File>(e => e.Files, e => e.Tenant);
			AddRelationship<projectNS.IssuesPortal>(e => e.IssuesPortal, e => e.Tenant);
			AddRelationship<projectNS.User>(e => e.Users, e => e.Tenant);
			AddRelationship<projectNS.ProjectPortal>(e => e.ProjectPortal, e => e.Tenant);
			AddRelationship<projectNS.PermissionSet>(e => e.PermissionSets, e => e.Tenant);
			AddRelationship<projectNS.Template>(e => e.Templates, e => e.Tenant);
			AddRelationship<projectNS.Comment>(e => e.Comments, e => e.Tenant);
			AddRelationship<projectNS.Account>(e => e.Accounts, e => e.Tenant);
			AddRelationship<projectNS.Category>(e => e.Categories, e => e.Tenant);
			AddRelationship<projectNS.Page>(e => e.Pages, e => e.Tenant);
			AddRelationship<projectNS.Role>(e => e.Roles, e => e.Tenant);
			AddRelationship<projectNS.Permission>(e => e.Permissions, e => e.Tenant);
			AddRelationship<projectNS.Meta>(e => e.Metas, e => e.Tenant);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(TenantMapping))]
	public partial class Tenant : EntityBase, IModelEntity<intermediateNS.Tenant>	
	{
		private intermediateNS.Tenant __intermediateEntity;
		public intermediateNS.Tenant _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Tenant intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Domain 
		{	
			get { return _intermediateEntity.Domain; }
			set { _intermediateEntity.Domain = value; }
		}
		public virtual string Logo 
		{	
			get { return _intermediateEntity.Logo; }
			set { _intermediateEntity.Logo = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Plan 
		{	
			get { return _intermediateEntity.Plan; }
			set { _intermediateEntity.Plan = value; }
		}
		public virtual string Timezone 
		{	
			get { return _intermediateEntity.Timezone; }
			set { _intermediateEntity.Timezone = value; }
		}
			
		//Navigation Properties
		public ICollection<projectNS.Revision> Revisions 
		{	
			get { return _intermediateEntity.Revisions.EntityCollection; }
		}		
		public ICollection<projectNS.Website> Websites 
		{	
			get { return _intermediateEntity.Websites.EntityCollection; }
		}		
		public ICollection<projectNS.File> Files 
		{	
			get { return _intermediateEntity.Files.EntityCollection; }
		}		
		public IssuesPortal IssuesPortal 
		{	
			get { return _intermediateEntity.IssuesPortal.GetEntity(); }
			set { if (value != null) _intermediateEntity.IssuesPortal = value._intermediateEntity; else _intermediateEntity.IssuesPortal = null; }
		}
		public ICollection<projectNS.User> Users 
		{	
			get { return _intermediateEntity.Users.EntityCollection; }
		}		
		public ProjectPortal ProjectPortal 
		{	
			get { return _intermediateEntity.ProjectPortal.GetEntity(); }
			set { if (value != null) _intermediateEntity.ProjectPortal = value._intermediateEntity; else _intermediateEntity.ProjectPortal = null; }
		}
		public ICollection<projectNS.PermissionSet> PermissionSets 
		{	
			get { return _intermediateEntity.PermissionSets.EntityCollection; }
		}		
		public ICollection<projectNS.Template> Templates 
		{	
			get { return _intermediateEntity.Templates.EntityCollection; }
		}		
		public ICollection<projectNS.Comment> Comments 
		{	
			get { return _intermediateEntity.Comments.EntityCollection; }
		}		
		public ICollection<projectNS.Account> Accounts 
		{	
			get { return _intermediateEntity.Accounts.EntityCollection; }
		}		
		public ICollection<projectNS.Category> Categories 
		{	
			get { return _intermediateEntity.Categories.EntityCollection; }
		}		
		public ICollection<projectNS.Page> Pages 
		{	
			get { return _intermediateEntity.Pages.EntityCollection; }
		}		
		public ICollection<projectNS.Role> Roles 
		{	
			get { return _intermediateEntity.Roles.EntityCollection; }
		}		
		public ICollection<projectNS.Permission> Permissions 
		{	
			get { return _intermediateEntity.Permissions.EntityCollection; }
		}		
		public ICollection<projectNS.Meta> Metas 
		{	
			get { return _intermediateEntity.Metas.EntityCollection; }
		}		
		public Tenant() : this(new intermediateNS.Tenant())
		{
		}
			
		public Tenant(intermediateNS.Tenant intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Tenant(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Tenant(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Tenant, pocoNS.Tenant>(info);
		}

		public static bool operator ==(Tenant a, Tenant b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Tenant a, Tenant b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Tenant)this)._equals(obj as Tenant);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Tenant ToPOCO()
		{
			return this.CreatePOCO<Tenant, pocoNS.Tenant>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Tenant : IPOCO<projectNS.Tenant>	{


		public long Id { get; set; }
		public string Domain { get; set; }
		public string Logo { get; set; }
		public string Name { get; set; }
		public string Plan { get; set; }
		public string Timezone { get; set; }
		public POCOCollection Revisions { get; set; }

		public POCOCollection Websites { get; set; }

		public POCOCollection Files { get; set; }

		public POCOReference IssuesPortal { get; set; }

		public POCOCollection Users { get; set; }

		public POCOReference ProjectPortal { get; set; }

		public POCOCollection PermissionSets { get; set; }

		public POCOCollection Templates { get; set; }

		public POCOCollection Comments { get; set; }

		public POCOCollection Accounts { get; set; }

		public POCOCollection Categories { get; set; }

		public POCOCollection Pages { get; set; }

		public POCOCollection Roles { get; set; }

		public POCOCollection Permissions { get; set; }

		public POCOCollection Metas { get; set; }

			
		public Tenant()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Tenant : IntermediateEntity<projectNS.Tenant, L2SNS.Tenant>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _domain;
		public string Domain 
		{	
			get { return _domain.Value; }
			set { _domain.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _logo;
		public string Logo 
		{	
			get { return _logo.Value; }
			set { _logo.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _plan;
		public string Plan 
		{	
			get { return _plan.Value; }
			set { _plan.Value = value; }
		}
		public EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string> _timezone;
		public string Timezone 
		{	
			get { return _timezone.Value; }
			set { _timezone.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Revision, intermediateNS.Tenant, intermediateNS.Revision, L2SNS.Tenant, L2SNS.Revision> _revisions;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Revision, intermediateNS.Tenant, intermediateNS.Revision, L2SNS.Tenant, L2SNS.Revision> Revisions 
		{	
			get { return _revisions; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Website, intermediateNS.Tenant, intermediateNS.Website, L2SNS.Tenant, L2SNS.Website> _websites;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Website, intermediateNS.Tenant, intermediateNS.Website, L2SNS.Tenant, L2SNS.Website> Websites 
		{	
			get { return _websites; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.File, intermediateNS.Tenant, intermediateNS.File, L2SNS.Tenant, L2SNS.File> _files;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.File, intermediateNS.Tenant, intermediateNS.File, L2SNS.Tenant, L2SNS.File> Files 
		{	
			get { return _files; }		
		}				
		public IntermediateEntityReference<projectNS.Tenant, projectNS.IssuesPortal, intermediateNS.Tenant, intermediateNS.IssuesPortal, L2SNS.Tenant, L2SNS.IssuesPortal> _issuesPortal;
		public intermediateNS.IssuesPortal IssuesPortal
		{	
			get { return _issuesPortal.Value; }
			set { _issuesPortal.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.User, intermediateNS.Tenant, intermediateNS.User, L2SNS.Tenant, L2SNS.User> _users;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.User, intermediateNS.Tenant, intermediateNS.User, L2SNS.Tenant, L2SNS.User> Users 
		{	
			get { return _users; }		
		}				
		public IntermediateEntityReference<projectNS.Tenant, projectNS.ProjectPortal, intermediateNS.Tenant, intermediateNS.ProjectPortal, L2SNS.Tenant, L2SNS.ProjectPortal> _projectPortal;
		public intermediateNS.ProjectPortal ProjectPortal
		{	
			get { return _projectPortal.Value; }
			set { _projectPortal.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.PermissionSet, intermediateNS.Tenant, intermediateNS.PermissionSet, L2SNS.Tenant, L2SNS.PermissionSet> _permissionSets;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.PermissionSet, intermediateNS.Tenant, intermediateNS.PermissionSet, L2SNS.Tenant, L2SNS.PermissionSet> PermissionSets 
		{	
			get { return _permissionSets; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Template, intermediateNS.Tenant, intermediateNS.Template, L2SNS.Tenant, L2SNS.Template> _templates;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Template, intermediateNS.Tenant, intermediateNS.Template, L2SNS.Tenant, L2SNS.Template> Templates 
		{	
			get { return _templates; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Comment, intermediateNS.Tenant, intermediateNS.Comment, L2SNS.Tenant, L2SNS.Comment> _comments;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Comment, intermediateNS.Tenant, intermediateNS.Comment, L2SNS.Tenant, L2SNS.Comment> Comments 
		{	
			get { return _comments; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Account, intermediateNS.Tenant, intermediateNS.Account, L2SNS.Tenant, L2SNS.Account> _accounts;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Account, intermediateNS.Tenant, intermediateNS.Account, L2SNS.Tenant, L2SNS.Account> Accounts 
		{	
			get { return _accounts; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Category, intermediateNS.Tenant, intermediateNS.Category, L2SNS.Tenant, L2SNS.Category> _categories;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Category, intermediateNS.Tenant, intermediateNS.Category, L2SNS.Tenant, L2SNS.Category> Categories 
		{	
			get { return _categories; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Page, intermediateNS.Tenant, intermediateNS.Page, L2SNS.Tenant, L2SNS.Page> _pages;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Page, intermediateNS.Tenant, intermediateNS.Page, L2SNS.Tenant, L2SNS.Page> Pages 
		{	
			get { return _pages; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Role, intermediateNS.Tenant, intermediateNS.Role, L2SNS.Tenant, L2SNS.Role> _roles;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Role, intermediateNS.Tenant, intermediateNS.Role, L2SNS.Tenant, L2SNS.Role> Roles 
		{	
			get { return _roles; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Permission, intermediateNS.Tenant, intermediateNS.Permission, L2SNS.Tenant, L2SNS.Permission> _permissions;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Permission, intermediateNS.Tenant, intermediateNS.Permission, L2SNS.Tenant, L2SNS.Permission> Permissions 
		{	
			get { return _permissions; }		
		}				
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Meta, intermediateNS.Tenant, intermediateNS.Meta, L2SNS.Tenant, L2SNS.Meta> _metas;
		public IntermediateEntityCollection<projectNS.Tenant, projectNS.Meta, intermediateNS.Tenant, intermediateNS.Meta, L2SNS.Tenant, L2SNS.Meta> Metas 
		{	
			get { return _metas; }		
		}				
		
		//Inherited Navigation Properties
						
		public Tenant()
		{
			__tableEntity = new L2SNS.Tenant();
			initFields();
		}
		
		public Tenant(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Tenant();
			initFields();
			
			this.Deserialize<projectNS.Tenant, Tenant, pocoNS.Tenant>(info);
			
		}
			
		public Tenant(L2SNS.Tenant tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, long>(this, t => t.Id, (t, val) => t.Id = val);
			_domain = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.Domain, (t, val) => t.Domain = val);
			_logo = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.Logo, (t, val) => t.Logo = val);
			_name = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.Name, (t, val) => t.Name = val);
			_plan = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.Plan, (t, val) => t.Plan = val);
			_timezone = new EntityField<projectNS.Tenant, intermediateNS.Tenant, L2SNS.Tenant, string>(this, t => t.Timezone, (t, val) => t.Timezone = val);
			_revisions = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Revision, intermediateNS.Tenant, intermediateNS.Revision, L2SNS.Tenant, L2SNS.Revision>(this, __revision => __revision._tenant);
			_websites = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Website, intermediateNS.Tenant, intermediateNS.Website, L2SNS.Tenant, L2SNS.Website>(this, __website => __website._tenant);
			_files = new IntermediateEntityCollection<projectNS.Tenant, projectNS.File, intermediateNS.Tenant, intermediateNS.File, L2SNS.Tenant, L2SNS.File>(this, __file => __file._tenant);
			_issuesPortal = new IntermediateEntityReference<projectNS.Tenant, projectNS.IssuesPortal, intermediateNS.Tenant, intermediateNS.IssuesPortal, L2SNS.Tenant, L2SNS.IssuesPortal>(this, __t => __t.IssuesPortal, (__t, __issuesportal) => __t.IssuesPortal = __issuesportal, __issuesportal => __issuesportal._tenant, false);
			_users = new IntermediateEntityCollection<projectNS.Tenant, projectNS.User, intermediateNS.Tenant, intermediateNS.User, L2SNS.Tenant, L2SNS.User>(this, __user => __user._tenant);
			_projectPortal = new IntermediateEntityReference<projectNS.Tenant, projectNS.ProjectPortal, intermediateNS.Tenant, intermediateNS.ProjectPortal, L2SNS.Tenant, L2SNS.ProjectPortal>(this, __t => __t.ProjectPortal, (__t, __projectportal) => __t.ProjectPortal = __projectportal, __projectportal => __projectportal._tenant, false);
			_permissionSets = new IntermediateEntityCollection<projectNS.Tenant, projectNS.PermissionSet, intermediateNS.Tenant, intermediateNS.PermissionSet, L2SNS.Tenant, L2SNS.PermissionSet>(this, __permissionset => __permissionset._tenant);
			_templates = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Template, intermediateNS.Tenant, intermediateNS.Template, L2SNS.Tenant, L2SNS.Template>(this, __template => __template._tenant);
			_comments = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Comment, intermediateNS.Tenant, intermediateNS.Comment, L2SNS.Tenant, L2SNS.Comment>(this, __comment => __comment._tenant);
			_accounts = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Account, intermediateNS.Tenant, intermediateNS.Account, L2SNS.Tenant, L2SNS.Account>(this, __account => __account._tenant);
			_categories = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Category, intermediateNS.Tenant, intermediateNS.Category, L2SNS.Tenant, L2SNS.Category>(this, __category => __category._tenant);
			_pages = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Page, intermediateNS.Tenant, intermediateNS.Page, L2SNS.Tenant, L2SNS.Page>(this, __page => __page._tenant);
			_roles = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Role, intermediateNS.Tenant, intermediateNS.Role, L2SNS.Tenant, L2SNS.Role>(this, __role => __role._tenant);
			_permissions = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Permission, intermediateNS.Tenant, intermediateNS.Permission, L2SNS.Tenant, L2SNS.Permission>(this, __permission => __permission._tenant);
			_metas = new IntermediateEntityCollection<projectNS.Tenant, projectNS.Meta, intermediateNS.Tenant, intermediateNS.Meta, L2SNS.Tenant, L2SNS.Meta>(this, __meta => __meta._tenant);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Revisions":
					return Revisions.IsLoaded;
				case "Websites":
					return Websites.IsLoaded;
				case "Files":
					return Files.IsLoaded;
				case "IssuesPortal":
                	return _issuesPortal.IsLoaded;
				case "Users":
					return Users.IsLoaded;
				case "ProjectPortal":
                	return _projectPortal.IsLoaded;
				case "PermissionSets":
					return PermissionSets.IsLoaded;
				case "Templates":
					return Templates.IsLoaded;
				case "Comments":
					return Comments.IsLoaded;
				case "Accounts":
					return Accounts.IsLoaded;
				case "Categories":
					return Categories.IsLoaded;
				case "Pages":
					return Pages.IsLoaded;
				case "Roles":
					return Roles.IsLoaded;
				case "Permissions":
					return Permissions.IsLoaded;
				case "Metas":
					return Metas.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Tenant : ITableEntity<intermediateNS.Tenant>
	{
        public intermediateNS.Tenant _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Tenant;
		}
	}
}

namespace taskometer.Core.Models
{
	public class UserMapping : ModelEntityMapping<projectNS.User, intermediateNS.User, L2SNS.User>
	{
		public UserMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Users);
			AddRelationship<projectNS.Page>(e => e.Pages, e => e.Author);
			AddRelationship<projectNS.Comment>(e => e.Comments, e => e.AddedBy);
			AddRelationship<projectNS.Account>(e => e.Account, e => e.User);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(UserMapping))]
	public partial class User : EntityBase, IModelEntity<intermediateNS.User>	
	{
		private intermediateNS.User __intermediateEntity;
		public intermediateNS.User _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.User intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual long AccountId 
		{	
			get { return _intermediateEntity.AccountId; }
			set { _intermediateEntity.AccountId = value; }
		}
		public virtual string FirstName 
		{	
			get { return _intermediateEntity.FirstName; }
			set { _intermediateEntity.FirstName = value; }
		}
		public virtual string LastName 
		{	
			get { return _intermediateEntity.LastName; }
			set { _intermediateEntity.LastName = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
			
		//Navigation Properties
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public ICollection<projectNS.Page> Pages 
		{	
			get { return _intermediateEntity.Pages.EntityCollection; }
		}		
		public ICollection<projectNS.Comment> Comments 
		{	
			get { return _intermediateEntity.Comments.EntityCollection; }
		}		
		public Account Account 
		{	
			get { return _intermediateEntity.Account.GetEntity(); }
			set { if (value != null) _intermediateEntity.Account = value._intermediateEntity; else _intermediateEntity.Account = null; }
		}
		public User() : this(new intermediateNS.User())
		{
		}
			
		public User(intermediateNS.User intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public User(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.User(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<User, pocoNS.User>(info);
		}

		public static bool operator ==(User a, User b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(User a, User b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((User)this)._equals(obj as User);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.User ToPOCO()
		{
			return this.CreatePOCO<User, pocoNS.User>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class User : IPOCO<projectNS.User>	{


		public long Id { get; set; }
		public long AccountId { get; set; }
		public string FirstName { get; set; }
		public string LastName { get; set; }
		public long TenantId { get; set; }
		public POCOReference Tenant { get; set; }

		public POCOCollection Pages { get; set; }

		public POCOCollection Comments { get; set; }

		public POCOReference Account { get; set; }

			
		public User()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class User : IntermediateEntity<projectNS.User, L2SNS.User>
	{
		//Fields				
		public PrimaryKeyField<projectNS.User, intermediateNS.User, L2SNS.User, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long> _accountId;
		public long AccountId 
		{	
			get { return _accountId.Value; }
			set { _accountId.Value = value; }
		}
		public EntityField<projectNS.User, intermediateNS.User, L2SNS.User, string> _firstName;
		public string FirstName 
		{	
			get { return _firstName.Value; }
			set { _firstName.Value = value; }
		}
		public EntityField<projectNS.User, intermediateNS.User, L2SNS.User, string> _lastName;
		public string LastName 
		{	
			get { return _lastName.Value; }
			set { _lastName.Value = value; }
		}
		public EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.User, projectNS.Tenant, intermediateNS.User, intermediateNS.Tenant, L2SNS.User, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.User, projectNS.Page, intermediateNS.User, intermediateNS.Page, L2SNS.User, L2SNS.Page> _pages;
		public IntermediateEntityCollection<projectNS.User, projectNS.Page, intermediateNS.User, intermediateNS.Page, L2SNS.User, L2SNS.Page> Pages 
		{	
			get { return _pages; }		
		}				
		public IntermediateEntityCollection<projectNS.User, projectNS.Comment, intermediateNS.User, intermediateNS.Comment, L2SNS.User, L2SNS.Comment> _comments;
		public IntermediateEntityCollection<projectNS.User, projectNS.Comment, intermediateNS.User, intermediateNS.Comment, L2SNS.User, L2SNS.Comment> Comments 
		{	
			get { return _comments; }		
		}				
		public IntermediateEntityReference<projectNS.User, projectNS.Account, intermediateNS.User, intermediateNS.Account, L2SNS.User, L2SNS.Account> _account;
		public intermediateNS.Account Account
		{	
			get { return _account.Value; }
			set { _account.Value = value; }
		}
		
		//Inherited Navigation Properties
						
		public User()
		{
			__tableEntity = new L2SNS.User();
			initFields();
		}
		
		public User(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.User();
			initFields();
			
			this.Deserialize<projectNS.User, User, pocoNS.User>(info);
			
		}
			
		public User(L2SNS.User tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.User, intermediateNS.User, L2SNS.User, long>(this, t => t.Id, (t, val) => t.Id = val);
			_accountId = new EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long>(this, t => t.AccountId, (t, val) => t.AccountId = val);
			_firstName = new EntityField<projectNS.User, intermediateNS.User, L2SNS.User, string>(this, t => t.FirstName, (t, val) => t.FirstName = val);
			_lastName = new EntityField<projectNS.User, intermediateNS.User, L2SNS.User, string>(this, t => t.LastName, (t, val) => t.LastName = val);
			_tenantId = new EntityField<projectNS.User, intermediateNS.User, L2SNS.User, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_tenant = new IntermediateEntityReference<projectNS.User, projectNS.Tenant, intermediateNS.User, intermediateNS.Tenant, L2SNS.User, L2SNS.Tenant>(this, __u => __u.Tenant, (__u, __tenant) => __u.Tenant = __tenant, __tenant => __tenant._users, false);
			_pages = new IntermediateEntityCollection<projectNS.User, projectNS.Page, intermediateNS.User, intermediateNS.Page, L2SNS.User, L2SNS.Page>(this, __page => __page._author);
			_comments = new IntermediateEntityCollection<projectNS.User, projectNS.Comment, intermediateNS.User, intermediateNS.Comment, L2SNS.User, L2SNS.Comment>(this, __comment => __comment._addedBy);
			_account = new IntermediateEntityReference<projectNS.User, projectNS.Account, intermediateNS.User, intermediateNS.Account, L2SNS.User, L2SNS.Account>(this, __u => __u.Account, (__u, __account) => __u.Account = __account, __account => __account._user, false);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Tenant":
                	return _tenant.IsLoaded;
				case "Pages":
					return Pages.IsLoaded;
				case "Comments":
					return Comments.IsLoaded;
				case "Account":
                	return _account.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class User : ITableEntity<intermediateNS.User>
	{
        public intermediateNS.User _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.User;
		}
	}
}

namespace taskometer.Core.Models
{
	public class WebsiteMapping : ModelEntityMapping<projectNS.Website, intermediateNS.Website, L2SNS.Website>
	{
		public WebsiteMapping()
		{
			AddMappings();
		}
		
		public virtual void AddMappings()
		{
			AddIdentityField<long>(e => e.Id); 
			AddRelationship<projectNS.Tenant>(e => e.Tenant, e => e.Websites);
			AddRelationship<projectNS.Meta>(e => e.Meta, e => e.Website);
			AddRelationship<projectNS.Template>(e => e.Templates, e => e.Website);
			AddRelationship<projectNS.Category>(e => e.Categories, e => e.Website);
		}
	}
		
	[Serializable]
	[ClassMapping(typeof(WebsiteMapping))]
	public partial class Website : EntityBase, IModelEntity<intermediateNS.Website>	
	{
		private intermediateNS.Website __intermediateEntity;
		public intermediateNS.Website _intermediateEntity { get { return __intermediateEntity; } }
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}
		
		public void _setIntermediateEntity(intermediateNS.Website intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
 
		}
		
		//Fields		
		public virtual long Id 
		{	
			get { return _intermediateEntity.Id; }
			set { _intermediateEntity.Id = value; }
		}
		public virtual string Domain 
		{	
			get { return _intermediateEntity.Domain; }
			set { _intermediateEntity.Domain = value; }
		}
		public virtual string Name 
		{	
			get { return _intermediateEntity.Name; }
			set { _intermediateEntity.Name = value; }
		}
		public virtual string Path 
		{	
			get { return _intermediateEntity.Path; }
			set { _intermediateEntity.Path = value; }
		}
		public virtual long TenantId 
		{	
			get { return _intermediateEntity.TenantId; }
			set { _intermediateEntity.TenantId = value; }
		}
		public virtual string Title 
		{	
			get { return _intermediateEntity.Title; }
			set { _intermediateEntity.Title = value; }
		}
		public virtual string Type 
		{	
			get { return _intermediateEntity.Type; }
			set { _intermediateEntity.Type = value; }
		}
			
		//Navigation Properties
		public Tenant Tenant 
		{	
			get { return _intermediateEntity.Tenant.GetEntity(); }
			set { if (value != null) _intermediateEntity.Tenant = value._intermediateEntity; else _intermediateEntity.Tenant = null; }
		}
		public ICollection<projectNS.Meta> Meta 
		{	
			get { return _intermediateEntity.Meta.EntityCollection; }
		}		
		public ICollection<projectNS.Template> Templates 
		{	
			get { return _intermediateEntity.Templates.EntityCollection; }
		}		
		public ICollection<projectNS.Category> Categories 
		{	
			get { return _intermediateEntity.Categories.EntityCollection; }
		}		
		public Website() : this(new intermediateNS.Website())
		{
		}
			
		public Website(intermediateNS.Website intermediateEntity)		
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public Website(SerializationInfo info, StreamingContext context)
		{
			__intermediateEntity = new intermediateNS.Website(info, context);
			__intermediateEntity._entity = this;
		}

		public void GetObjectData(SerializationInfo info, StreamingContext context)
		{
			this.Serialize<Website, pocoNS.Website>(info);
		}

		public static bool operator ==(Website a, Website b)
		{
			return a._equals(b);
		}
		
		public static bool operator !=(Website a, Website b)
		{
			return !a._equals(b);
		}
		
		public override bool Equals(System.Object obj)
		{
			return ((Website)this)._equals(obj as Website);
		}
		
		public override int GetHashCode()
		{
			return __intermediateEntity.GetHashCode();;
		}
		
		public pocoNS.Website ToPOCO()
		{
			return this.CreatePOCO<Website, pocoNS.Website>();
		}
	}
}

namespace taskometer.Core.Models.POCO
{
	[Serializable]
	public class Website : IPOCO<projectNS.Website>	{


		public long Id { get; set; }
		public string Domain { get; set; }
		public string Name { get; set; }
		public string Path { get; set; }
		public long TenantId { get; set; }
		public string Title { get; set; }
		public string Type { get; set; }
		public POCOReference Tenant { get; set; }

		public POCOCollection Meta { get; set; }

		public POCOCollection Templates { get; set; }

		public POCOCollection Categories { get; set; }

			
		public Website()
		{
		}
	}
}
	
namespace taskometer.Core.Models.Intermediate
{
	public class Website : IntermediateEntity<projectNS.Website, L2SNS.Website>
	{
		//Fields				
		public PrimaryKeyField<projectNS.Website, intermediateNS.Website, L2SNS.Website, long> _id;
		public long Id 
		{	
			get { return _id.Value; }
			set { _id.Value = value; }
		}
		public EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string> _domain;
		public string Domain 
		{	
			get { return _domain.Value; }
			set { _domain.Value = value; }
		}
		public EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string> _name;
		public string Name 
		{	
			get { return _name.Value; }
			set { _name.Value = value; }
		}
		public EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string> _path;
		public string Path 
		{	
			get { return _path.Value; }
			set { _path.Value = value; }
		}
		public EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, long> _tenantId;
		public long TenantId 
		{	
			get { return _tenantId.Value; }
			set { _tenantId.Value = value; }
		}
		public EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string> _title;
		public string Title 
		{	
			get { return _title.Value; }
			set { _title.Value = value; }
		}
		public EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string> _type;
		public string Type 
		{	
			get { return _type.Value; }
			set { _type.Value = value; }
		}


		//Navigation Properties
		public IntermediateEntityReference<projectNS.Website, projectNS.Tenant, intermediateNS.Website, intermediateNS.Tenant, L2SNS.Website, L2SNS.Tenant> _tenant;
		public intermediateNS.Tenant Tenant
		{	
			get { return _tenant.Value; }
			set { _tenant.Value = value; }
		}
		public IntermediateEntityCollection<projectNS.Website, projectNS.Meta, intermediateNS.Website, intermediateNS.Meta, L2SNS.Website, L2SNS.Meta> _meta;
		public IntermediateEntityCollection<projectNS.Website, projectNS.Meta, intermediateNS.Website, intermediateNS.Meta, L2SNS.Website, L2SNS.Meta> Meta 
		{	
			get { return _meta; }		
		}				
		public IntermediateEntityCollection<projectNS.Website, projectNS.Template, intermediateNS.Website, intermediateNS.Template, L2SNS.Website, L2SNS.Template> _templates;
		public IntermediateEntityCollection<projectNS.Website, projectNS.Template, intermediateNS.Website, intermediateNS.Template, L2SNS.Website, L2SNS.Template> Templates 
		{	
			get { return _templates; }		
		}				
		public IntermediateEntityCollection<projectNS.Website, projectNS.Category, intermediateNS.Website, intermediateNS.Category, L2SNS.Website, L2SNS.Category> _categories;
		public IntermediateEntityCollection<projectNS.Website, projectNS.Category, intermediateNS.Website, intermediateNS.Category, L2SNS.Website, L2SNS.Category> Categories 
		{	
			get { return _categories; }		
		}				
		
		//Inherited Navigation Properties
						
		public Website()
		{
			__tableEntity = new L2SNS.Website();
			initFields();
		}
		
		public Website(SerializationInfo info, StreamingContext context)
		{
			__tableEntity = new L2SNS.Website();
			initFields();
			
			this.Deserialize<projectNS.Website, Website, pocoNS.Website>(info);
			
		}
			
		public Website(L2SNS.Website tableEntity)
		{
			__tableEntity = tableEntity;
			initFields();
		}

		private void initFields()
		{
			_id = new PrimaryKeyField<projectNS.Website, intermediateNS.Website, L2SNS.Website, long>(this, t => t.Id, (t, val) => t.Id = val);
			_domain = new EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string>(this, t => t.Domain, (t, val) => t.Domain = val);
			_name = new EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string>(this, t => t.Name, (t, val) => t.Name = val);
			_path = new EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string>(this, t => t.Path, (t, val) => t.Path = val);
			_tenantId = new EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, long>(this, t => t.TenantId, (t, val) => t.TenantId = val);
			_title = new EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string>(this, t => t.Title, (t, val) => t.Title = val);
			_type = new EntityField<projectNS.Website, intermediateNS.Website, L2SNS.Website, string>(this, t => t.Type, (t, val) => t.Type = val);
			_tenant = new IntermediateEntityReference<projectNS.Website, projectNS.Tenant, intermediateNS.Website, intermediateNS.Tenant, L2SNS.Website, L2SNS.Tenant>(this, __w => __w.Tenant, (__w, __tenant) => __w.Tenant = __tenant, __tenant => __tenant._websites, false);
			_meta = new IntermediateEntityCollection<projectNS.Website, projectNS.Meta, intermediateNS.Website, intermediateNS.Meta, L2SNS.Website, L2SNS.Meta>(this, __meta => __meta._website);
			_templates = new IntermediateEntityCollection<projectNS.Website, projectNS.Template, intermediateNS.Website, intermediateNS.Template, L2SNS.Website, L2SNS.Template>(this, __template => __template._website);
			_categories = new IntermediateEntityCollection<projectNS.Website, projectNS.Category, intermediateNS.Website, intermediateNS.Category, L2SNS.Website, L2SNS.Category>(this, __category => __category._website);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
          var fieldName = ExpressionUtil.GetPropertyName(fieldSelector);
            switch (fieldName)
            {
				case "Tenant":
                	return _tenant.IsLoaded;
				case "Meta":
					return Meta.IsLoaded;
				case "Templates":
					return Templates.IsLoaded;
				case "Categories":
					return Categories.IsLoaded;
            }
            throw new InvalidOperationException();
        }
	}
}
	
namespace taskometer.Core.Models.L2S
{
	partial class Website : ITableEntity<intermediateNS.Website>
	{
        public intermediateNS.Website _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}		
			
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.Website;
		}
	}
}

namespace taskometer.Core.Models
{
    public class AccountRoleMapMapping : MapEntityMapping<projectNS.AccountRoleMap, intermediateNS.AccountRoleMap, L2SNS.AccountRoleMap>
    {
       public AccountRoleMapMapping()
       {
	   		AddMappings();
       }
	   
	   public virtual void AddMappings()
	   {
		   AddIdentityField<long>(__a => __a.AccountId, false);
		   AddIdentityField<long>(__a => __a.RoleId, false);
	   	   
		   AddManyToManyKeyRelationship<long, Account, long>(__a => __a.AccountId, __a => __a.Id);
		   AddManyToManyKeyRelationship<long, Role, long>(__a => __a.RoleId, __a => __a.Id);
	   	   
		   AddManyToManyMap<Account, L2SNS.Account>(__a => __a.Account, __a => __a.AccountRoleMap);
           AddManyToManyMap<Role, L2SNS.Role>(__a => __a.Role, __a => __a.AccountRoleMap);	   
	   }
   	}
	
	[ClassMapping(typeof(AccountRoleMapMapping))]
	public partial class AccountRoleMap : IEntity<intermediateNS.AccountRoleMap>
	{
		private intermediateNS.AccountRoleMap __intermediateEntity;
		public intermediateNS.AccountRoleMap _intermediateEntity { get { return __intermediateEntity; } }		
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}		
		public void _setIntermediateEntity(intermediateNS.AccountRoleMap intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public virtual long AccountId
		{
			get { return __intermediateEntity.AccountId; }
			set { __intermediateEntity.AccountId = value; }
		}
		
		public virtual long RoleId
		{
			get { return __intermediateEntity.RoleId; }
			set { __intermediateEntity.RoleId = value; }
		}
		
		public projectNS.Account Account
		{	
			get { return _intermediateEntity.Account.GetEntity(); }
			set { if (value != null) _intermediateEntity.Account = value._intermediateEntity; else _intermediateEntity.Account = null; }
		}
		
		public projectNS.Role Role
		{	
			get { return _intermediateEntity.Role.GetEntity(); }
			set { if (value != null) _intermediateEntity.Role = value._intermediateEntity; else _intermediateEntity.Role = null; }
		}
						
		public AccountRoleMap()
		{
			__intermediateEntity = new intermediateNS.AccountRoleMap();
			__intermediateEntity._entity = this;
		}
			
		public AccountRoleMap(intermediateNS.AccountRoleMap intermediateEntity)
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
	}
}

namespace taskometer.Core.Models.Intermediate
{
	public class AccountRoleMap : IntermediateEntity<projectNS.AccountRoleMap, L2SNS.AccountRoleMap>
	{
		private bool _loadedFromDatabase = false;
		
		public PrimaryKeyField<projectNS.AccountRoleMap, intermediateNS.AccountRoleMap, L2SNS.AccountRoleMap, long> _accountId;
		public long AccountId
		{
			get { return _accountId.Value; }
			set { _accountId.Value = value; }
		}
		
		public PrimaryKeyField<projectNS.AccountRoleMap, intermediateNS.AccountRoleMap, L2SNS.AccountRoleMap, long> _roleId;
		public long RoleId
		{
			get { return _roleId.Value; }
			set { _roleId.Value = value; }
		}
	
		private intermediateNS.Account _account;
		public intermediateNS.Account Account
		{	
			get { return _account; }
			set { _account = value; if (!_loadedFromDatabase) { __tableEntity.Account = value._tableEntity; } }
		}
		
		private intermediateNS.Role _role;
		public intermediateNS.Role Role
		{	
			get { return _role; }
			set { _role = value; if (!_loadedFromDatabase) { __tableEntity.Role = value._tableEntity; } }
		}
						
		public AccountRoleMap()
		{
			__tableEntity = new L2SNS.AccountRoleMap();
			initFields();
		}
			
		public AccountRoleMap(L2SNS.AccountRoleMap tableEntity)
		{
			_loadedFromDatabase = true;
			__tableEntity = tableEntity;
			initFields();
		}
		
		private void initFields()
		{
			_accountId = new PrimaryKeyField<projectNS.AccountRoleMap, intermediateNS.AccountRoleMap, L2SNS.AccountRoleMap, long>(this, __m => __m.AccountId, (__m, val) => __m.AccountId = val);
			_roleId = new PrimaryKeyField<projectNS.AccountRoleMap, intermediateNS.AccountRoleMap, L2SNS.AccountRoleMap, long>(this, __m => __m.RoleId, (__m, val) => __m.RoleId = val);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
			return true;
		}
	}
}

namespace taskometer.Core.Models.L2S
{
	partial class AccountRoleMap : ITableEntity<intermediateNS.AccountRoleMap>
	{
        public intermediateNS.AccountRoleMap _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}
		
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.AccountRoleMap;
		}
	}
}
namespace taskometer.Core.Models
{
    public class TemplateControlMapMapping : MapEntityMapping<projectNS.TemplateControlMap, intermediateNS.TemplateControlMap, L2SNS.TemplateControlMap>
    {
       public TemplateControlMapMapping()
       {
	   		AddMappings();
       }
	   
	   public virtual void AddMappings()
	   {
		   AddIdentityField<long>(__a => __a.ControlId, false);
		   AddIdentityField<long>(__a => __a.TemplateId, false);
	   	   
		   AddManyToManyKeyRelationship<long, Control, long>(__a => __a.ControlId, __a => __a.Id);
		   AddManyToManyKeyRelationship<long, Template, long>(__a => __a.TemplateId, __a => __a.Id);
	   	   
		   AddManyToManyMap<Control, L2SNS.Control>(__a => __a.Control, __a => __a.TemplateControlMap);
           AddManyToManyMap<Template, L2SNS.Template>(__a => __a.Template, __a => __a.TemplateControlMap);	   
	   }
   	}
	
	[ClassMapping(typeof(TemplateControlMapMapping))]
	public partial class TemplateControlMap : IEntity<intermediateNS.TemplateControlMap>
	{
		private intermediateNS.TemplateControlMap __intermediateEntity;
		public intermediateNS.TemplateControlMap _intermediateEntity { get { return __intermediateEntity; } }		
		public IntermediateEntity _getIntermediateEntity() 
		{ 
			return __intermediateEntity; 
		}		
		public void _setIntermediateEntity(intermediateNS.TemplateControlMap intermediateEntity) 
		{ 
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
		
		public virtual long ControlId
		{
			get { return __intermediateEntity.ControlId; }
			set { __intermediateEntity.ControlId = value; }
		}
		
		public virtual long TemplateId
		{
			get { return __intermediateEntity.TemplateId; }
			set { __intermediateEntity.TemplateId = value; }
		}
		
		public projectNS.Control Control
		{	
			get { return _intermediateEntity.Control.GetEntity(); }
			set { if (value != null) _intermediateEntity.Control = value._intermediateEntity; else _intermediateEntity.Control = null; }
		}
		
		public projectNS.Template Template
		{	
			get { return _intermediateEntity.Template.GetEntity(); }
			set { if (value != null) _intermediateEntity.Template = value._intermediateEntity; else _intermediateEntity.Template = null; }
		}
						
		public TemplateControlMap()
		{
			__intermediateEntity = new intermediateNS.TemplateControlMap();
			__intermediateEntity._entity = this;
		}
			
		public TemplateControlMap(intermediateNS.TemplateControlMap intermediateEntity)
		{
			__intermediateEntity = intermediateEntity;
			__intermediateEntity._entity = this;
		}
	}
}

namespace taskometer.Core.Models.Intermediate
{
	public class TemplateControlMap : IntermediateEntity<projectNS.TemplateControlMap, L2SNS.TemplateControlMap>
	{
		private bool _loadedFromDatabase = false;
		
		public PrimaryKeyField<projectNS.TemplateControlMap, intermediateNS.TemplateControlMap, L2SNS.TemplateControlMap, long> _controlId;
		public long ControlId
		{
			get { return _controlId.Value; }
			set { _controlId.Value = value; }
		}
		
		public PrimaryKeyField<projectNS.TemplateControlMap, intermediateNS.TemplateControlMap, L2SNS.TemplateControlMap, long> _templateId;
		public long TemplateId
		{
			get { return _templateId.Value; }
			set { _templateId.Value = value; }
		}
	
		private intermediateNS.Control _control;
		public intermediateNS.Control Control
		{	
			get { return _control; }
			set { _control = value; if (!_loadedFromDatabase) { __tableEntity.Control = value._tableEntity; } }
		}
		
		private intermediateNS.Template _template;
		public intermediateNS.Template Template
		{	
			get { return _template; }
			set { _template = value; if (!_loadedFromDatabase) { __tableEntity.Template = value._tableEntity; } }
		}
						
		public TemplateControlMap()
		{
			__tableEntity = new L2SNS.TemplateControlMap();
			initFields();
		}
			
		public TemplateControlMap(L2SNS.TemplateControlMap tableEntity)
		{
			_loadedFromDatabase = true;
			__tableEntity = tableEntity;
			initFields();
		}
		
		private void initFields()
		{
			_controlId = new PrimaryKeyField<projectNS.TemplateControlMap, intermediateNS.TemplateControlMap, L2SNS.TemplateControlMap, long>(this, __m => __m.ControlId, (__m, val) => __m.ControlId = val);
			_templateId = new PrimaryKeyField<projectNS.TemplateControlMap, intermediateNS.TemplateControlMap, L2SNS.TemplateControlMap, long>(this, __m => __m.TemplateId, (__m, val) => __m.TemplateId = val);
		}
		
		public override bool IsLoaded(LambdaExpression fieldSelector)
        {
			return true;
		}
	}
}

namespace taskometer.Core.Models.L2S
{
	partial class TemplateControlMap : ITableEntity<intermediateNS.TemplateControlMap>
	{
        public intermediateNS.TemplateControlMap _intermediateEntity { get; set; }
	
		public IntermediateEntity _getIntermediateEntity()
		{
			return _intermediateEntity;
		}
		
		public void _setIntermediateEntity(IntermediateEntity intermediateEntity)
		{
			_intermediateEntity = intermediateEntity as intermediateNS.TemplateControlMap;
		}
	}
}

